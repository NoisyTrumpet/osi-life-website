/* eslint-disable */

/* prettier-ignore */

/* THIS FILE IS AUTOGENERATED. CHANGES WILL BE LOST ON SUBSEQUENT RUNS. */

declare namespace Queries {

type Maybe<T> = T | null;
type InputMaybe<T> = T | null;
type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
type Scalars = {
  /** The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID. */
  ID: string;
  /** The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text. */
  String: string;
  /** The `Boolean` scalar type represents `true` or `false`. */
  Boolean: boolean;
  /** The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. */
  Int: number;
  /** The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). */
  Float: number;
  /** A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
  Date: string;
  GatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData;
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSON: Record<string, unknown>;
};

type AVIFOptions = {
  readonly lossless: InputMaybe<Scalars['Boolean']>;
  readonly quality: InputMaybe<Scalars['Int']>;
  readonly speed: InputMaybe<Scalars['Int']>;
};

type BlurredOptions = {
  /** Force the output format for the low-res preview. Default is to use the same format as the input. You should rarely need to change this */
  readonly toFormat: InputMaybe<ImageFormat>;
  /** Width of the generated low-res preview. Default is 20px */
  readonly width: InputMaybe<Scalars['Int']>;
};

type BooleanQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Boolean']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
  readonly ne: InputMaybe<Scalars['Boolean']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
};

type ContentfulAsset = ContentfulReference & Node & RemoteFile & {
  readonly children: ReadonlyArray<Node>;
  readonly contentful_id: Scalars['String'];
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly description: Maybe<Scalars['String']>;
  readonly file: Maybe<ContentfulAssetFile>;
  readonly filename: Scalars['String'];
  readonly filesize: Maybe<Scalars['Int']>;
  /** Data used in the <GatsbyImage /> component. See https://gatsby.dev/img for more info. */
  readonly gatsbyImage: Maybe<Scalars['GatsbyImageData']>;
  readonly gatsbyImageData: Maybe<Scalars['GatsbyImageData']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly mimeType: Scalars['String'];
  readonly node_locale: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly placeholderUrl: Maybe<Scalars['String']>;
  readonly publicUrl: Scalars['String'];
  readonly resize: Maybe<RemoteFileResize>;
  readonly size: Maybe<Scalars['Int']>;
  readonly spaceId: Maybe<Scalars['String']>;
  readonly sys: Maybe<ContentfulAssetSys>;
  readonly title: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
  readonly url: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};


type ContentfulAsset_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type ContentfulAsset_gatsbyImageArgs = {
  aspectRatio: InputMaybe<Scalars['Float']>;
  backgroundColor: InputMaybe<Scalars['String']>;
  breakpoints?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  cropFocus: InputMaybe<ReadonlyArray<InputMaybe<RemoteFileCropFocus>>>;
  fit?: InputMaybe<RemoteFileFit>;
  formats?: InputMaybe<ReadonlyArray<RemoteFileFormat>>;
  height: InputMaybe<Scalars['Int']>;
  layout?: InputMaybe<RemoteFileLayout>;
  outputPixelDensities?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  placeholder?: InputMaybe<RemoteFilePlaceholder>;
  quality?: InputMaybe<Scalars['Int']>;
  sizes: InputMaybe<Scalars['String']>;
  width: InputMaybe<Scalars['Int']>;
};


type ContentfulAsset_gatsbyImageDataArgs = {
  aspectRatio: InputMaybe<Scalars['Float']>;
  backgroundColor: InputMaybe<Scalars['String']>;
  breakpoints: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  cornerRadius?: InputMaybe<Scalars['Int']>;
  cropFocus: InputMaybe<ContentfulImageCropFocus>;
  formats?: InputMaybe<ReadonlyArray<InputMaybe<GatsbyImageFormat>>>;
  height: InputMaybe<Scalars['Int']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  layout: InputMaybe<GatsbyImageLayout>;
  outputPixelDensities: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  placeholder: InputMaybe<GatsbyImagePlaceholder>;
  quality: InputMaybe<Scalars['Int']>;
  resizingBehavior: InputMaybe<ImageResizingBehavior>;
  sizes: InputMaybe<Scalars['String']>;
  width: InputMaybe<Scalars['Int']>;
};


type ContentfulAsset_resizeArgs = {
  aspectRatio: InputMaybe<Scalars['Float']>;
  cropFocus: InputMaybe<ReadonlyArray<InputMaybe<RemoteFileCropFocus>>>;
  fit?: InputMaybe<RemoteFileFit>;
  format?: InputMaybe<RemoteFileFormat>;
  height: InputMaybe<Scalars['Int']>;
  quality?: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};


type ContentfulAsset_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type ContentfulAssetConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulAssetEdge>;
  readonly group: ReadonlyArray<ContentfulAssetGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulAsset>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulAssetConnection_distinctArgs = {
  field: ContentfulAssetFieldSelector;
};


type ContentfulAssetConnection_groupArgs = {
  field: ContentfulAssetFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulAssetConnection_maxArgs = {
  field: ContentfulAssetFieldSelector;
};


type ContentfulAssetConnection_minArgs = {
  field: ContentfulAssetFieldSelector;
};


type ContentfulAssetConnection_sumArgs = {
  field: ContentfulAssetFieldSelector;
};

type ContentfulAssetEdge = {
  readonly next: Maybe<ContentfulAsset>;
  readonly node: ContentfulAsset;
  readonly previous: Maybe<ContentfulAsset>;
};

type ContentfulAssetFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly file: InputMaybe<ContentfulAssetFileFieldSelector>;
  readonly filename: InputMaybe<FieldSelectorEnum>;
  readonly filesize: InputMaybe<FieldSelectorEnum>;
  readonly gatsbyImage: InputMaybe<FieldSelectorEnum>;
  readonly gatsbyImageData: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mimeType: InputMaybe<FieldSelectorEnum>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly placeholderUrl: InputMaybe<FieldSelectorEnum>;
  readonly publicUrl: InputMaybe<FieldSelectorEnum>;
  readonly resize: InputMaybe<RemoteFileResizeFieldSelector>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly spaceId: InputMaybe<FieldSelectorEnum>;
  readonly sys: InputMaybe<ContentfulAssetSysFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ContentfulAssetFile = {
  readonly contentType: Maybe<Scalars['String']>;
  readonly details: Maybe<ContentfulAssetFileDetails>;
  readonly fileName: Maybe<Scalars['String']>;
  readonly url: Maybe<Scalars['String']>;
};

type ContentfulAssetFileDetails = {
  readonly image: Maybe<ContentfulAssetFileDetailsImage>;
  readonly size: Maybe<Scalars['Int']>;
};

type ContentfulAssetFileDetailsFieldSelector = {
  readonly image: InputMaybe<ContentfulAssetFileDetailsImageFieldSelector>;
  readonly size: InputMaybe<FieldSelectorEnum>;
};

type ContentfulAssetFileDetailsFilterInput = {
  readonly image: InputMaybe<ContentfulAssetFileDetailsImageFilterInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
};

type ContentfulAssetFileDetailsImage = {
  readonly height: Maybe<Scalars['Int']>;
  readonly width: Maybe<Scalars['Int']>;
};

type ContentfulAssetFileDetailsImageFieldSelector = {
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ContentfulAssetFileDetailsImageFilterInput = {
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type ContentfulAssetFileDetailsImageSortInput = {
  readonly height: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ContentfulAssetFileDetailsSortInput = {
  readonly image: InputMaybe<ContentfulAssetFileDetailsImageSortInput>;
  readonly size: InputMaybe<SortOrderEnum>;
};

type ContentfulAssetFileFieldSelector = {
  readonly contentType: InputMaybe<FieldSelectorEnum>;
  readonly details: InputMaybe<ContentfulAssetFileDetailsFieldSelector>;
  readonly fileName: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type ContentfulAssetFileFilterInput = {
  readonly contentType: InputMaybe<StringQueryOperatorInput>;
  readonly details: InputMaybe<ContentfulAssetFileDetailsFilterInput>;
  readonly fileName: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulAssetFileSortInput = {
  readonly contentType: InputMaybe<SortOrderEnum>;
  readonly details: InputMaybe<ContentfulAssetFileDetailsSortInput>;
  readonly fileName: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
};

type ContentfulAssetFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly file: InputMaybe<ContentfulAssetFileFilterInput>;
  readonly filename: InputMaybe<StringQueryOperatorInput>;
  readonly filesize: InputMaybe<IntQueryOperatorInput>;
  readonly gatsbyImage: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  readonly gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mimeType: InputMaybe<StringQueryOperatorInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly placeholderUrl: InputMaybe<StringQueryOperatorInput>;
  readonly publicUrl: InputMaybe<StringQueryOperatorInput>;
  readonly resize: InputMaybe<RemoteFileResizeFilterInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly spaceId: InputMaybe<StringQueryOperatorInput>;
  readonly sys: InputMaybe<ContentfulAssetSysFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type ContentfulAssetFilterListInput = {
  readonly elemMatch: InputMaybe<ContentfulAssetFilterInput>;
};

type ContentfulAssetGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulAssetEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulAssetGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulAsset>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulAssetGroupConnection_distinctArgs = {
  field: ContentfulAssetFieldSelector;
};


type ContentfulAssetGroupConnection_groupArgs = {
  field: ContentfulAssetFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulAssetGroupConnection_maxArgs = {
  field: ContentfulAssetFieldSelector;
};


type ContentfulAssetGroupConnection_minArgs = {
  field: ContentfulAssetFieldSelector;
};


type ContentfulAssetGroupConnection_sumArgs = {
  field: ContentfulAssetFieldSelector;
};

type ContentfulAssetSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly file: InputMaybe<ContentfulAssetFileSortInput>;
  readonly filename: InputMaybe<SortOrderEnum>;
  readonly filesize: InputMaybe<SortOrderEnum>;
  readonly gatsbyImage: InputMaybe<SortOrderEnum>;
  readonly gatsbyImageData: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mimeType: InputMaybe<SortOrderEnum>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly placeholderUrl: InputMaybe<SortOrderEnum>;
  readonly publicUrl: InputMaybe<SortOrderEnum>;
  readonly resize: InputMaybe<RemoteFileResizeSortInput>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly spaceId: InputMaybe<SortOrderEnum>;
  readonly sys: InputMaybe<ContentfulAssetSysSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ContentfulAssetSys = {
  readonly revision: Maybe<Scalars['Int']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulAssetSysFieldSelector = {
  readonly revision: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulAssetSysFilterInput = {
  readonly revision: InputMaybe<IntQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulAssetSysSortInput = {
  readonly revision: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulBlockBanner = ContentfulEntry & ContentfulReference & Node & {
  readonly children: ReadonlyArray<Node>;
  readonly contentString: Maybe<Scalars['String']>;
  readonly contentful_id: Scalars['String'];
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly ctaButton: Maybe<ContentfulPage>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly node_locale: Scalars['String'];
  readonly page: Maybe<ReadonlyArray<Maybe<ContentfulPage>>>;
  readonly parent: Maybe<Node>;
  readonly settingVariant: Maybe<Scalars['String']>;
  readonly spaceId: Maybe<Scalars['String']>;
  readonly sys: Maybe<ContentfulBlockBannerSys>;
  readonly title: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type ContentfulBlockBanner_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type ContentfulBlockBanner_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type ContentfulBlockBannerConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulBlockBannerEdge>;
  readonly group: ReadonlyArray<ContentfulBlockBannerGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulBlockBanner>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulBlockBannerConnection_distinctArgs = {
  field: ContentfulBlockBannerFieldSelector;
};


type ContentfulBlockBannerConnection_groupArgs = {
  field: ContentfulBlockBannerFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulBlockBannerConnection_maxArgs = {
  field: ContentfulBlockBannerFieldSelector;
};


type ContentfulBlockBannerConnection_minArgs = {
  field: ContentfulBlockBannerFieldSelector;
};


type ContentfulBlockBannerConnection_sumArgs = {
  field: ContentfulBlockBannerFieldSelector;
};

type ContentfulBlockBannerContentfulBlockFaqContentfulBlockFeaturedBenefitsContentfulBlockFeaturedServicesContentfulBlockFeaturedServicesHomeContentfulBlockFeaturedTestimonialsContentfulBlockMediaTextContentfulBlockMissionStatementContentfulBlockNewHeroContentfulBlockPageHeaderContentfulBlockTextContentfulBlockVisualListContentfulPostUnion = ContentfulBlockBanner | ContentfulBlockFaq | ContentfulBlockFeaturedBenefits | ContentfulBlockFeaturedServices | ContentfulBlockFeaturedServicesHome | ContentfulBlockFeaturedTestimonials | ContentfulBlockMediaText | ContentfulBlockMissionStatement | ContentfulBlockNewHero | ContentfulBlockPageHeader | ContentfulBlockText | ContentfulBlockVisualList | ContentfulPost;

type ContentfulBlockBannerEdge = {
  readonly next: Maybe<ContentfulBlockBanner>;
  readonly node: ContentfulBlockBanner;
  readonly previous: Maybe<ContentfulBlockBanner>;
};

type ContentfulBlockBannerFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly contentString: InputMaybe<FieldSelectorEnum>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly ctaButton: InputMaybe<ContentfulPageFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly page: InputMaybe<ContentfulPageFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly settingVariant: InputMaybe<FieldSelectorEnum>;
  readonly spaceId: InputMaybe<FieldSelectorEnum>;
  readonly sys: InputMaybe<ContentfulBlockBannerSysFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type ContentfulBlockBannerFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentString: InputMaybe<StringQueryOperatorInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly ctaButton: InputMaybe<ContentfulPageFilterInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly page: InputMaybe<ContentfulPageFilterListInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly settingVariant: InputMaybe<StringQueryOperatorInput>;
  readonly spaceId: InputMaybe<StringQueryOperatorInput>;
  readonly sys: InputMaybe<ContentfulBlockBannerSysFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type ContentfulBlockBannerFilterListInput = {
  readonly elemMatch: InputMaybe<ContentfulBlockBannerFilterInput>;
};

type ContentfulBlockBannerGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulBlockBannerEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulBlockBannerGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulBlockBanner>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulBlockBannerGroupConnection_distinctArgs = {
  field: ContentfulBlockBannerFieldSelector;
};


type ContentfulBlockBannerGroupConnection_groupArgs = {
  field: ContentfulBlockBannerFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulBlockBannerGroupConnection_maxArgs = {
  field: ContentfulBlockBannerFieldSelector;
};


type ContentfulBlockBannerGroupConnection_minArgs = {
  field: ContentfulBlockBannerFieldSelector;
};


type ContentfulBlockBannerGroupConnection_sumArgs = {
  field: ContentfulBlockBannerFieldSelector;
};

type ContentfulBlockBannerSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly contentString: InputMaybe<SortOrderEnum>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly ctaButton: InputMaybe<ContentfulPageSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly page: InputMaybe<ContentfulPageSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly settingVariant: InputMaybe<SortOrderEnum>;
  readonly spaceId: InputMaybe<SortOrderEnum>;
  readonly sys: InputMaybe<ContentfulBlockBannerSysSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type ContentfulBlockBannerSys = {
  readonly contentType: Maybe<ContentfulBlockBannerSysContentType>;
  readonly revision: Maybe<Scalars['Int']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulBlockBannerSysContentType = {
  readonly sys: Maybe<ContentfulBlockBannerSysContentTypeSys>;
};

type ContentfulBlockBannerSysContentTypeFieldSelector = {
  readonly sys: InputMaybe<ContentfulBlockBannerSysContentTypeSysFieldSelector>;
};

type ContentfulBlockBannerSysContentTypeFilterInput = {
  readonly sys: InputMaybe<ContentfulBlockBannerSysContentTypeSysFilterInput>;
};

type ContentfulBlockBannerSysContentTypeSortInput = {
  readonly sys: InputMaybe<ContentfulBlockBannerSysContentTypeSysSortInput>;
};

type ContentfulBlockBannerSysContentTypeSys = {
  readonly id: Maybe<Scalars['String']>;
  readonly linkType: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulBlockBannerSysContentTypeSysFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly linkType: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulBlockBannerSysContentTypeSysFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly linkType: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulBlockBannerSysContentTypeSysSortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly linkType: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulBlockBannerSysFieldSelector = {
  readonly contentType: InputMaybe<ContentfulBlockBannerSysContentTypeFieldSelector>;
  readonly revision: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulBlockBannerSysFilterInput = {
  readonly contentType: InputMaybe<ContentfulBlockBannerSysContentTypeFilterInput>;
  readonly revision: InputMaybe<IntQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulBlockBannerSysSortInput = {
  readonly contentType: InputMaybe<ContentfulBlockBannerSysContentTypeSortInput>;
  readonly revision: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulBlockFaq = ContentfulEntry & ContentfulReference & Node & {
  readonly children: ReadonlyArray<Node>;
  readonly contentful_id: Scalars['String'];
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly node_locale: Scalars['String'];
  readonly page: Maybe<ReadonlyArray<Maybe<ContentfulPage>>>;
  readonly parent: Maybe<Node>;
  readonly photo: Maybe<ContentfulAsset>;
  readonly questions: Maybe<ReadonlyArray<Maybe<ContentfulBlockFaqQuestion>>>;
  readonly settingVariant: Maybe<Scalars['String']>;
  readonly spaceId: Maybe<Scalars['String']>;
  readonly sys: Maybe<ContentfulBlockFaqSys>;
  readonly title: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type ContentfulBlockFaq_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type ContentfulBlockFaq_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type ContentfulBlockFaqConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulBlockFaqEdge>;
  readonly group: ReadonlyArray<ContentfulBlockFaqGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulBlockFaq>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulBlockFaqConnection_distinctArgs = {
  field: ContentfulBlockFaqFieldSelector;
};


type ContentfulBlockFaqConnection_groupArgs = {
  field: ContentfulBlockFaqFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulBlockFaqConnection_maxArgs = {
  field: ContentfulBlockFaqFieldSelector;
};


type ContentfulBlockFaqConnection_minArgs = {
  field: ContentfulBlockFaqFieldSelector;
};


type ContentfulBlockFaqConnection_sumArgs = {
  field: ContentfulBlockFaqFieldSelector;
};

type ContentfulBlockFaqEdge = {
  readonly next: Maybe<ContentfulBlockFaq>;
  readonly node: ContentfulBlockFaq;
  readonly previous: Maybe<ContentfulBlockFaq>;
};

type ContentfulBlockFaqFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly page: InputMaybe<ContentfulPageFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly photo: InputMaybe<ContentfulAssetFieldSelector>;
  readonly questions: InputMaybe<ContentfulBlockFaqQuestionFieldSelector>;
  readonly settingVariant: InputMaybe<FieldSelectorEnum>;
  readonly spaceId: InputMaybe<FieldSelectorEnum>;
  readonly sys: InputMaybe<ContentfulBlockFaqSysFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type ContentfulBlockFaqFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly page: InputMaybe<ContentfulPageFilterListInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly photo: InputMaybe<ContentfulAssetFilterInput>;
  readonly questions: InputMaybe<ContentfulBlockFaqQuestionFilterListInput>;
  readonly settingVariant: InputMaybe<StringQueryOperatorInput>;
  readonly spaceId: InputMaybe<StringQueryOperatorInput>;
  readonly sys: InputMaybe<ContentfulBlockFaqSysFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type ContentfulBlockFaqFilterListInput = {
  readonly elemMatch: InputMaybe<ContentfulBlockFaqFilterInput>;
};

type ContentfulBlockFaqGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulBlockFaqEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulBlockFaqGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulBlockFaq>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulBlockFaqGroupConnection_distinctArgs = {
  field: ContentfulBlockFaqFieldSelector;
};


type ContentfulBlockFaqGroupConnection_groupArgs = {
  field: ContentfulBlockFaqFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulBlockFaqGroupConnection_maxArgs = {
  field: ContentfulBlockFaqFieldSelector;
};


type ContentfulBlockFaqGroupConnection_minArgs = {
  field: ContentfulBlockFaqFieldSelector;
};


type ContentfulBlockFaqGroupConnection_sumArgs = {
  field: ContentfulBlockFaqFieldSelector;
};

type ContentfulBlockFaqQuestion = ContentfulEntry & ContentfulReference & Node & {
  readonly answer: Maybe<ContentfulBlockFaqQuestionAnswer>;
  readonly block__faq: Maybe<ReadonlyArray<Maybe<ContentfulBlockFaq>>>;
  readonly children: ReadonlyArray<Node>;
  readonly contentful_id: Scalars['String'];
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly question: Maybe<Scalars['String']>;
  readonly spaceId: Maybe<Scalars['String']>;
  readonly sys: Maybe<ContentfulBlockFaqQuestionSys>;
  readonly type: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type ContentfulBlockFaqQuestion_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type ContentfulBlockFaqQuestion_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type ContentfulBlockFaqQuestionAnswer = {
  readonly raw: Maybe<Scalars['String']>;
};

type ContentfulBlockFaqQuestionAnswerFieldSelector = {
  readonly raw: InputMaybe<FieldSelectorEnum>;
};

type ContentfulBlockFaqQuestionAnswerFilterInput = {
  readonly raw: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulBlockFaqQuestionAnswerSortInput = {
  readonly raw: InputMaybe<SortOrderEnum>;
};

type ContentfulBlockFaqQuestionConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulBlockFaqQuestionEdge>;
  readonly group: ReadonlyArray<ContentfulBlockFaqQuestionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulBlockFaqQuestion>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulBlockFaqQuestionConnection_distinctArgs = {
  field: ContentfulBlockFaqQuestionFieldSelector;
};


type ContentfulBlockFaqQuestionConnection_groupArgs = {
  field: ContentfulBlockFaqQuestionFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulBlockFaqQuestionConnection_maxArgs = {
  field: ContentfulBlockFaqQuestionFieldSelector;
};


type ContentfulBlockFaqQuestionConnection_minArgs = {
  field: ContentfulBlockFaqQuestionFieldSelector;
};


type ContentfulBlockFaqQuestionConnection_sumArgs = {
  field: ContentfulBlockFaqQuestionFieldSelector;
};

type ContentfulBlockFaqQuestionEdge = {
  readonly next: Maybe<ContentfulBlockFaqQuestion>;
  readonly node: ContentfulBlockFaqQuestion;
  readonly previous: Maybe<ContentfulBlockFaqQuestion>;
};

type ContentfulBlockFaqQuestionFieldSelector = {
  readonly answer: InputMaybe<ContentfulBlockFaqQuestionAnswerFieldSelector>;
  readonly block__faq: InputMaybe<ContentfulBlockFaqFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly question: InputMaybe<FieldSelectorEnum>;
  readonly spaceId: InputMaybe<FieldSelectorEnum>;
  readonly sys: InputMaybe<ContentfulBlockFaqQuestionSysFieldSelector>;
  readonly type: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type ContentfulBlockFaqQuestionFilterInput = {
  readonly answer: InputMaybe<ContentfulBlockFaqQuestionAnswerFilterInput>;
  readonly block__faq: InputMaybe<ContentfulBlockFaqFilterListInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly question: InputMaybe<StringQueryOperatorInput>;
  readonly spaceId: InputMaybe<StringQueryOperatorInput>;
  readonly sys: InputMaybe<ContentfulBlockFaqQuestionSysFilterInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type ContentfulBlockFaqQuestionFilterListInput = {
  readonly elemMatch: InputMaybe<ContentfulBlockFaqQuestionFilterInput>;
};

type ContentfulBlockFaqQuestionGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulBlockFaqQuestionEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulBlockFaqQuestionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulBlockFaqQuestion>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulBlockFaqQuestionGroupConnection_distinctArgs = {
  field: ContentfulBlockFaqQuestionFieldSelector;
};


type ContentfulBlockFaqQuestionGroupConnection_groupArgs = {
  field: ContentfulBlockFaqQuestionFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulBlockFaqQuestionGroupConnection_maxArgs = {
  field: ContentfulBlockFaqQuestionFieldSelector;
};


type ContentfulBlockFaqQuestionGroupConnection_minArgs = {
  field: ContentfulBlockFaqQuestionFieldSelector;
};


type ContentfulBlockFaqQuestionGroupConnection_sumArgs = {
  field: ContentfulBlockFaqQuestionFieldSelector;
};

type ContentfulBlockFaqQuestionSortInput = {
  readonly answer: InputMaybe<ContentfulBlockFaqQuestionAnswerSortInput>;
  readonly block__faq: InputMaybe<ContentfulBlockFaqSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly question: InputMaybe<SortOrderEnum>;
  readonly spaceId: InputMaybe<SortOrderEnum>;
  readonly sys: InputMaybe<ContentfulBlockFaqQuestionSysSortInput>;
  readonly type: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type ContentfulBlockFaqQuestionSys = {
  readonly contentType: Maybe<ContentfulBlockFaqQuestionSysContentType>;
  readonly revision: Maybe<Scalars['Int']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulBlockFaqQuestionSysContentType = {
  readonly sys: Maybe<ContentfulBlockFaqQuestionSysContentTypeSys>;
};

type ContentfulBlockFaqQuestionSysContentTypeFieldSelector = {
  readonly sys: InputMaybe<ContentfulBlockFaqQuestionSysContentTypeSysFieldSelector>;
};

type ContentfulBlockFaqQuestionSysContentTypeFilterInput = {
  readonly sys: InputMaybe<ContentfulBlockFaqQuestionSysContentTypeSysFilterInput>;
};

type ContentfulBlockFaqQuestionSysContentTypeSortInput = {
  readonly sys: InputMaybe<ContentfulBlockFaqQuestionSysContentTypeSysSortInput>;
};

type ContentfulBlockFaqQuestionSysContentTypeSys = {
  readonly id: Maybe<Scalars['String']>;
  readonly linkType: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulBlockFaqQuestionSysContentTypeSysFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly linkType: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulBlockFaqQuestionSysContentTypeSysFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly linkType: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulBlockFaqQuestionSysContentTypeSysSortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly linkType: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulBlockFaqQuestionSysFieldSelector = {
  readonly contentType: InputMaybe<ContentfulBlockFaqQuestionSysContentTypeFieldSelector>;
  readonly revision: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulBlockFaqQuestionSysFilterInput = {
  readonly contentType: InputMaybe<ContentfulBlockFaqQuestionSysContentTypeFilterInput>;
  readonly revision: InputMaybe<IntQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulBlockFaqQuestionSysSortInput = {
  readonly contentType: InputMaybe<ContentfulBlockFaqQuestionSysContentTypeSortInput>;
  readonly revision: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulBlockFaqSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly page: InputMaybe<ContentfulPageSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly photo: InputMaybe<ContentfulAssetSortInput>;
  readonly questions: InputMaybe<ContentfulBlockFaqQuestionSortInput>;
  readonly settingVariant: InputMaybe<SortOrderEnum>;
  readonly spaceId: InputMaybe<SortOrderEnum>;
  readonly sys: InputMaybe<ContentfulBlockFaqSysSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type ContentfulBlockFaqSys = {
  readonly contentType: Maybe<ContentfulBlockFaqSysContentType>;
  readonly revision: Maybe<Scalars['Int']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulBlockFaqSysContentType = {
  readonly sys: Maybe<ContentfulBlockFaqSysContentTypeSys>;
};

type ContentfulBlockFaqSysContentTypeFieldSelector = {
  readonly sys: InputMaybe<ContentfulBlockFaqSysContentTypeSysFieldSelector>;
};

type ContentfulBlockFaqSysContentTypeFilterInput = {
  readonly sys: InputMaybe<ContentfulBlockFaqSysContentTypeSysFilterInput>;
};

type ContentfulBlockFaqSysContentTypeSortInput = {
  readonly sys: InputMaybe<ContentfulBlockFaqSysContentTypeSysSortInput>;
};

type ContentfulBlockFaqSysContentTypeSys = {
  readonly id: Maybe<Scalars['String']>;
  readonly linkType: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulBlockFaqSysContentTypeSysFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly linkType: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulBlockFaqSysContentTypeSysFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly linkType: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulBlockFaqSysContentTypeSysSortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly linkType: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulBlockFaqSysFieldSelector = {
  readonly contentType: InputMaybe<ContentfulBlockFaqSysContentTypeFieldSelector>;
  readonly revision: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulBlockFaqSysFilterInput = {
  readonly contentType: InputMaybe<ContentfulBlockFaqSysContentTypeFilterInput>;
  readonly revision: InputMaybe<IntQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulBlockFaqSysSortInput = {
  readonly contentType: InputMaybe<ContentfulBlockFaqSysContentTypeSortInput>;
  readonly revision: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulBlockFeaturedBenefits = ContentfulEntry & ContentfulReference & Node & {
  readonly benefits: Maybe<ReadonlyArray<Maybe<ContentfulCard>>>;
  readonly children: ReadonlyArray<Node>;
  readonly contentful_id: Scalars['String'];
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly node_locale: Scalars['String'];
  readonly page: Maybe<ReadonlyArray<Maybe<ContentfulPage>>>;
  readonly parent: Maybe<Node>;
  readonly spaceId: Maybe<Scalars['String']>;
  readonly sys: Maybe<ContentfulBlockFeaturedBenefitsSys>;
  readonly title: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type ContentfulBlockFeaturedBenefits_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type ContentfulBlockFeaturedBenefits_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type ContentfulBlockFeaturedBenefitsConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulBlockFeaturedBenefitsEdge>;
  readonly group: ReadonlyArray<ContentfulBlockFeaturedBenefitsGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulBlockFeaturedBenefits>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulBlockFeaturedBenefitsConnection_distinctArgs = {
  field: ContentfulBlockFeaturedBenefitsFieldSelector;
};


type ContentfulBlockFeaturedBenefitsConnection_groupArgs = {
  field: ContentfulBlockFeaturedBenefitsFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulBlockFeaturedBenefitsConnection_maxArgs = {
  field: ContentfulBlockFeaturedBenefitsFieldSelector;
};


type ContentfulBlockFeaturedBenefitsConnection_minArgs = {
  field: ContentfulBlockFeaturedBenefitsFieldSelector;
};


type ContentfulBlockFeaturedBenefitsConnection_sumArgs = {
  field: ContentfulBlockFeaturedBenefitsFieldSelector;
};

type ContentfulBlockFeaturedBenefitsEdge = {
  readonly next: Maybe<ContentfulBlockFeaturedBenefits>;
  readonly node: ContentfulBlockFeaturedBenefits;
  readonly previous: Maybe<ContentfulBlockFeaturedBenefits>;
};

type ContentfulBlockFeaturedBenefitsFieldSelector = {
  readonly benefits: InputMaybe<ContentfulCardFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly page: InputMaybe<ContentfulPageFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly spaceId: InputMaybe<FieldSelectorEnum>;
  readonly sys: InputMaybe<ContentfulBlockFeaturedBenefitsSysFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type ContentfulBlockFeaturedBenefitsFilterInput = {
  readonly benefits: InputMaybe<ContentfulCardFilterListInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly page: InputMaybe<ContentfulPageFilterListInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly spaceId: InputMaybe<StringQueryOperatorInput>;
  readonly sys: InputMaybe<ContentfulBlockFeaturedBenefitsSysFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type ContentfulBlockFeaturedBenefitsFilterListInput = {
  readonly elemMatch: InputMaybe<ContentfulBlockFeaturedBenefitsFilterInput>;
};

type ContentfulBlockFeaturedBenefitsGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulBlockFeaturedBenefitsEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulBlockFeaturedBenefitsGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulBlockFeaturedBenefits>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulBlockFeaturedBenefitsGroupConnection_distinctArgs = {
  field: ContentfulBlockFeaturedBenefitsFieldSelector;
};


type ContentfulBlockFeaturedBenefitsGroupConnection_groupArgs = {
  field: ContentfulBlockFeaturedBenefitsFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulBlockFeaturedBenefitsGroupConnection_maxArgs = {
  field: ContentfulBlockFeaturedBenefitsFieldSelector;
};


type ContentfulBlockFeaturedBenefitsGroupConnection_minArgs = {
  field: ContentfulBlockFeaturedBenefitsFieldSelector;
};


type ContentfulBlockFeaturedBenefitsGroupConnection_sumArgs = {
  field: ContentfulBlockFeaturedBenefitsFieldSelector;
};

type ContentfulBlockFeaturedBenefitsSortInput = {
  readonly benefits: InputMaybe<ContentfulCardSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly page: InputMaybe<ContentfulPageSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly spaceId: InputMaybe<SortOrderEnum>;
  readonly sys: InputMaybe<ContentfulBlockFeaturedBenefitsSysSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type ContentfulBlockFeaturedBenefitsSys = {
  readonly contentType: Maybe<ContentfulBlockFeaturedBenefitsSysContentType>;
  readonly revision: Maybe<Scalars['Int']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulBlockFeaturedBenefitsSysContentType = {
  readonly sys: Maybe<ContentfulBlockFeaturedBenefitsSysContentTypeSys>;
};

type ContentfulBlockFeaturedBenefitsSysContentTypeFieldSelector = {
  readonly sys: InputMaybe<ContentfulBlockFeaturedBenefitsSysContentTypeSysFieldSelector>;
};

type ContentfulBlockFeaturedBenefitsSysContentTypeFilterInput = {
  readonly sys: InputMaybe<ContentfulBlockFeaturedBenefitsSysContentTypeSysFilterInput>;
};

type ContentfulBlockFeaturedBenefitsSysContentTypeSortInput = {
  readonly sys: InputMaybe<ContentfulBlockFeaturedBenefitsSysContentTypeSysSortInput>;
};

type ContentfulBlockFeaturedBenefitsSysContentTypeSys = {
  readonly id: Maybe<Scalars['String']>;
  readonly linkType: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulBlockFeaturedBenefitsSysContentTypeSysFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly linkType: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulBlockFeaturedBenefitsSysContentTypeSysFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly linkType: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulBlockFeaturedBenefitsSysContentTypeSysSortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly linkType: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulBlockFeaturedBenefitsSysFieldSelector = {
  readonly contentType: InputMaybe<ContentfulBlockFeaturedBenefitsSysContentTypeFieldSelector>;
  readonly revision: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulBlockFeaturedBenefitsSysFilterInput = {
  readonly contentType: InputMaybe<ContentfulBlockFeaturedBenefitsSysContentTypeFilterInput>;
  readonly revision: InputMaybe<IntQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulBlockFeaturedBenefitsSysSortInput = {
  readonly contentType: InputMaybe<ContentfulBlockFeaturedBenefitsSysContentTypeSortInput>;
  readonly revision: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulBlockFeaturedServices = ContentfulEntry & ContentfulReference & Node & {
  readonly children: ReadonlyArray<Node>;
  readonly contentful_id: Scalars['String'];
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly node_locale: Scalars['String'];
  readonly page: Maybe<ReadonlyArray<Maybe<ContentfulPage>>>;
  readonly parent: Maybe<Node>;
  readonly services: Maybe<ReadonlyArray<Maybe<ContentfulCard>>>;
  readonly spaceId: Maybe<Scalars['String']>;
  readonly sys: Maybe<ContentfulBlockFeaturedServicesSys>;
  readonly title: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type ContentfulBlockFeaturedServices_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type ContentfulBlockFeaturedServices_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type ContentfulBlockFeaturedServicesConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulBlockFeaturedServicesEdge>;
  readonly group: ReadonlyArray<ContentfulBlockFeaturedServicesGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulBlockFeaturedServices>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulBlockFeaturedServicesConnection_distinctArgs = {
  field: ContentfulBlockFeaturedServicesFieldSelector;
};


type ContentfulBlockFeaturedServicesConnection_groupArgs = {
  field: ContentfulBlockFeaturedServicesFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulBlockFeaturedServicesConnection_maxArgs = {
  field: ContentfulBlockFeaturedServicesFieldSelector;
};


type ContentfulBlockFeaturedServicesConnection_minArgs = {
  field: ContentfulBlockFeaturedServicesFieldSelector;
};


type ContentfulBlockFeaturedServicesConnection_sumArgs = {
  field: ContentfulBlockFeaturedServicesFieldSelector;
};

type ContentfulBlockFeaturedServicesEdge = {
  readonly next: Maybe<ContentfulBlockFeaturedServices>;
  readonly node: ContentfulBlockFeaturedServices;
  readonly previous: Maybe<ContentfulBlockFeaturedServices>;
};

type ContentfulBlockFeaturedServicesFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly page: InputMaybe<ContentfulPageFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly services: InputMaybe<ContentfulCardFieldSelector>;
  readonly spaceId: InputMaybe<FieldSelectorEnum>;
  readonly sys: InputMaybe<ContentfulBlockFeaturedServicesSysFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type ContentfulBlockFeaturedServicesFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly page: InputMaybe<ContentfulPageFilterListInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly services: InputMaybe<ContentfulCardFilterListInput>;
  readonly spaceId: InputMaybe<StringQueryOperatorInput>;
  readonly sys: InputMaybe<ContentfulBlockFeaturedServicesSysFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type ContentfulBlockFeaturedServicesFilterListInput = {
  readonly elemMatch: InputMaybe<ContentfulBlockFeaturedServicesFilterInput>;
};

type ContentfulBlockFeaturedServicesGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulBlockFeaturedServicesEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulBlockFeaturedServicesGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulBlockFeaturedServices>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulBlockFeaturedServicesGroupConnection_distinctArgs = {
  field: ContentfulBlockFeaturedServicesFieldSelector;
};


type ContentfulBlockFeaturedServicesGroupConnection_groupArgs = {
  field: ContentfulBlockFeaturedServicesFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulBlockFeaturedServicesGroupConnection_maxArgs = {
  field: ContentfulBlockFeaturedServicesFieldSelector;
};


type ContentfulBlockFeaturedServicesGroupConnection_minArgs = {
  field: ContentfulBlockFeaturedServicesFieldSelector;
};


type ContentfulBlockFeaturedServicesGroupConnection_sumArgs = {
  field: ContentfulBlockFeaturedServicesFieldSelector;
};

type ContentfulBlockFeaturedServicesHome = ContentfulEntry & ContentfulReference & Node & {
  readonly children: ReadonlyArray<Node>;
  readonly contentful_id: Scalars['String'];
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly node_locale: Scalars['String'];
  readonly page: Maybe<ReadonlyArray<Maybe<ContentfulPage>>>;
  readonly parent: Maybe<Node>;
  readonly services: Maybe<ReadonlyArray<Maybe<ContentfulCard>>>;
  readonly spaceId: Maybe<Scalars['String']>;
  readonly subtitle: Maybe<Scalars['String']>;
  readonly sys: Maybe<ContentfulBlockFeaturedServicesHomeSys>;
  readonly title: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type ContentfulBlockFeaturedServicesHome_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type ContentfulBlockFeaturedServicesHome_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type ContentfulBlockFeaturedServicesHomeConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulBlockFeaturedServicesHomeEdge>;
  readonly group: ReadonlyArray<ContentfulBlockFeaturedServicesHomeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulBlockFeaturedServicesHome>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulBlockFeaturedServicesHomeConnection_distinctArgs = {
  field: ContentfulBlockFeaturedServicesHomeFieldSelector;
};


type ContentfulBlockFeaturedServicesHomeConnection_groupArgs = {
  field: ContentfulBlockFeaturedServicesHomeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulBlockFeaturedServicesHomeConnection_maxArgs = {
  field: ContentfulBlockFeaturedServicesHomeFieldSelector;
};


type ContentfulBlockFeaturedServicesHomeConnection_minArgs = {
  field: ContentfulBlockFeaturedServicesHomeFieldSelector;
};


type ContentfulBlockFeaturedServicesHomeConnection_sumArgs = {
  field: ContentfulBlockFeaturedServicesHomeFieldSelector;
};

type ContentfulBlockFeaturedServicesHomeEdge = {
  readonly next: Maybe<ContentfulBlockFeaturedServicesHome>;
  readonly node: ContentfulBlockFeaturedServicesHome;
  readonly previous: Maybe<ContentfulBlockFeaturedServicesHome>;
};

type ContentfulBlockFeaturedServicesHomeFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly page: InputMaybe<ContentfulPageFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly services: InputMaybe<ContentfulCardFieldSelector>;
  readonly spaceId: InputMaybe<FieldSelectorEnum>;
  readonly subtitle: InputMaybe<FieldSelectorEnum>;
  readonly sys: InputMaybe<ContentfulBlockFeaturedServicesHomeSysFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type ContentfulBlockFeaturedServicesHomeFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly page: InputMaybe<ContentfulPageFilterListInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly services: InputMaybe<ContentfulCardFilterListInput>;
  readonly spaceId: InputMaybe<StringQueryOperatorInput>;
  readonly subtitle: InputMaybe<StringQueryOperatorInput>;
  readonly sys: InputMaybe<ContentfulBlockFeaturedServicesHomeSysFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type ContentfulBlockFeaturedServicesHomeFilterListInput = {
  readonly elemMatch: InputMaybe<ContentfulBlockFeaturedServicesHomeFilterInput>;
};

type ContentfulBlockFeaturedServicesHomeGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulBlockFeaturedServicesHomeEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulBlockFeaturedServicesHomeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulBlockFeaturedServicesHome>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulBlockFeaturedServicesHomeGroupConnection_distinctArgs = {
  field: ContentfulBlockFeaturedServicesHomeFieldSelector;
};


type ContentfulBlockFeaturedServicesHomeGroupConnection_groupArgs = {
  field: ContentfulBlockFeaturedServicesHomeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulBlockFeaturedServicesHomeGroupConnection_maxArgs = {
  field: ContentfulBlockFeaturedServicesHomeFieldSelector;
};


type ContentfulBlockFeaturedServicesHomeGroupConnection_minArgs = {
  field: ContentfulBlockFeaturedServicesHomeFieldSelector;
};


type ContentfulBlockFeaturedServicesHomeGroupConnection_sumArgs = {
  field: ContentfulBlockFeaturedServicesHomeFieldSelector;
};

type ContentfulBlockFeaturedServicesHomeSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly page: InputMaybe<ContentfulPageSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly services: InputMaybe<ContentfulCardSortInput>;
  readonly spaceId: InputMaybe<SortOrderEnum>;
  readonly subtitle: InputMaybe<SortOrderEnum>;
  readonly sys: InputMaybe<ContentfulBlockFeaturedServicesHomeSysSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type ContentfulBlockFeaturedServicesHomeSys = {
  readonly contentType: Maybe<ContentfulBlockFeaturedServicesHomeSysContentType>;
  readonly revision: Maybe<Scalars['Int']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulBlockFeaturedServicesHomeSysContentType = {
  readonly sys: Maybe<ContentfulBlockFeaturedServicesHomeSysContentTypeSys>;
};

type ContentfulBlockFeaturedServicesHomeSysContentTypeFieldSelector = {
  readonly sys: InputMaybe<ContentfulBlockFeaturedServicesHomeSysContentTypeSysFieldSelector>;
};

type ContentfulBlockFeaturedServicesHomeSysContentTypeFilterInput = {
  readonly sys: InputMaybe<ContentfulBlockFeaturedServicesHomeSysContentTypeSysFilterInput>;
};

type ContentfulBlockFeaturedServicesHomeSysContentTypeSortInput = {
  readonly sys: InputMaybe<ContentfulBlockFeaturedServicesHomeSysContentTypeSysSortInput>;
};

type ContentfulBlockFeaturedServicesHomeSysContentTypeSys = {
  readonly id: Maybe<Scalars['String']>;
  readonly linkType: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulBlockFeaturedServicesHomeSysContentTypeSysFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly linkType: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulBlockFeaturedServicesHomeSysContentTypeSysFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly linkType: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulBlockFeaturedServicesHomeSysContentTypeSysSortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly linkType: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulBlockFeaturedServicesHomeSysFieldSelector = {
  readonly contentType: InputMaybe<ContentfulBlockFeaturedServicesHomeSysContentTypeFieldSelector>;
  readonly revision: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulBlockFeaturedServicesHomeSysFilterInput = {
  readonly contentType: InputMaybe<ContentfulBlockFeaturedServicesHomeSysContentTypeFilterInput>;
  readonly revision: InputMaybe<IntQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulBlockFeaturedServicesHomeSysSortInput = {
  readonly contentType: InputMaybe<ContentfulBlockFeaturedServicesHomeSysContentTypeSortInput>;
  readonly revision: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulBlockFeaturedServicesSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly page: InputMaybe<ContentfulPageSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly services: InputMaybe<ContentfulCardSortInput>;
  readonly spaceId: InputMaybe<SortOrderEnum>;
  readonly sys: InputMaybe<ContentfulBlockFeaturedServicesSysSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type ContentfulBlockFeaturedServicesSys = {
  readonly contentType: Maybe<ContentfulBlockFeaturedServicesSysContentType>;
  readonly revision: Maybe<Scalars['Int']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulBlockFeaturedServicesSysContentType = {
  readonly sys: Maybe<ContentfulBlockFeaturedServicesSysContentTypeSys>;
};

type ContentfulBlockFeaturedServicesSysContentTypeFieldSelector = {
  readonly sys: InputMaybe<ContentfulBlockFeaturedServicesSysContentTypeSysFieldSelector>;
};

type ContentfulBlockFeaturedServicesSysContentTypeFilterInput = {
  readonly sys: InputMaybe<ContentfulBlockFeaturedServicesSysContentTypeSysFilterInput>;
};

type ContentfulBlockFeaturedServicesSysContentTypeSortInput = {
  readonly sys: InputMaybe<ContentfulBlockFeaturedServicesSysContentTypeSysSortInput>;
};

type ContentfulBlockFeaturedServicesSysContentTypeSys = {
  readonly id: Maybe<Scalars['String']>;
  readonly linkType: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulBlockFeaturedServicesSysContentTypeSysFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly linkType: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulBlockFeaturedServicesSysContentTypeSysFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly linkType: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulBlockFeaturedServicesSysContentTypeSysSortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly linkType: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulBlockFeaturedServicesSysFieldSelector = {
  readonly contentType: InputMaybe<ContentfulBlockFeaturedServicesSysContentTypeFieldSelector>;
  readonly revision: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulBlockFeaturedServicesSysFilterInput = {
  readonly contentType: InputMaybe<ContentfulBlockFeaturedServicesSysContentTypeFilterInput>;
  readonly revision: InputMaybe<IntQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulBlockFeaturedServicesSysSortInput = {
  readonly contentType: InputMaybe<ContentfulBlockFeaturedServicesSysContentTypeSortInput>;
  readonly revision: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulBlockFeaturedTestimonials = ContentfulEntry & ContentfulReference & Node & {
  readonly children: ReadonlyArray<Node>;
  readonly contentful_id: Scalars['String'];
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly node_locale: Scalars['String'];
  readonly page: Maybe<ReadonlyArray<Maybe<ContentfulPage>>>;
  readonly parent: Maybe<Node>;
  readonly spaceId: Maybe<Scalars['String']>;
  readonly sys: Maybe<ContentfulBlockFeaturedTestimonialsSys>;
  readonly testimonials: Maybe<ReadonlyArray<Maybe<ContentfulTestimonial>>>;
  readonly title: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type ContentfulBlockFeaturedTestimonials_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type ContentfulBlockFeaturedTestimonials_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type ContentfulBlockFeaturedTestimonialsConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulBlockFeaturedTestimonialsEdge>;
  readonly group: ReadonlyArray<ContentfulBlockFeaturedTestimonialsGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulBlockFeaturedTestimonials>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulBlockFeaturedTestimonialsConnection_distinctArgs = {
  field: ContentfulBlockFeaturedTestimonialsFieldSelector;
};


type ContentfulBlockFeaturedTestimonialsConnection_groupArgs = {
  field: ContentfulBlockFeaturedTestimonialsFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulBlockFeaturedTestimonialsConnection_maxArgs = {
  field: ContentfulBlockFeaturedTestimonialsFieldSelector;
};


type ContentfulBlockFeaturedTestimonialsConnection_minArgs = {
  field: ContentfulBlockFeaturedTestimonialsFieldSelector;
};


type ContentfulBlockFeaturedTestimonialsConnection_sumArgs = {
  field: ContentfulBlockFeaturedTestimonialsFieldSelector;
};

type ContentfulBlockFeaturedTestimonialsEdge = {
  readonly next: Maybe<ContentfulBlockFeaturedTestimonials>;
  readonly node: ContentfulBlockFeaturedTestimonials;
  readonly previous: Maybe<ContentfulBlockFeaturedTestimonials>;
};

type ContentfulBlockFeaturedTestimonialsFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly page: InputMaybe<ContentfulPageFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly spaceId: InputMaybe<FieldSelectorEnum>;
  readonly sys: InputMaybe<ContentfulBlockFeaturedTestimonialsSysFieldSelector>;
  readonly testimonials: InputMaybe<ContentfulTestimonialFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type ContentfulBlockFeaturedTestimonialsFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly page: InputMaybe<ContentfulPageFilterListInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly spaceId: InputMaybe<StringQueryOperatorInput>;
  readonly sys: InputMaybe<ContentfulBlockFeaturedTestimonialsSysFilterInput>;
  readonly testimonials: InputMaybe<ContentfulTestimonialFilterListInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type ContentfulBlockFeaturedTestimonialsFilterListInput = {
  readonly elemMatch: InputMaybe<ContentfulBlockFeaturedTestimonialsFilterInput>;
};

type ContentfulBlockFeaturedTestimonialsGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulBlockFeaturedTestimonialsEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulBlockFeaturedTestimonialsGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulBlockFeaturedTestimonials>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulBlockFeaturedTestimonialsGroupConnection_distinctArgs = {
  field: ContentfulBlockFeaturedTestimonialsFieldSelector;
};


type ContentfulBlockFeaturedTestimonialsGroupConnection_groupArgs = {
  field: ContentfulBlockFeaturedTestimonialsFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulBlockFeaturedTestimonialsGroupConnection_maxArgs = {
  field: ContentfulBlockFeaturedTestimonialsFieldSelector;
};


type ContentfulBlockFeaturedTestimonialsGroupConnection_minArgs = {
  field: ContentfulBlockFeaturedTestimonialsFieldSelector;
};


type ContentfulBlockFeaturedTestimonialsGroupConnection_sumArgs = {
  field: ContentfulBlockFeaturedTestimonialsFieldSelector;
};

type ContentfulBlockFeaturedTestimonialsSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly page: InputMaybe<ContentfulPageSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly spaceId: InputMaybe<SortOrderEnum>;
  readonly sys: InputMaybe<ContentfulBlockFeaturedTestimonialsSysSortInput>;
  readonly testimonials: InputMaybe<ContentfulTestimonialSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type ContentfulBlockFeaturedTestimonialsSys = {
  readonly contentType: Maybe<ContentfulBlockFeaturedTestimonialsSysContentType>;
  readonly revision: Maybe<Scalars['Int']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulBlockFeaturedTestimonialsSysContentType = {
  readonly sys: Maybe<ContentfulBlockFeaturedTestimonialsSysContentTypeSys>;
};

type ContentfulBlockFeaturedTestimonialsSysContentTypeFieldSelector = {
  readonly sys: InputMaybe<ContentfulBlockFeaturedTestimonialsSysContentTypeSysFieldSelector>;
};

type ContentfulBlockFeaturedTestimonialsSysContentTypeFilterInput = {
  readonly sys: InputMaybe<ContentfulBlockFeaturedTestimonialsSysContentTypeSysFilterInput>;
};

type ContentfulBlockFeaturedTestimonialsSysContentTypeSortInput = {
  readonly sys: InputMaybe<ContentfulBlockFeaturedTestimonialsSysContentTypeSysSortInput>;
};

type ContentfulBlockFeaturedTestimonialsSysContentTypeSys = {
  readonly id: Maybe<Scalars['String']>;
  readonly linkType: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulBlockFeaturedTestimonialsSysContentTypeSysFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly linkType: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulBlockFeaturedTestimonialsSysContentTypeSysFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly linkType: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulBlockFeaturedTestimonialsSysContentTypeSysSortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly linkType: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulBlockFeaturedTestimonialsSysFieldSelector = {
  readonly contentType: InputMaybe<ContentfulBlockFeaturedTestimonialsSysContentTypeFieldSelector>;
  readonly revision: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulBlockFeaturedTestimonialsSysFilterInput = {
  readonly contentType: InputMaybe<ContentfulBlockFeaturedTestimonialsSysContentTypeFilterInput>;
  readonly revision: InputMaybe<IntQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulBlockFeaturedTestimonialsSysSortInput = {
  readonly contentType: InputMaybe<ContentfulBlockFeaturedTestimonialsSysContentTypeSortInput>;
  readonly revision: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulBlockForm = ContentfulEntry & ContentfulReference & Node & {
  /** Returns the first child node of type contentfulBlockFormDescriptionTextNode or null if there are no children of given type on this node */
  readonly childContentfulBlockFormDescriptionTextNode: Maybe<contentfulBlockFormDescriptionTextNode>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type contentfulBlockFormDescriptionTextNode */
  readonly childrenContentfulBlockFormDescriptionTextNode: Maybe<ReadonlyArray<Maybe<contentfulBlockFormDescriptionTextNode>>>;
  readonly contentful_id: Scalars['String'];
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly description: Maybe<contentfulBlockFormDescriptionTextNode>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly spaceId: Maybe<Scalars['String']>;
  readonly sys: Maybe<ContentfulBlockFormSys>;
  readonly title: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type ContentfulBlockForm_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type ContentfulBlockForm_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type ContentfulBlockFormConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulBlockFormEdge>;
  readonly group: ReadonlyArray<ContentfulBlockFormGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulBlockForm>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulBlockFormConnection_distinctArgs = {
  field: ContentfulBlockFormFieldSelector;
};


type ContentfulBlockFormConnection_groupArgs = {
  field: ContentfulBlockFormFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulBlockFormConnection_maxArgs = {
  field: ContentfulBlockFormFieldSelector;
};


type ContentfulBlockFormConnection_minArgs = {
  field: ContentfulBlockFormFieldSelector;
};


type ContentfulBlockFormConnection_sumArgs = {
  field: ContentfulBlockFormFieldSelector;
};

type ContentfulBlockFormEdge = {
  readonly next: Maybe<ContentfulBlockForm>;
  readonly node: ContentfulBlockForm;
  readonly previous: Maybe<ContentfulBlockForm>;
};

type ContentfulBlockFormFieldSelector = {
  readonly childContentfulBlockFormDescriptionTextNode: InputMaybe<contentfulBlockFormDescriptionTextNodeFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenContentfulBlockFormDescriptionTextNode: InputMaybe<contentfulBlockFormDescriptionTextNodeFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<contentfulBlockFormDescriptionTextNodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly spaceId: InputMaybe<FieldSelectorEnum>;
  readonly sys: InputMaybe<ContentfulBlockFormSysFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type ContentfulBlockFormFilterInput = {
  readonly childContentfulBlockFormDescriptionTextNode: InputMaybe<contentfulBlockFormDescriptionTextNodeFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenContentfulBlockFormDescriptionTextNode: InputMaybe<contentfulBlockFormDescriptionTextNodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly description: InputMaybe<contentfulBlockFormDescriptionTextNodeFilterInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly spaceId: InputMaybe<StringQueryOperatorInput>;
  readonly sys: InputMaybe<ContentfulBlockFormSysFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type ContentfulBlockFormGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulBlockFormEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulBlockFormGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulBlockForm>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulBlockFormGroupConnection_distinctArgs = {
  field: ContentfulBlockFormFieldSelector;
};


type ContentfulBlockFormGroupConnection_groupArgs = {
  field: ContentfulBlockFormFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulBlockFormGroupConnection_maxArgs = {
  field: ContentfulBlockFormFieldSelector;
};


type ContentfulBlockFormGroupConnection_minArgs = {
  field: ContentfulBlockFormFieldSelector;
};


type ContentfulBlockFormGroupConnection_sumArgs = {
  field: ContentfulBlockFormFieldSelector;
};

type ContentfulBlockFormSortInput = {
  readonly childContentfulBlockFormDescriptionTextNode: InputMaybe<contentfulBlockFormDescriptionTextNodeSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenContentfulBlockFormDescriptionTextNode: InputMaybe<contentfulBlockFormDescriptionTextNodeSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<contentfulBlockFormDescriptionTextNodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly spaceId: InputMaybe<SortOrderEnum>;
  readonly sys: InputMaybe<ContentfulBlockFormSysSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type ContentfulBlockFormSys = {
  readonly contentType: Maybe<ContentfulBlockFormSysContentType>;
  readonly revision: Maybe<Scalars['Int']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulBlockFormSysContentType = {
  readonly sys: Maybe<ContentfulBlockFormSysContentTypeSys>;
};

type ContentfulBlockFormSysContentTypeFieldSelector = {
  readonly sys: InputMaybe<ContentfulBlockFormSysContentTypeSysFieldSelector>;
};

type ContentfulBlockFormSysContentTypeFilterInput = {
  readonly sys: InputMaybe<ContentfulBlockFormSysContentTypeSysFilterInput>;
};

type ContentfulBlockFormSysContentTypeSortInput = {
  readonly sys: InputMaybe<ContentfulBlockFormSysContentTypeSysSortInput>;
};

type ContentfulBlockFormSysContentTypeSys = {
  readonly id: Maybe<Scalars['String']>;
  readonly linkType: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulBlockFormSysContentTypeSysFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly linkType: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulBlockFormSysContentTypeSysFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly linkType: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulBlockFormSysContentTypeSysSortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly linkType: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulBlockFormSysFieldSelector = {
  readonly contentType: InputMaybe<ContentfulBlockFormSysContentTypeFieldSelector>;
  readonly revision: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulBlockFormSysFilterInput = {
  readonly contentType: InputMaybe<ContentfulBlockFormSysContentTypeFilterInput>;
  readonly revision: InputMaybe<IntQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulBlockFormSysSortInput = {
  readonly contentType: InputMaybe<ContentfulBlockFormSysContentTypeSortInput>;
  readonly revision: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulBlockMediaText = ContentfulEntry & ContentfulReference & Node & {
  readonly children: ReadonlyArray<Node>;
  readonly content: Maybe<ContentfulBlockMediaTextContent>;
  readonly contentful_id: Scalars['String'];
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly imageSubCaption: Maybe<Scalars['String']>;
  readonly internal: Internal;
  readonly node_locale: Scalars['String'];
  readonly page: Maybe<ReadonlyArray<Maybe<ContentfulPage>>>;
  readonly parent: Maybe<Node>;
  readonly photo: Maybe<ContentfulAsset>;
  readonly settingVariant: Maybe<Scalars['String']>;
  readonly spaceId: Maybe<Scalars['String']>;
  readonly sys: Maybe<ContentfulBlockMediaTextSys>;
  readonly title: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type ContentfulBlockMediaText_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type ContentfulBlockMediaText_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type ContentfulBlockMediaTextConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulBlockMediaTextEdge>;
  readonly group: ReadonlyArray<ContentfulBlockMediaTextGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulBlockMediaText>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulBlockMediaTextConnection_distinctArgs = {
  field: ContentfulBlockMediaTextFieldSelector;
};


type ContentfulBlockMediaTextConnection_groupArgs = {
  field: ContentfulBlockMediaTextFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulBlockMediaTextConnection_maxArgs = {
  field: ContentfulBlockMediaTextFieldSelector;
};


type ContentfulBlockMediaTextConnection_minArgs = {
  field: ContentfulBlockMediaTextFieldSelector;
};


type ContentfulBlockMediaTextConnection_sumArgs = {
  field: ContentfulBlockMediaTextFieldSelector;
};

type ContentfulBlockMediaTextContent = {
  readonly raw: Maybe<Scalars['String']>;
};

type ContentfulBlockMediaTextContentFieldSelector = {
  readonly raw: InputMaybe<FieldSelectorEnum>;
};

type ContentfulBlockMediaTextContentFilterInput = {
  readonly raw: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulBlockMediaTextContentSortInput = {
  readonly raw: InputMaybe<SortOrderEnum>;
};

type ContentfulBlockMediaTextEdge = {
  readonly next: Maybe<ContentfulBlockMediaText>;
  readonly node: ContentfulBlockMediaText;
  readonly previous: Maybe<ContentfulBlockMediaText>;
};

type ContentfulBlockMediaTextFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly content: InputMaybe<ContentfulBlockMediaTextContentFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly imageSubCaption: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly page: InputMaybe<ContentfulPageFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly photo: InputMaybe<ContentfulAssetFieldSelector>;
  readonly settingVariant: InputMaybe<FieldSelectorEnum>;
  readonly spaceId: InputMaybe<FieldSelectorEnum>;
  readonly sys: InputMaybe<ContentfulBlockMediaTextSysFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type ContentfulBlockMediaTextFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly content: InputMaybe<ContentfulBlockMediaTextContentFilterInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly imageSubCaption: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly page: InputMaybe<ContentfulPageFilterListInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly photo: InputMaybe<ContentfulAssetFilterInput>;
  readonly settingVariant: InputMaybe<StringQueryOperatorInput>;
  readonly spaceId: InputMaybe<StringQueryOperatorInput>;
  readonly sys: InputMaybe<ContentfulBlockMediaTextSysFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type ContentfulBlockMediaTextGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulBlockMediaTextEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulBlockMediaTextGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulBlockMediaText>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulBlockMediaTextGroupConnection_distinctArgs = {
  field: ContentfulBlockMediaTextFieldSelector;
};


type ContentfulBlockMediaTextGroupConnection_groupArgs = {
  field: ContentfulBlockMediaTextFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulBlockMediaTextGroupConnection_maxArgs = {
  field: ContentfulBlockMediaTextFieldSelector;
};


type ContentfulBlockMediaTextGroupConnection_minArgs = {
  field: ContentfulBlockMediaTextFieldSelector;
};


type ContentfulBlockMediaTextGroupConnection_sumArgs = {
  field: ContentfulBlockMediaTextFieldSelector;
};

type ContentfulBlockMediaTextSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly content: InputMaybe<ContentfulBlockMediaTextContentSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly imageSubCaption: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly page: InputMaybe<ContentfulPageSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly photo: InputMaybe<ContentfulAssetSortInput>;
  readonly settingVariant: InputMaybe<SortOrderEnum>;
  readonly spaceId: InputMaybe<SortOrderEnum>;
  readonly sys: InputMaybe<ContentfulBlockMediaTextSysSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type ContentfulBlockMediaTextSys = {
  readonly contentType: Maybe<ContentfulBlockMediaTextSysContentType>;
  readonly revision: Maybe<Scalars['Int']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulBlockMediaTextSysContentType = {
  readonly sys: Maybe<ContentfulBlockMediaTextSysContentTypeSys>;
};

type ContentfulBlockMediaTextSysContentTypeFieldSelector = {
  readonly sys: InputMaybe<ContentfulBlockMediaTextSysContentTypeSysFieldSelector>;
};

type ContentfulBlockMediaTextSysContentTypeFilterInput = {
  readonly sys: InputMaybe<ContentfulBlockMediaTextSysContentTypeSysFilterInput>;
};

type ContentfulBlockMediaTextSysContentTypeSortInput = {
  readonly sys: InputMaybe<ContentfulBlockMediaTextSysContentTypeSysSortInput>;
};

type ContentfulBlockMediaTextSysContentTypeSys = {
  readonly id: Maybe<Scalars['String']>;
  readonly linkType: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulBlockMediaTextSysContentTypeSysFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly linkType: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulBlockMediaTextSysContentTypeSysFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly linkType: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulBlockMediaTextSysContentTypeSysSortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly linkType: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulBlockMediaTextSysFieldSelector = {
  readonly contentType: InputMaybe<ContentfulBlockMediaTextSysContentTypeFieldSelector>;
  readonly revision: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulBlockMediaTextSysFilterInput = {
  readonly contentType: InputMaybe<ContentfulBlockMediaTextSysContentTypeFilterInput>;
  readonly revision: InputMaybe<IntQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulBlockMediaTextSysSortInput = {
  readonly contentType: InputMaybe<ContentfulBlockMediaTextSysContentTypeSortInput>;
  readonly revision: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulBlockMissionStatement = ContentfulEntry & ContentfulReference & Node & {
  /** Returns the first child node of type contentfulBlockMissionStatementMissionDescriptionTextNode or null if there are no children of given type on this node */
  readonly childContentfulBlockMissionStatementMissionDescriptionTextNode: Maybe<contentfulBlockMissionStatementMissionDescriptionTextNode>;
  /** Returns the first child node of type contentfulBlockMissionStatementVisionDescriptionTextNode or null if there are no children of given type on this node */
  readonly childContentfulBlockMissionStatementVisionDescriptionTextNode: Maybe<contentfulBlockMissionStatementVisionDescriptionTextNode>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type contentfulBlockMissionStatementMissionDescriptionTextNode */
  readonly childrenContentfulBlockMissionStatementMissionDescriptionTextNode: Maybe<ReadonlyArray<Maybe<contentfulBlockMissionStatementMissionDescriptionTextNode>>>;
  /** Returns all children nodes filtered by type contentfulBlockMissionStatementVisionDescriptionTextNode */
  readonly childrenContentfulBlockMissionStatementVisionDescriptionTextNode: Maybe<ReadonlyArray<Maybe<contentfulBlockMissionStatementVisionDescriptionTextNode>>>;
  readonly contentful_id: Scalars['String'];
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly missionDescription: Maybe<contentfulBlockMissionStatementMissionDescriptionTextNode>;
  readonly missionTitle: Maybe<Scalars['String']>;
  readonly node_locale: Scalars['String'];
  readonly page: Maybe<ReadonlyArray<Maybe<ContentfulPage>>>;
  readonly parent: Maybe<Node>;
  readonly spaceId: Maybe<Scalars['String']>;
  readonly sys: Maybe<ContentfulBlockMissionStatementSys>;
  readonly title: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
  readonly visionDescription: Maybe<contentfulBlockMissionStatementVisionDescriptionTextNode>;
  readonly visionTitle: Maybe<Scalars['String']>;
};


type ContentfulBlockMissionStatement_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type ContentfulBlockMissionStatement_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type ContentfulBlockMissionStatementConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulBlockMissionStatementEdge>;
  readonly group: ReadonlyArray<ContentfulBlockMissionStatementGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulBlockMissionStatement>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulBlockMissionStatementConnection_distinctArgs = {
  field: ContentfulBlockMissionStatementFieldSelector;
};


type ContentfulBlockMissionStatementConnection_groupArgs = {
  field: ContentfulBlockMissionStatementFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulBlockMissionStatementConnection_maxArgs = {
  field: ContentfulBlockMissionStatementFieldSelector;
};


type ContentfulBlockMissionStatementConnection_minArgs = {
  field: ContentfulBlockMissionStatementFieldSelector;
};


type ContentfulBlockMissionStatementConnection_sumArgs = {
  field: ContentfulBlockMissionStatementFieldSelector;
};

type ContentfulBlockMissionStatementEdge = {
  readonly next: Maybe<ContentfulBlockMissionStatement>;
  readonly node: ContentfulBlockMissionStatement;
  readonly previous: Maybe<ContentfulBlockMissionStatement>;
};

type ContentfulBlockMissionStatementFieldSelector = {
  readonly childContentfulBlockMissionStatementMissionDescriptionTextNode: InputMaybe<contentfulBlockMissionStatementMissionDescriptionTextNodeFieldSelector>;
  readonly childContentfulBlockMissionStatementVisionDescriptionTextNode: InputMaybe<contentfulBlockMissionStatementVisionDescriptionTextNodeFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenContentfulBlockMissionStatementMissionDescriptionTextNode: InputMaybe<contentfulBlockMissionStatementMissionDescriptionTextNodeFieldSelector>;
  readonly childrenContentfulBlockMissionStatementVisionDescriptionTextNode: InputMaybe<contentfulBlockMissionStatementVisionDescriptionTextNodeFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly missionDescription: InputMaybe<contentfulBlockMissionStatementMissionDescriptionTextNodeFieldSelector>;
  readonly missionTitle: InputMaybe<FieldSelectorEnum>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly page: InputMaybe<ContentfulPageFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly spaceId: InputMaybe<FieldSelectorEnum>;
  readonly sys: InputMaybe<ContentfulBlockMissionStatementSysFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly visionDescription: InputMaybe<contentfulBlockMissionStatementVisionDescriptionTextNodeFieldSelector>;
  readonly visionTitle: InputMaybe<FieldSelectorEnum>;
};

type ContentfulBlockMissionStatementFilterInput = {
  readonly childContentfulBlockMissionStatementMissionDescriptionTextNode: InputMaybe<contentfulBlockMissionStatementMissionDescriptionTextNodeFilterInput>;
  readonly childContentfulBlockMissionStatementVisionDescriptionTextNode: InputMaybe<contentfulBlockMissionStatementVisionDescriptionTextNodeFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenContentfulBlockMissionStatementMissionDescriptionTextNode: InputMaybe<contentfulBlockMissionStatementMissionDescriptionTextNodeFilterListInput>;
  readonly childrenContentfulBlockMissionStatementVisionDescriptionTextNode: InputMaybe<contentfulBlockMissionStatementVisionDescriptionTextNodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly missionDescription: InputMaybe<contentfulBlockMissionStatementMissionDescriptionTextNodeFilterInput>;
  readonly missionTitle: InputMaybe<StringQueryOperatorInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly page: InputMaybe<ContentfulPageFilterListInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly spaceId: InputMaybe<StringQueryOperatorInput>;
  readonly sys: InputMaybe<ContentfulBlockMissionStatementSysFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly visionDescription: InputMaybe<contentfulBlockMissionStatementVisionDescriptionTextNodeFilterInput>;
  readonly visionTitle: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulBlockMissionStatementGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulBlockMissionStatementEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulBlockMissionStatementGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulBlockMissionStatement>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulBlockMissionStatementGroupConnection_distinctArgs = {
  field: ContentfulBlockMissionStatementFieldSelector;
};


type ContentfulBlockMissionStatementGroupConnection_groupArgs = {
  field: ContentfulBlockMissionStatementFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulBlockMissionStatementGroupConnection_maxArgs = {
  field: ContentfulBlockMissionStatementFieldSelector;
};


type ContentfulBlockMissionStatementGroupConnection_minArgs = {
  field: ContentfulBlockMissionStatementFieldSelector;
};


type ContentfulBlockMissionStatementGroupConnection_sumArgs = {
  field: ContentfulBlockMissionStatementFieldSelector;
};

type ContentfulBlockMissionStatementSortInput = {
  readonly childContentfulBlockMissionStatementMissionDescriptionTextNode: InputMaybe<contentfulBlockMissionStatementMissionDescriptionTextNodeSortInput>;
  readonly childContentfulBlockMissionStatementVisionDescriptionTextNode: InputMaybe<contentfulBlockMissionStatementVisionDescriptionTextNodeSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenContentfulBlockMissionStatementMissionDescriptionTextNode: InputMaybe<contentfulBlockMissionStatementMissionDescriptionTextNodeSortInput>;
  readonly childrenContentfulBlockMissionStatementVisionDescriptionTextNode: InputMaybe<contentfulBlockMissionStatementVisionDescriptionTextNodeSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly missionDescription: InputMaybe<contentfulBlockMissionStatementMissionDescriptionTextNodeSortInput>;
  readonly missionTitle: InputMaybe<SortOrderEnum>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly page: InputMaybe<ContentfulPageSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly spaceId: InputMaybe<SortOrderEnum>;
  readonly sys: InputMaybe<ContentfulBlockMissionStatementSysSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
  readonly visionDescription: InputMaybe<contentfulBlockMissionStatementVisionDescriptionTextNodeSortInput>;
  readonly visionTitle: InputMaybe<SortOrderEnum>;
};

type ContentfulBlockMissionStatementSys = {
  readonly contentType: Maybe<ContentfulBlockMissionStatementSysContentType>;
  readonly revision: Maybe<Scalars['Int']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulBlockMissionStatementSysContentType = {
  readonly sys: Maybe<ContentfulBlockMissionStatementSysContentTypeSys>;
};

type ContentfulBlockMissionStatementSysContentTypeFieldSelector = {
  readonly sys: InputMaybe<ContentfulBlockMissionStatementSysContentTypeSysFieldSelector>;
};

type ContentfulBlockMissionStatementSysContentTypeFilterInput = {
  readonly sys: InputMaybe<ContentfulBlockMissionStatementSysContentTypeSysFilterInput>;
};

type ContentfulBlockMissionStatementSysContentTypeSortInput = {
  readonly sys: InputMaybe<ContentfulBlockMissionStatementSysContentTypeSysSortInput>;
};

type ContentfulBlockMissionStatementSysContentTypeSys = {
  readonly id: Maybe<Scalars['String']>;
  readonly linkType: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulBlockMissionStatementSysContentTypeSysFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly linkType: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulBlockMissionStatementSysContentTypeSysFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly linkType: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulBlockMissionStatementSysContentTypeSysSortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly linkType: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulBlockMissionStatementSysFieldSelector = {
  readonly contentType: InputMaybe<ContentfulBlockMissionStatementSysContentTypeFieldSelector>;
  readonly revision: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulBlockMissionStatementSysFilterInput = {
  readonly contentType: InputMaybe<ContentfulBlockMissionStatementSysContentTypeFilterInput>;
  readonly revision: InputMaybe<IntQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulBlockMissionStatementSysSortInput = {
  readonly contentType: InputMaybe<ContentfulBlockMissionStatementSysContentTypeSortInput>;
  readonly revision: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulBlockNewHero = ContentfulEntry & ContentfulReference & Node & {
  readonly bodyText: Maybe<ContentfulBlockNewHeroBodyText>;
  readonly bottomTitle: Maybe<Scalars['String']>;
  readonly button: Maybe<contentfulBlockNewHeroButtonJsonNode>;
  /** Returns the first child node of type contentfulBlockNewHeroButtonJsonNode or null if there are no children of given type on this node */
  readonly childContentfulBlockNewHeroButtonJsonNode: Maybe<contentfulBlockNewHeroButtonJsonNode>;
  /** Returns the first child node of type contentfulBlockNewHeroWinsJsonNode or null if there are no children of given type on this node */
  readonly childContentfulBlockNewHeroWinsJsonNode: Maybe<contentfulBlockNewHeroWinsJsonNode>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type contentfulBlockNewHeroButtonJsonNode */
  readonly childrenContentfulBlockNewHeroButtonJsonNode: Maybe<ReadonlyArray<Maybe<contentfulBlockNewHeroButtonJsonNode>>>;
  /** Returns all children nodes filtered by type contentfulBlockNewHeroWinsJsonNode */
  readonly childrenContentfulBlockNewHeroWinsJsonNode: Maybe<ReadonlyArray<Maybe<contentfulBlockNewHeroWinsJsonNode>>>;
  readonly contentful_id: Scalars['String'];
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly mediaItems: Maybe<ReadonlyArray<Maybe<ContentfulAsset>>>;
  readonly node_locale: Scalars['String'];
  readonly page: Maybe<ReadonlyArray<Maybe<ContentfulPage>>>;
  readonly parent: Maybe<Node>;
  readonly spaceId: Maybe<Scalars['String']>;
  readonly sys: Maybe<ContentfulBlockNewHeroSys>;
  readonly updatedAt: Maybe<Scalars['Date']>;
  readonly wins: Maybe<contentfulBlockNewHeroWinsJsonNode>;
};


type ContentfulBlockNewHero_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type ContentfulBlockNewHero_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type ContentfulBlockNewHeroBodyText = {
  readonly raw: Maybe<Scalars['String']>;
};

type ContentfulBlockNewHeroBodyTextFieldSelector = {
  readonly raw: InputMaybe<FieldSelectorEnum>;
};

type ContentfulBlockNewHeroBodyTextFilterInput = {
  readonly raw: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulBlockNewHeroBodyTextSortInput = {
  readonly raw: InputMaybe<SortOrderEnum>;
};

type ContentfulBlockNewHeroConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulBlockNewHeroEdge>;
  readonly group: ReadonlyArray<ContentfulBlockNewHeroGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulBlockNewHero>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulBlockNewHeroConnection_distinctArgs = {
  field: ContentfulBlockNewHeroFieldSelector;
};


type ContentfulBlockNewHeroConnection_groupArgs = {
  field: ContentfulBlockNewHeroFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulBlockNewHeroConnection_maxArgs = {
  field: ContentfulBlockNewHeroFieldSelector;
};


type ContentfulBlockNewHeroConnection_minArgs = {
  field: ContentfulBlockNewHeroFieldSelector;
};


type ContentfulBlockNewHeroConnection_sumArgs = {
  field: ContentfulBlockNewHeroFieldSelector;
};

type ContentfulBlockNewHeroEdge = {
  readonly next: Maybe<ContentfulBlockNewHero>;
  readonly node: ContentfulBlockNewHero;
  readonly previous: Maybe<ContentfulBlockNewHero>;
};

type ContentfulBlockNewHeroFieldSelector = {
  readonly bodyText: InputMaybe<ContentfulBlockNewHeroBodyTextFieldSelector>;
  readonly bottomTitle: InputMaybe<FieldSelectorEnum>;
  readonly button: InputMaybe<contentfulBlockNewHeroButtonJsonNodeFieldSelector>;
  readonly childContentfulBlockNewHeroButtonJsonNode: InputMaybe<contentfulBlockNewHeroButtonJsonNodeFieldSelector>;
  readonly childContentfulBlockNewHeroWinsJsonNode: InputMaybe<contentfulBlockNewHeroWinsJsonNodeFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenContentfulBlockNewHeroButtonJsonNode: InputMaybe<contentfulBlockNewHeroButtonJsonNodeFieldSelector>;
  readonly childrenContentfulBlockNewHeroWinsJsonNode: InputMaybe<contentfulBlockNewHeroWinsJsonNodeFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mediaItems: InputMaybe<ContentfulAssetFieldSelector>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly page: InputMaybe<ContentfulPageFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly spaceId: InputMaybe<FieldSelectorEnum>;
  readonly sys: InputMaybe<ContentfulBlockNewHeroSysFieldSelector>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly wins: InputMaybe<contentfulBlockNewHeroWinsJsonNodeFieldSelector>;
};

type ContentfulBlockNewHeroFilterInput = {
  readonly bodyText: InputMaybe<ContentfulBlockNewHeroBodyTextFilterInput>;
  readonly bottomTitle: InputMaybe<StringQueryOperatorInput>;
  readonly button: InputMaybe<contentfulBlockNewHeroButtonJsonNodeFilterInput>;
  readonly childContentfulBlockNewHeroButtonJsonNode: InputMaybe<contentfulBlockNewHeroButtonJsonNodeFilterInput>;
  readonly childContentfulBlockNewHeroWinsJsonNode: InputMaybe<contentfulBlockNewHeroWinsJsonNodeFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenContentfulBlockNewHeroButtonJsonNode: InputMaybe<contentfulBlockNewHeroButtonJsonNodeFilterListInput>;
  readonly childrenContentfulBlockNewHeroWinsJsonNode: InputMaybe<contentfulBlockNewHeroWinsJsonNodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mediaItems: InputMaybe<ContentfulAssetFilterListInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly page: InputMaybe<ContentfulPageFilterListInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly spaceId: InputMaybe<StringQueryOperatorInput>;
  readonly sys: InputMaybe<ContentfulBlockNewHeroSysFilterInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly wins: InputMaybe<contentfulBlockNewHeroWinsJsonNodeFilterInput>;
};

type ContentfulBlockNewHeroGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulBlockNewHeroEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulBlockNewHeroGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulBlockNewHero>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulBlockNewHeroGroupConnection_distinctArgs = {
  field: ContentfulBlockNewHeroFieldSelector;
};


type ContentfulBlockNewHeroGroupConnection_groupArgs = {
  field: ContentfulBlockNewHeroFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulBlockNewHeroGroupConnection_maxArgs = {
  field: ContentfulBlockNewHeroFieldSelector;
};


type ContentfulBlockNewHeroGroupConnection_minArgs = {
  field: ContentfulBlockNewHeroFieldSelector;
};


type ContentfulBlockNewHeroGroupConnection_sumArgs = {
  field: ContentfulBlockNewHeroFieldSelector;
};

type ContentfulBlockNewHeroSortInput = {
  readonly bodyText: InputMaybe<ContentfulBlockNewHeroBodyTextSortInput>;
  readonly bottomTitle: InputMaybe<SortOrderEnum>;
  readonly button: InputMaybe<contentfulBlockNewHeroButtonJsonNodeSortInput>;
  readonly childContentfulBlockNewHeroButtonJsonNode: InputMaybe<contentfulBlockNewHeroButtonJsonNodeSortInput>;
  readonly childContentfulBlockNewHeroWinsJsonNode: InputMaybe<contentfulBlockNewHeroWinsJsonNodeSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenContentfulBlockNewHeroButtonJsonNode: InputMaybe<contentfulBlockNewHeroButtonJsonNodeSortInput>;
  readonly childrenContentfulBlockNewHeroWinsJsonNode: InputMaybe<contentfulBlockNewHeroWinsJsonNodeSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mediaItems: InputMaybe<ContentfulAssetSortInput>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly page: InputMaybe<ContentfulPageSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly spaceId: InputMaybe<SortOrderEnum>;
  readonly sys: InputMaybe<ContentfulBlockNewHeroSysSortInput>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
  readonly wins: InputMaybe<contentfulBlockNewHeroWinsJsonNodeSortInput>;
};

type ContentfulBlockNewHeroSys = {
  readonly contentType: Maybe<ContentfulBlockNewHeroSysContentType>;
  readonly revision: Maybe<Scalars['Int']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulBlockNewHeroSysContentType = {
  readonly sys: Maybe<ContentfulBlockNewHeroSysContentTypeSys>;
};

type ContentfulBlockNewHeroSysContentTypeFieldSelector = {
  readonly sys: InputMaybe<ContentfulBlockNewHeroSysContentTypeSysFieldSelector>;
};

type ContentfulBlockNewHeroSysContentTypeFilterInput = {
  readonly sys: InputMaybe<ContentfulBlockNewHeroSysContentTypeSysFilterInput>;
};

type ContentfulBlockNewHeroSysContentTypeSortInput = {
  readonly sys: InputMaybe<ContentfulBlockNewHeroSysContentTypeSysSortInput>;
};

type ContentfulBlockNewHeroSysContentTypeSys = {
  readonly id: Maybe<Scalars['String']>;
  readonly linkType: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulBlockNewHeroSysContentTypeSysFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly linkType: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulBlockNewHeroSysContentTypeSysFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly linkType: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulBlockNewHeroSysContentTypeSysSortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly linkType: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulBlockNewHeroSysFieldSelector = {
  readonly contentType: InputMaybe<ContentfulBlockNewHeroSysContentTypeFieldSelector>;
  readonly revision: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulBlockNewHeroSysFilterInput = {
  readonly contentType: InputMaybe<ContentfulBlockNewHeroSysContentTypeFilterInput>;
  readonly revision: InputMaybe<IntQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulBlockNewHeroSysSortInput = {
  readonly contentType: InputMaybe<ContentfulBlockNewHeroSysContentTypeSortInput>;
  readonly revision: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulBlockPageHeader = ContentfulEntry & ContentfulReference & Node & {
  readonly children: ReadonlyArray<Node>;
  readonly contentful_id: Scalars['String'];
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly image: Maybe<ContentfulAsset>;
  readonly internal: Internal;
  readonly node_locale: Scalars['String'];
  readonly page: Maybe<ReadonlyArray<Maybe<ContentfulPage>>>;
  readonly parent: Maybe<Node>;
  readonly settingVariant: Maybe<Scalars['String']>;
  readonly spaceId: Maybe<Scalars['String']>;
  readonly sys: Maybe<ContentfulBlockPageHeaderSys>;
  readonly title: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type ContentfulBlockPageHeader_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type ContentfulBlockPageHeader_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type ContentfulBlockPageHeaderConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulBlockPageHeaderEdge>;
  readonly group: ReadonlyArray<ContentfulBlockPageHeaderGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulBlockPageHeader>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulBlockPageHeaderConnection_distinctArgs = {
  field: ContentfulBlockPageHeaderFieldSelector;
};


type ContentfulBlockPageHeaderConnection_groupArgs = {
  field: ContentfulBlockPageHeaderFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulBlockPageHeaderConnection_maxArgs = {
  field: ContentfulBlockPageHeaderFieldSelector;
};


type ContentfulBlockPageHeaderConnection_minArgs = {
  field: ContentfulBlockPageHeaderFieldSelector;
};


type ContentfulBlockPageHeaderConnection_sumArgs = {
  field: ContentfulBlockPageHeaderFieldSelector;
};

type ContentfulBlockPageHeaderEdge = {
  readonly next: Maybe<ContentfulBlockPageHeader>;
  readonly node: ContentfulBlockPageHeader;
  readonly previous: Maybe<ContentfulBlockPageHeader>;
};

type ContentfulBlockPageHeaderFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<ContentfulAssetFieldSelector>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly page: InputMaybe<ContentfulPageFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly settingVariant: InputMaybe<FieldSelectorEnum>;
  readonly spaceId: InputMaybe<FieldSelectorEnum>;
  readonly sys: InputMaybe<ContentfulBlockPageHeaderSysFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type ContentfulBlockPageHeaderFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<ContentfulAssetFilterInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly page: InputMaybe<ContentfulPageFilterListInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly settingVariant: InputMaybe<StringQueryOperatorInput>;
  readonly spaceId: InputMaybe<StringQueryOperatorInput>;
  readonly sys: InputMaybe<ContentfulBlockPageHeaderSysFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type ContentfulBlockPageHeaderGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulBlockPageHeaderEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulBlockPageHeaderGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulBlockPageHeader>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulBlockPageHeaderGroupConnection_distinctArgs = {
  field: ContentfulBlockPageHeaderFieldSelector;
};


type ContentfulBlockPageHeaderGroupConnection_groupArgs = {
  field: ContentfulBlockPageHeaderFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulBlockPageHeaderGroupConnection_maxArgs = {
  field: ContentfulBlockPageHeaderFieldSelector;
};


type ContentfulBlockPageHeaderGroupConnection_minArgs = {
  field: ContentfulBlockPageHeaderFieldSelector;
};


type ContentfulBlockPageHeaderGroupConnection_sumArgs = {
  field: ContentfulBlockPageHeaderFieldSelector;
};

type ContentfulBlockPageHeaderSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<ContentfulAssetSortInput>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly page: InputMaybe<ContentfulPageSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly settingVariant: InputMaybe<SortOrderEnum>;
  readonly spaceId: InputMaybe<SortOrderEnum>;
  readonly sys: InputMaybe<ContentfulBlockPageHeaderSysSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type ContentfulBlockPageHeaderSys = {
  readonly contentType: Maybe<ContentfulBlockPageHeaderSysContentType>;
  readonly revision: Maybe<Scalars['Int']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulBlockPageHeaderSysContentType = {
  readonly sys: Maybe<ContentfulBlockPageHeaderSysContentTypeSys>;
};

type ContentfulBlockPageHeaderSysContentTypeFieldSelector = {
  readonly sys: InputMaybe<ContentfulBlockPageHeaderSysContentTypeSysFieldSelector>;
};

type ContentfulBlockPageHeaderSysContentTypeFilterInput = {
  readonly sys: InputMaybe<ContentfulBlockPageHeaderSysContentTypeSysFilterInput>;
};

type ContentfulBlockPageHeaderSysContentTypeSortInput = {
  readonly sys: InputMaybe<ContentfulBlockPageHeaderSysContentTypeSysSortInput>;
};

type ContentfulBlockPageHeaderSysContentTypeSys = {
  readonly id: Maybe<Scalars['String']>;
  readonly linkType: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulBlockPageHeaderSysContentTypeSysFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly linkType: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulBlockPageHeaderSysContentTypeSysFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly linkType: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulBlockPageHeaderSysContentTypeSysSortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly linkType: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulBlockPageHeaderSysFieldSelector = {
  readonly contentType: InputMaybe<ContentfulBlockPageHeaderSysContentTypeFieldSelector>;
  readonly revision: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulBlockPageHeaderSysFilterInput = {
  readonly contentType: InputMaybe<ContentfulBlockPageHeaderSysContentTypeFilterInput>;
  readonly revision: InputMaybe<IntQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulBlockPageHeaderSysSortInput = {
  readonly contentType: InputMaybe<ContentfulBlockPageHeaderSysContentTypeSortInput>;
  readonly revision: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulBlockText = ContentfulEntry & ContentfulReference & Node & {
  readonly children: ReadonlyArray<Node>;
  readonly content: Maybe<ContentfulBlockTextContent>;
  readonly contentful_id: Scalars['String'];
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly node_locale: Scalars['String'];
  readonly page: Maybe<ReadonlyArray<Maybe<ContentfulPage>>>;
  readonly parent: Maybe<Node>;
  readonly settingVariant: Maybe<Scalars['String']>;
  readonly spaceId: Maybe<Scalars['String']>;
  readonly sys: Maybe<ContentfulBlockTextSys>;
  readonly title: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type ContentfulBlockText_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type ContentfulBlockText_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type ContentfulBlockTextConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulBlockTextEdge>;
  readonly group: ReadonlyArray<ContentfulBlockTextGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulBlockText>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulBlockTextConnection_distinctArgs = {
  field: ContentfulBlockTextFieldSelector;
};


type ContentfulBlockTextConnection_groupArgs = {
  field: ContentfulBlockTextFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulBlockTextConnection_maxArgs = {
  field: ContentfulBlockTextFieldSelector;
};


type ContentfulBlockTextConnection_minArgs = {
  field: ContentfulBlockTextFieldSelector;
};


type ContentfulBlockTextConnection_sumArgs = {
  field: ContentfulBlockTextFieldSelector;
};

type ContentfulBlockTextContent = {
  readonly raw: Maybe<Scalars['String']>;
};

type ContentfulBlockTextContentFieldSelector = {
  readonly raw: InputMaybe<FieldSelectorEnum>;
};

type ContentfulBlockTextContentFilterInput = {
  readonly raw: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulBlockTextContentSortInput = {
  readonly raw: InputMaybe<SortOrderEnum>;
};

type ContentfulBlockTextEdge = {
  readonly next: Maybe<ContentfulBlockText>;
  readonly node: ContentfulBlockText;
  readonly previous: Maybe<ContentfulBlockText>;
};

type ContentfulBlockTextFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly content: InputMaybe<ContentfulBlockTextContentFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly page: InputMaybe<ContentfulPageFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly settingVariant: InputMaybe<FieldSelectorEnum>;
  readonly spaceId: InputMaybe<FieldSelectorEnum>;
  readonly sys: InputMaybe<ContentfulBlockTextSysFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type ContentfulBlockTextFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly content: InputMaybe<ContentfulBlockTextContentFilterInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly page: InputMaybe<ContentfulPageFilterListInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly settingVariant: InputMaybe<StringQueryOperatorInput>;
  readonly spaceId: InputMaybe<StringQueryOperatorInput>;
  readonly sys: InputMaybe<ContentfulBlockTextSysFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type ContentfulBlockTextGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulBlockTextEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulBlockTextGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulBlockText>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulBlockTextGroupConnection_distinctArgs = {
  field: ContentfulBlockTextFieldSelector;
};


type ContentfulBlockTextGroupConnection_groupArgs = {
  field: ContentfulBlockTextFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulBlockTextGroupConnection_maxArgs = {
  field: ContentfulBlockTextFieldSelector;
};


type ContentfulBlockTextGroupConnection_minArgs = {
  field: ContentfulBlockTextFieldSelector;
};


type ContentfulBlockTextGroupConnection_sumArgs = {
  field: ContentfulBlockTextFieldSelector;
};

type ContentfulBlockTextSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly content: InputMaybe<ContentfulBlockTextContentSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly page: InputMaybe<ContentfulPageSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly settingVariant: InputMaybe<SortOrderEnum>;
  readonly spaceId: InputMaybe<SortOrderEnum>;
  readonly sys: InputMaybe<ContentfulBlockTextSysSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type ContentfulBlockTextSys = {
  readonly contentType: Maybe<ContentfulBlockTextSysContentType>;
  readonly revision: Maybe<Scalars['Int']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulBlockTextSysContentType = {
  readonly sys: Maybe<ContentfulBlockTextSysContentTypeSys>;
};

type ContentfulBlockTextSysContentTypeFieldSelector = {
  readonly sys: InputMaybe<ContentfulBlockTextSysContentTypeSysFieldSelector>;
};

type ContentfulBlockTextSysContentTypeFilterInput = {
  readonly sys: InputMaybe<ContentfulBlockTextSysContentTypeSysFilterInput>;
};

type ContentfulBlockTextSysContentTypeSortInput = {
  readonly sys: InputMaybe<ContentfulBlockTextSysContentTypeSysSortInput>;
};

type ContentfulBlockTextSysContentTypeSys = {
  readonly id: Maybe<Scalars['String']>;
  readonly linkType: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulBlockTextSysContentTypeSysFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly linkType: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulBlockTextSysContentTypeSysFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly linkType: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulBlockTextSysContentTypeSysSortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly linkType: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulBlockTextSysFieldSelector = {
  readonly contentType: InputMaybe<ContentfulBlockTextSysContentTypeFieldSelector>;
  readonly revision: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulBlockTextSysFilterInput = {
  readonly contentType: InputMaybe<ContentfulBlockTextSysContentTypeFilterInput>;
  readonly revision: InputMaybe<IntQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulBlockTextSysSortInput = {
  readonly contentType: InputMaybe<ContentfulBlockTextSysContentTypeSortInput>;
  readonly revision: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulBlockVisualList = ContentfulEntry & ContentfulReference & Node & {
  readonly children: ReadonlyArray<Node>;
  readonly contentful_id: Scalars['String'];
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly items: Maybe<ReadonlyArray<Maybe<ContentfulCard>>>;
  readonly node_locale: Scalars['String'];
  readonly page: Maybe<ReadonlyArray<Maybe<ContentfulPage>>>;
  readonly parent: Maybe<Node>;
  readonly settingVariant: Maybe<Scalars['String']>;
  readonly spaceId: Maybe<Scalars['String']>;
  readonly sys: Maybe<ContentfulBlockVisualListSys>;
  readonly title: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type ContentfulBlockVisualList_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type ContentfulBlockVisualList_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type ContentfulBlockVisualListConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulBlockVisualListEdge>;
  readonly group: ReadonlyArray<ContentfulBlockVisualListGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulBlockVisualList>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulBlockVisualListConnection_distinctArgs = {
  field: ContentfulBlockVisualListFieldSelector;
};


type ContentfulBlockVisualListConnection_groupArgs = {
  field: ContentfulBlockVisualListFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulBlockVisualListConnection_maxArgs = {
  field: ContentfulBlockVisualListFieldSelector;
};


type ContentfulBlockVisualListConnection_minArgs = {
  field: ContentfulBlockVisualListFieldSelector;
};


type ContentfulBlockVisualListConnection_sumArgs = {
  field: ContentfulBlockVisualListFieldSelector;
};

type ContentfulBlockVisualListEdge = {
  readonly next: Maybe<ContentfulBlockVisualList>;
  readonly node: ContentfulBlockVisualList;
  readonly previous: Maybe<ContentfulBlockVisualList>;
};

type ContentfulBlockVisualListFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly items: InputMaybe<ContentfulCardFieldSelector>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly page: InputMaybe<ContentfulPageFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly settingVariant: InputMaybe<FieldSelectorEnum>;
  readonly spaceId: InputMaybe<FieldSelectorEnum>;
  readonly sys: InputMaybe<ContentfulBlockVisualListSysFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type ContentfulBlockVisualListFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly items: InputMaybe<ContentfulCardFilterListInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly page: InputMaybe<ContentfulPageFilterListInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly settingVariant: InputMaybe<StringQueryOperatorInput>;
  readonly spaceId: InputMaybe<StringQueryOperatorInput>;
  readonly sys: InputMaybe<ContentfulBlockVisualListSysFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type ContentfulBlockVisualListFilterListInput = {
  readonly elemMatch: InputMaybe<ContentfulBlockVisualListFilterInput>;
};

type ContentfulBlockVisualListGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulBlockVisualListEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulBlockVisualListGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulBlockVisualList>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulBlockVisualListGroupConnection_distinctArgs = {
  field: ContentfulBlockVisualListFieldSelector;
};


type ContentfulBlockVisualListGroupConnection_groupArgs = {
  field: ContentfulBlockVisualListFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulBlockVisualListGroupConnection_maxArgs = {
  field: ContentfulBlockVisualListFieldSelector;
};


type ContentfulBlockVisualListGroupConnection_minArgs = {
  field: ContentfulBlockVisualListFieldSelector;
};


type ContentfulBlockVisualListGroupConnection_sumArgs = {
  field: ContentfulBlockVisualListFieldSelector;
};

type ContentfulBlockVisualListSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly items: InputMaybe<ContentfulCardSortInput>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly page: InputMaybe<ContentfulPageSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly settingVariant: InputMaybe<SortOrderEnum>;
  readonly spaceId: InputMaybe<SortOrderEnum>;
  readonly sys: InputMaybe<ContentfulBlockVisualListSysSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type ContentfulBlockVisualListSys = {
  readonly contentType: Maybe<ContentfulBlockVisualListSysContentType>;
  readonly revision: Maybe<Scalars['Int']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulBlockVisualListSysContentType = {
  readonly sys: Maybe<ContentfulBlockVisualListSysContentTypeSys>;
};

type ContentfulBlockVisualListSysContentTypeFieldSelector = {
  readonly sys: InputMaybe<ContentfulBlockVisualListSysContentTypeSysFieldSelector>;
};

type ContentfulBlockVisualListSysContentTypeFilterInput = {
  readonly sys: InputMaybe<ContentfulBlockVisualListSysContentTypeSysFilterInput>;
};

type ContentfulBlockVisualListSysContentTypeSortInput = {
  readonly sys: InputMaybe<ContentfulBlockVisualListSysContentTypeSysSortInput>;
};

type ContentfulBlockVisualListSysContentTypeSys = {
  readonly id: Maybe<Scalars['String']>;
  readonly linkType: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulBlockVisualListSysContentTypeSysFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly linkType: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulBlockVisualListSysContentTypeSysFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly linkType: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulBlockVisualListSysContentTypeSysSortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly linkType: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulBlockVisualListSysFieldSelector = {
  readonly contentType: InputMaybe<ContentfulBlockVisualListSysContentTypeFieldSelector>;
  readonly revision: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulBlockVisualListSysFilterInput = {
  readonly contentType: InputMaybe<ContentfulBlockVisualListSysContentTypeFilterInput>;
  readonly revision: InputMaybe<IntQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulBlockVisualListSysSortInput = {
  readonly contentType: InputMaybe<ContentfulBlockVisualListSysContentTypeSortInput>;
  readonly revision: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulCard = ContentfulEntry & ContentfulReference & Node & {
  readonly block__featured_benefits: Maybe<ReadonlyArray<Maybe<ContentfulBlockFeaturedBenefits>>>;
  readonly block__featured_services: Maybe<ReadonlyArray<Maybe<ContentfulBlockFeaturedServices>>>;
  readonly block__featured_services__home_: Maybe<ReadonlyArray<Maybe<ContentfulBlockFeaturedServicesHome>>>;
  readonly block__visual_list: Maybe<ReadonlyArray<Maybe<ContentfulBlockVisualList>>>;
  readonly children: ReadonlyArray<Node>;
  readonly contentful_id: Scalars['String'];
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly description: Maybe<ContentfulCardDescription>;
  readonly icon: Maybe<ContentfulAsset>;
  readonly id: Scalars['ID'];
  readonly image: Maybe<ContentfulAsset>;
  readonly internal: Internal;
  readonly node_locale: Scalars['String'];
  readonly page: Maybe<ContentfulPage>;
  readonly parent: Maybe<Node>;
  readonly spaceId: Maybe<Scalars['String']>;
  readonly subtitle: Maybe<Scalars['String']>;
  readonly sys: Maybe<ContentfulCardSys>;
  readonly title: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type ContentfulCard_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type ContentfulCard_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type ContentfulCardConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulCardEdge>;
  readonly group: ReadonlyArray<ContentfulCardGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulCard>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulCardConnection_distinctArgs = {
  field: ContentfulCardFieldSelector;
};


type ContentfulCardConnection_groupArgs = {
  field: ContentfulCardFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulCardConnection_maxArgs = {
  field: ContentfulCardFieldSelector;
};


type ContentfulCardConnection_minArgs = {
  field: ContentfulCardFieldSelector;
};


type ContentfulCardConnection_sumArgs = {
  field: ContentfulCardFieldSelector;
};

type ContentfulCardDescription = {
  readonly raw: Maybe<Scalars['String']>;
};

type ContentfulCardDescriptionFieldSelector = {
  readonly raw: InputMaybe<FieldSelectorEnum>;
};

type ContentfulCardDescriptionFilterInput = {
  readonly raw: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulCardDescriptionSortInput = {
  readonly raw: InputMaybe<SortOrderEnum>;
};

type ContentfulCardEdge = {
  readonly next: Maybe<ContentfulCard>;
  readonly node: ContentfulCard;
  readonly previous: Maybe<ContentfulCard>;
};

type ContentfulCardFieldSelector = {
  readonly block__featured_benefits: InputMaybe<ContentfulBlockFeaturedBenefitsFieldSelector>;
  readonly block__featured_services: InputMaybe<ContentfulBlockFeaturedServicesFieldSelector>;
  readonly block__featured_services__home_: InputMaybe<ContentfulBlockFeaturedServicesHomeFieldSelector>;
  readonly block__visual_list: InputMaybe<ContentfulBlockVisualListFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<ContentfulCardDescriptionFieldSelector>;
  readonly icon: InputMaybe<ContentfulAssetFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<ContentfulAssetFieldSelector>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly page: InputMaybe<ContentfulPageFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly spaceId: InputMaybe<FieldSelectorEnum>;
  readonly subtitle: InputMaybe<FieldSelectorEnum>;
  readonly sys: InputMaybe<ContentfulCardSysFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type ContentfulCardFilterInput = {
  readonly block__featured_benefits: InputMaybe<ContentfulBlockFeaturedBenefitsFilterListInput>;
  readonly block__featured_services: InputMaybe<ContentfulBlockFeaturedServicesFilterListInput>;
  readonly block__featured_services__home_: InputMaybe<ContentfulBlockFeaturedServicesHomeFilterListInput>;
  readonly block__visual_list: InputMaybe<ContentfulBlockVisualListFilterListInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly description: InputMaybe<ContentfulCardDescriptionFilterInput>;
  readonly icon: InputMaybe<ContentfulAssetFilterInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<ContentfulAssetFilterInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly page: InputMaybe<ContentfulPageFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly spaceId: InputMaybe<StringQueryOperatorInput>;
  readonly subtitle: InputMaybe<StringQueryOperatorInput>;
  readonly sys: InputMaybe<ContentfulCardSysFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type ContentfulCardFilterListInput = {
  readonly elemMatch: InputMaybe<ContentfulCardFilterInput>;
};

type ContentfulCardGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulCardEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulCardGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulCard>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulCardGroupConnection_distinctArgs = {
  field: ContentfulCardFieldSelector;
};


type ContentfulCardGroupConnection_groupArgs = {
  field: ContentfulCardFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulCardGroupConnection_maxArgs = {
  field: ContentfulCardFieldSelector;
};


type ContentfulCardGroupConnection_minArgs = {
  field: ContentfulCardFieldSelector;
};


type ContentfulCardGroupConnection_sumArgs = {
  field: ContentfulCardFieldSelector;
};

type ContentfulCardSortInput = {
  readonly block__featured_benefits: InputMaybe<ContentfulBlockFeaturedBenefitsSortInput>;
  readonly block__featured_services: InputMaybe<ContentfulBlockFeaturedServicesSortInput>;
  readonly block__featured_services__home_: InputMaybe<ContentfulBlockFeaturedServicesHomeSortInput>;
  readonly block__visual_list: InputMaybe<ContentfulBlockVisualListSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<ContentfulCardDescriptionSortInput>;
  readonly icon: InputMaybe<ContentfulAssetSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<ContentfulAssetSortInput>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly page: InputMaybe<ContentfulPageSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly spaceId: InputMaybe<SortOrderEnum>;
  readonly subtitle: InputMaybe<SortOrderEnum>;
  readonly sys: InputMaybe<ContentfulCardSysSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type ContentfulCardSys = {
  readonly contentType: Maybe<ContentfulCardSysContentType>;
  readonly revision: Maybe<Scalars['Int']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulCardSysContentType = {
  readonly sys: Maybe<ContentfulCardSysContentTypeSys>;
};

type ContentfulCardSysContentTypeFieldSelector = {
  readonly sys: InputMaybe<ContentfulCardSysContentTypeSysFieldSelector>;
};

type ContentfulCardSysContentTypeFilterInput = {
  readonly sys: InputMaybe<ContentfulCardSysContentTypeSysFilterInput>;
};

type ContentfulCardSysContentTypeSortInput = {
  readonly sys: InputMaybe<ContentfulCardSysContentTypeSysSortInput>;
};

type ContentfulCardSysContentTypeSys = {
  readonly id: Maybe<Scalars['String']>;
  readonly linkType: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulCardSysContentTypeSysFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly linkType: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulCardSysContentTypeSysFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly linkType: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulCardSysContentTypeSysSortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly linkType: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulCardSysFieldSelector = {
  readonly contentType: InputMaybe<ContentfulCardSysContentTypeFieldSelector>;
  readonly revision: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulCardSysFilterInput = {
  readonly contentType: InputMaybe<ContentfulCardSysContentTypeFilterInput>;
  readonly revision: InputMaybe<IntQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulCardSysSortInput = {
  readonly contentType: InputMaybe<ContentfulCardSysContentTypeSortInput>;
  readonly revision: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulContentType = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly description: Maybe<Scalars['String']>;
  readonly displayField: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly name: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly sys: Maybe<ContentfulContentTypeSys>;
};

type ContentfulContentTypeConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulContentTypeEdge>;
  readonly group: ReadonlyArray<ContentfulContentTypeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulContentType>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulContentTypeConnection_distinctArgs = {
  field: ContentfulContentTypeFieldSelector;
};


type ContentfulContentTypeConnection_groupArgs = {
  field: ContentfulContentTypeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulContentTypeConnection_maxArgs = {
  field: ContentfulContentTypeFieldSelector;
};


type ContentfulContentTypeConnection_minArgs = {
  field: ContentfulContentTypeFieldSelector;
};


type ContentfulContentTypeConnection_sumArgs = {
  field: ContentfulContentTypeFieldSelector;
};

type ContentfulContentTypeEdge = {
  readonly next: Maybe<ContentfulContentType>;
  readonly node: ContentfulContentType;
  readonly previous: Maybe<ContentfulContentType>;
};

type ContentfulContentTypeFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly displayField: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly sys: InputMaybe<ContentfulContentTypeSysFieldSelector>;
};

type ContentfulContentTypeFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly displayField: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly sys: InputMaybe<ContentfulContentTypeSysFilterInput>;
};

type ContentfulContentTypeGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulContentTypeEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulContentTypeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulContentType>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulContentTypeGroupConnection_distinctArgs = {
  field: ContentfulContentTypeFieldSelector;
};


type ContentfulContentTypeGroupConnection_groupArgs = {
  field: ContentfulContentTypeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulContentTypeGroupConnection_maxArgs = {
  field: ContentfulContentTypeFieldSelector;
};


type ContentfulContentTypeGroupConnection_minArgs = {
  field: ContentfulContentTypeFieldSelector;
};


type ContentfulContentTypeGroupConnection_sumArgs = {
  field: ContentfulContentTypeFieldSelector;
};

type ContentfulContentTypeSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly displayField: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly sys: InputMaybe<ContentfulContentTypeSysSortInput>;
};

type ContentfulContentTypeSys = {
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulContentTypeSysFieldSelector = {
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulContentTypeSysFilterInput = {
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulContentTypeSysSortInput = {
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulEntry = {
  readonly children: ReadonlyArray<Node>;
  readonly contentful_id: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
};

type ContentfulEntryConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulEntryEdge>;
  readonly group: ReadonlyArray<ContentfulEntryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulEntry>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulEntryConnection_distinctArgs = {
  field: ContentfulEntryFieldSelector;
};


type ContentfulEntryConnection_groupArgs = {
  field: ContentfulEntryFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulEntryConnection_maxArgs = {
  field: ContentfulEntryFieldSelector;
};


type ContentfulEntryConnection_minArgs = {
  field: ContentfulEntryFieldSelector;
};


type ContentfulEntryConnection_sumArgs = {
  field: ContentfulEntryFieldSelector;
};

type ContentfulEntryEdge = {
  readonly next: Maybe<ContentfulEntry>;
  readonly node: ContentfulEntry;
  readonly previous: Maybe<ContentfulEntry>;
};

type ContentfulEntryFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type ContentfulEntryFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type ContentfulEntryGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulEntryEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulEntryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulEntry>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulEntryGroupConnection_distinctArgs = {
  field: ContentfulEntryFieldSelector;
};


type ContentfulEntryGroupConnection_groupArgs = {
  field: ContentfulEntryFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulEntryGroupConnection_maxArgs = {
  field: ContentfulEntryFieldSelector;
};


type ContentfulEntryGroupConnection_minArgs = {
  field: ContentfulEntryFieldSelector;
};


type ContentfulEntryGroupConnection_sumArgs = {
  field: ContentfulEntryFieldSelector;
};

type ContentfulEntrySortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type ContentfulHeaderV2 = ContentfulEntry & ContentfulReference & Node & {
  /** Returns the first child node of type contentfulHeaderV2HeroV2TextTextNode or null if there are no children of given type on this node */
  readonly childContentfulHeaderV2HeroV2TextTextNode: Maybe<contentfulHeaderV2HeroV2TextTextNode>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type contentfulHeaderV2HeroV2TextTextNode */
  readonly childrenContentfulHeaderV2HeroV2TextTextNode: Maybe<ReadonlyArray<Maybe<contentfulHeaderV2HeroV2TextTextNode>>>;
  readonly contentful_id: Scalars['String'];
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly heroV2text: Maybe<contentfulHeaderV2HeroV2TextTextNode>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly spaceId: Maybe<Scalars['String']>;
  readonly sys: Maybe<ContentfulHeaderV2Sys>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type ContentfulHeaderV2_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type ContentfulHeaderV2_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type ContentfulHeaderV2Connection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulHeaderV2Edge>;
  readonly group: ReadonlyArray<ContentfulHeaderV2GroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulHeaderV2>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulHeaderV2Connection_distinctArgs = {
  field: ContentfulHeaderV2FieldSelector;
};


type ContentfulHeaderV2Connection_groupArgs = {
  field: ContentfulHeaderV2FieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulHeaderV2Connection_maxArgs = {
  field: ContentfulHeaderV2FieldSelector;
};


type ContentfulHeaderV2Connection_minArgs = {
  field: ContentfulHeaderV2FieldSelector;
};


type ContentfulHeaderV2Connection_sumArgs = {
  field: ContentfulHeaderV2FieldSelector;
};

type ContentfulHeaderV2Edge = {
  readonly next: Maybe<ContentfulHeaderV2>;
  readonly node: ContentfulHeaderV2;
  readonly previous: Maybe<ContentfulHeaderV2>;
};

type ContentfulHeaderV2FieldSelector = {
  readonly childContentfulHeaderV2HeroV2TextTextNode: InputMaybe<contentfulHeaderV2HeroV2TextTextNodeFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenContentfulHeaderV2HeroV2TextTextNode: InputMaybe<contentfulHeaderV2HeroV2TextTextNodeFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly heroV2text: InputMaybe<contentfulHeaderV2HeroV2TextTextNodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly spaceId: InputMaybe<FieldSelectorEnum>;
  readonly sys: InputMaybe<ContentfulHeaderV2SysFieldSelector>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type ContentfulHeaderV2FilterInput = {
  readonly childContentfulHeaderV2HeroV2TextTextNode: InputMaybe<contentfulHeaderV2HeroV2TextTextNodeFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenContentfulHeaderV2HeroV2TextTextNode: InputMaybe<contentfulHeaderV2HeroV2TextTextNodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly heroV2text: InputMaybe<contentfulHeaderV2HeroV2TextTextNodeFilterInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly spaceId: InputMaybe<StringQueryOperatorInput>;
  readonly sys: InputMaybe<ContentfulHeaderV2SysFilterInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type ContentfulHeaderV2GroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulHeaderV2Edge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulHeaderV2GroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulHeaderV2>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulHeaderV2GroupConnection_distinctArgs = {
  field: ContentfulHeaderV2FieldSelector;
};


type ContentfulHeaderV2GroupConnection_groupArgs = {
  field: ContentfulHeaderV2FieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulHeaderV2GroupConnection_maxArgs = {
  field: ContentfulHeaderV2FieldSelector;
};


type ContentfulHeaderV2GroupConnection_minArgs = {
  field: ContentfulHeaderV2FieldSelector;
};


type ContentfulHeaderV2GroupConnection_sumArgs = {
  field: ContentfulHeaderV2FieldSelector;
};

type ContentfulHeaderV2SortInput = {
  readonly childContentfulHeaderV2HeroV2TextTextNode: InputMaybe<contentfulHeaderV2HeroV2TextTextNodeSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenContentfulHeaderV2HeroV2TextTextNode: InputMaybe<contentfulHeaderV2HeroV2TextTextNodeSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly heroV2text: InputMaybe<contentfulHeaderV2HeroV2TextTextNodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly spaceId: InputMaybe<SortOrderEnum>;
  readonly sys: InputMaybe<ContentfulHeaderV2SysSortInput>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type ContentfulHeaderV2Sys = {
  readonly contentType: Maybe<ContentfulHeaderV2SysContentType>;
  readonly revision: Maybe<Scalars['Int']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulHeaderV2SysContentType = {
  readonly sys: Maybe<ContentfulHeaderV2SysContentTypeSys>;
};

type ContentfulHeaderV2SysContentTypeFieldSelector = {
  readonly sys: InputMaybe<ContentfulHeaderV2SysContentTypeSysFieldSelector>;
};

type ContentfulHeaderV2SysContentTypeFilterInput = {
  readonly sys: InputMaybe<ContentfulHeaderV2SysContentTypeSysFilterInput>;
};

type ContentfulHeaderV2SysContentTypeSortInput = {
  readonly sys: InputMaybe<ContentfulHeaderV2SysContentTypeSysSortInput>;
};

type ContentfulHeaderV2SysContentTypeSys = {
  readonly id: Maybe<Scalars['String']>;
  readonly linkType: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulHeaderV2SysContentTypeSysFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly linkType: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulHeaderV2SysContentTypeSysFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly linkType: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulHeaderV2SysContentTypeSysSortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly linkType: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulHeaderV2SysFieldSelector = {
  readonly contentType: InputMaybe<ContentfulHeaderV2SysContentTypeFieldSelector>;
  readonly revision: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulHeaderV2SysFilterInput = {
  readonly contentType: InputMaybe<ContentfulHeaderV2SysContentTypeFilterInput>;
  readonly revision: InputMaybe<IntQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulHeaderV2SysSortInput = {
  readonly contentType: InputMaybe<ContentfulHeaderV2SysContentTypeSortInput>;
  readonly revision: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulImageCropFocus =
  | 'bottom'
  | 'bottom_right'
  | 'bottom_left'
  | 'center'
  | 'face'
  | 'faces'
  | 'left'
  | 'right'
  | 'top'
  | 'top_left'
  | 'top_right';

type ContentfulLink = ContentfulEntry & ContentfulReference & Node & {
  readonly children: ReadonlyArray<Node>;
  readonly contentful_id: Scalars['String'];
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly description: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly site_settings: Maybe<ReadonlyArray<Maybe<ContentfulSiteSettings>>>;
  readonly spaceId: Maybe<Scalars['String']>;
  readonly sys: Maybe<ContentfulLinkSys>;
  readonly title: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
  readonly url: Maybe<Scalars['String']>;
};


type ContentfulLink_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type ContentfulLink_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type ContentfulLinkConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulLinkEdge>;
  readonly group: ReadonlyArray<ContentfulLinkGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulLink>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulLinkConnection_distinctArgs = {
  field: ContentfulLinkFieldSelector;
};


type ContentfulLinkConnection_groupArgs = {
  field: ContentfulLinkFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulLinkConnection_maxArgs = {
  field: ContentfulLinkFieldSelector;
};


type ContentfulLinkConnection_minArgs = {
  field: ContentfulLinkFieldSelector;
};


type ContentfulLinkConnection_sumArgs = {
  field: ContentfulLinkFieldSelector;
};

type ContentfulLinkEdge = {
  readonly next: Maybe<ContentfulLink>;
  readonly node: ContentfulLink;
  readonly previous: Maybe<ContentfulLink>;
};

type ContentfulLinkFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly site_settings: InputMaybe<ContentfulSiteSettingsFieldSelector>;
  readonly spaceId: InputMaybe<FieldSelectorEnum>;
  readonly sys: InputMaybe<ContentfulLinkSysFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type ContentfulLinkFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly site_settings: InputMaybe<ContentfulSiteSettingsFilterListInput>;
  readonly spaceId: InputMaybe<StringQueryOperatorInput>;
  readonly sys: InputMaybe<ContentfulLinkSysFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulLinkFilterListInput = {
  readonly elemMatch: InputMaybe<ContentfulLinkFilterInput>;
};

type ContentfulLinkGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulLinkEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulLinkGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulLink>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulLinkGroupConnection_distinctArgs = {
  field: ContentfulLinkFieldSelector;
};


type ContentfulLinkGroupConnection_groupArgs = {
  field: ContentfulLinkFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulLinkGroupConnection_maxArgs = {
  field: ContentfulLinkFieldSelector;
};


type ContentfulLinkGroupConnection_minArgs = {
  field: ContentfulLinkFieldSelector;
};


type ContentfulLinkGroupConnection_sumArgs = {
  field: ContentfulLinkFieldSelector;
};

type ContentfulLinkSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly site_settings: InputMaybe<ContentfulSiteSettingsSortInput>;
  readonly spaceId: InputMaybe<SortOrderEnum>;
  readonly sys: InputMaybe<ContentfulLinkSysSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
};

type ContentfulLinkSys = {
  readonly contentType: Maybe<ContentfulLinkSysContentType>;
  readonly revision: Maybe<Scalars['Int']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulLinkSysContentType = {
  readonly sys: Maybe<ContentfulLinkSysContentTypeSys>;
};

type ContentfulLinkSysContentTypeFieldSelector = {
  readonly sys: InputMaybe<ContentfulLinkSysContentTypeSysFieldSelector>;
};

type ContentfulLinkSysContentTypeFilterInput = {
  readonly sys: InputMaybe<ContentfulLinkSysContentTypeSysFilterInput>;
};

type ContentfulLinkSysContentTypeSortInput = {
  readonly sys: InputMaybe<ContentfulLinkSysContentTypeSysSortInput>;
};

type ContentfulLinkSysContentTypeSys = {
  readonly id: Maybe<Scalars['String']>;
  readonly linkType: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulLinkSysContentTypeSysFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly linkType: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulLinkSysContentTypeSysFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly linkType: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulLinkSysContentTypeSysSortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly linkType: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulLinkSysFieldSelector = {
  readonly contentType: InputMaybe<ContentfulLinkSysContentTypeFieldSelector>;
  readonly revision: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulLinkSysFilterInput = {
  readonly contentType: InputMaybe<ContentfulLinkSysContentTypeFilterInput>;
  readonly revision: InputMaybe<IntQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulLinkSysSortInput = {
  readonly contentType: InputMaybe<ContentfulLinkSysContentTypeSortInput>;
  readonly revision: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulPage = ContentfulEntry & ContentfulReference & Node & {
  readonly block__banner: Maybe<ReadonlyArray<Maybe<ContentfulBlockBanner>>>;
  readonly body: Maybe<ContentfulPageBody>;
  readonly card: Maybe<ReadonlyArray<Maybe<ContentfulCard>>>;
  /** Returns the first child node of type contentfulPageSeoDescriptionTextNode or null if there are no children of given type on this node */
  readonly childContentfulPageSeoDescriptionTextNode: Maybe<contentfulPageSeoDescriptionTextNode>;
  /** Returns the first child node of type contentfulPageSeoOpenGraphDescriptionTextNode or null if there are no children of given type on this node */
  readonly childContentfulPageSeoOpenGraphDescriptionTextNode: Maybe<contentfulPageSeoOpenGraphDescriptionTextNode>;
  /** Returns the first child node of type contentfulPageSeoTwitterDescriptionTextNode or null if there are no children of given type on this node */
  readonly childContentfulPageSeoTwitterDescriptionTextNode: Maybe<contentfulPageSeoTwitterDescriptionTextNode>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type contentfulPageSeoDescriptionTextNode */
  readonly childrenContentfulPageSeoDescriptionTextNode: Maybe<ReadonlyArray<Maybe<contentfulPageSeoDescriptionTextNode>>>;
  /** Returns all children nodes filtered by type contentfulPageSeoOpenGraphDescriptionTextNode */
  readonly childrenContentfulPageSeoOpenGraphDescriptionTextNode: Maybe<ReadonlyArray<Maybe<contentfulPageSeoOpenGraphDescriptionTextNode>>>;
  /** Returns all children nodes filtered by type contentfulPageSeoTwitterDescriptionTextNode */
  readonly childrenContentfulPageSeoTwitterDescriptionTextNode: Maybe<ReadonlyArray<Maybe<contentfulPageSeoTwitterDescriptionTextNode>>>;
  readonly contentful_id: Scalars['String'];
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly node_locale: Scalars['String'];
  readonly pageBlocks: Maybe<ReadonlyArray<Maybe<ContentfulBlockBannerContentfulBlockFaqContentfulBlockFeaturedBenefitsContentfulBlockFeaturedServicesContentfulBlockFeaturedServicesHomeContentfulBlockFeaturedTestimonialsContentfulBlockMediaTextContentfulBlockMissionStatementContentfulBlockNewHeroContentfulBlockPageHeaderContentfulBlockTextContentfulBlockVisualListContentfulPostUnion>>>;
  readonly parent: Maybe<Node>;
  readonly seoDescription: Maybe<contentfulPageSeoDescriptionTextNode>;
  readonly seoMetaRobotsNofollow: Maybe<Scalars['Boolean']>;
  readonly seoMetaRobotsNoindex: Maybe<Scalars['Boolean']>;
  readonly seoOpenGraphDescription: Maybe<contentfulPageSeoOpenGraphDescriptionTextNode>;
  readonly seoOpenGraphTitle: Maybe<Scalars['String']>;
  readonly seoTitle: Maybe<Scalars['String']>;
  readonly seoTwitterDescription: Maybe<contentfulPageSeoTwitterDescriptionTextNode>;
  readonly seoTwitterTitle: Maybe<Scalars['String']>;
  readonly site_settings: Maybe<ReadonlyArray<Maybe<ContentfulSiteSettings>>>;
  readonly slug: Maybe<Scalars['String']>;
  readonly spaceId: Maybe<Scalars['String']>;
  readonly sys: Maybe<ContentfulPageSys>;
  readonly title: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type ContentfulPage_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type ContentfulPage_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type ContentfulPageBody = {
  readonly raw: Maybe<Scalars['String']>;
};

type ContentfulPageBodyFieldSelector = {
  readonly raw: InputMaybe<FieldSelectorEnum>;
};

type ContentfulPageBodyFilterInput = {
  readonly raw: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulPageBodySortInput = {
  readonly raw: InputMaybe<SortOrderEnum>;
};

type ContentfulPageConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulPageEdge>;
  readonly group: ReadonlyArray<ContentfulPageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulPage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulPageConnection_distinctArgs = {
  field: ContentfulPageFieldSelector;
};


type ContentfulPageConnection_groupArgs = {
  field: ContentfulPageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulPageConnection_maxArgs = {
  field: ContentfulPageFieldSelector;
};


type ContentfulPageConnection_minArgs = {
  field: ContentfulPageFieldSelector;
};


type ContentfulPageConnection_sumArgs = {
  field: ContentfulPageFieldSelector;
};

type ContentfulPageEdge = {
  readonly next: Maybe<ContentfulPage>;
  readonly node: ContentfulPage;
  readonly previous: Maybe<ContentfulPage>;
};

type ContentfulPageFieldSelector = {
  readonly block__banner: InputMaybe<ContentfulBlockBannerFieldSelector>;
  readonly body: InputMaybe<ContentfulPageBodyFieldSelector>;
  readonly card: InputMaybe<ContentfulCardFieldSelector>;
  readonly childContentfulPageSeoDescriptionTextNode: InputMaybe<contentfulPageSeoDescriptionTextNodeFieldSelector>;
  readonly childContentfulPageSeoOpenGraphDescriptionTextNode: InputMaybe<contentfulPageSeoOpenGraphDescriptionTextNodeFieldSelector>;
  readonly childContentfulPageSeoTwitterDescriptionTextNode: InputMaybe<contentfulPageSeoTwitterDescriptionTextNodeFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenContentfulPageSeoDescriptionTextNode: InputMaybe<contentfulPageSeoDescriptionTextNodeFieldSelector>;
  readonly childrenContentfulPageSeoOpenGraphDescriptionTextNode: InputMaybe<contentfulPageSeoOpenGraphDescriptionTextNodeFieldSelector>;
  readonly childrenContentfulPageSeoTwitterDescriptionTextNode: InputMaybe<contentfulPageSeoTwitterDescriptionTextNodeFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly seoDescription: InputMaybe<contentfulPageSeoDescriptionTextNodeFieldSelector>;
  readonly seoMetaRobotsNofollow: InputMaybe<FieldSelectorEnum>;
  readonly seoMetaRobotsNoindex: InputMaybe<FieldSelectorEnum>;
  readonly seoOpenGraphDescription: InputMaybe<contentfulPageSeoOpenGraphDescriptionTextNodeFieldSelector>;
  readonly seoOpenGraphTitle: InputMaybe<FieldSelectorEnum>;
  readonly seoTitle: InputMaybe<FieldSelectorEnum>;
  readonly seoTwitterDescription: InputMaybe<contentfulPageSeoTwitterDescriptionTextNodeFieldSelector>;
  readonly seoTwitterTitle: InputMaybe<FieldSelectorEnum>;
  readonly site_settings: InputMaybe<ContentfulSiteSettingsFieldSelector>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly spaceId: InputMaybe<FieldSelectorEnum>;
  readonly sys: InputMaybe<ContentfulPageSysFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type ContentfulPageFilterInput = {
  readonly block__banner: InputMaybe<ContentfulBlockBannerFilterListInput>;
  readonly body: InputMaybe<ContentfulPageBodyFilterInput>;
  readonly card: InputMaybe<ContentfulCardFilterListInput>;
  readonly childContentfulPageSeoDescriptionTextNode: InputMaybe<contentfulPageSeoDescriptionTextNodeFilterInput>;
  readonly childContentfulPageSeoOpenGraphDescriptionTextNode: InputMaybe<contentfulPageSeoOpenGraphDescriptionTextNodeFilterInput>;
  readonly childContentfulPageSeoTwitterDescriptionTextNode: InputMaybe<contentfulPageSeoTwitterDescriptionTextNodeFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenContentfulPageSeoDescriptionTextNode: InputMaybe<contentfulPageSeoDescriptionTextNodeFilterListInput>;
  readonly childrenContentfulPageSeoOpenGraphDescriptionTextNode: InputMaybe<contentfulPageSeoOpenGraphDescriptionTextNodeFilterListInput>;
  readonly childrenContentfulPageSeoTwitterDescriptionTextNode: InputMaybe<contentfulPageSeoTwitterDescriptionTextNodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly seoDescription: InputMaybe<contentfulPageSeoDescriptionTextNodeFilterInput>;
  readonly seoMetaRobotsNofollow: InputMaybe<BooleanQueryOperatorInput>;
  readonly seoMetaRobotsNoindex: InputMaybe<BooleanQueryOperatorInput>;
  readonly seoOpenGraphDescription: InputMaybe<contentfulPageSeoOpenGraphDescriptionTextNodeFilterInput>;
  readonly seoOpenGraphTitle: InputMaybe<StringQueryOperatorInput>;
  readonly seoTitle: InputMaybe<StringQueryOperatorInput>;
  readonly seoTwitterDescription: InputMaybe<contentfulPageSeoTwitterDescriptionTextNodeFilterInput>;
  readonly seoTwitterTitle: InputMaybe<StringQueryOperatorInput>;
  readonly site_settings: InputMaybe<ContentfulSiteSettingsFilterListInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly spaceId: InputMaybe<StringQueryOperatorInput>;
  readonly sys: InputMaybe<ContentfulPageSysFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type ContentfulPageFilterListInput = {
  readonly elemMatch: InputMaybe<ContentfulPageFilterInput>;
};

type ContentfulPageGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulPageEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulPageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulPage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulPageGroupConnection_distinctArgs = {
  field: ContentfulPageFieldSelector;
};


type ContentfulPageGroupConnection_groupArgs = {
  field: ContentfulPageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulPageGroupConnection_maxArgs = {
  field: ContentfulPageFieldSelector;
};


type ContentfulPageGroupConnection_minArgs = {
  field: ContentfulPageFieldSelector;
};


type ContentfulPageGroupConnection_sumArgs = {
  field: ContentfulPageFieldSelector;
};

type ContentfulPageSortInput = {
  readonly block__banner: InputMaybe<ContentfulBlockBannerSortInput>;
  readonly body: InputMaybe<ContentfulPageBodySortInput>;
  readonly card: InputMaybe<ContentfulCardSortInput>;
  readonly childContentfulPageSeoDescriptionTextNode: InputMaybe<contentfulPageSeoDescriptionTextNodeSortInput>;
  readonly childContentfulPageSeoOpenGraphDescriptionTextNode: InputMaybe<contentfulPageSeoOpenGraphDescriptionTextNodeSortInput>;
  readonly childContentfulPageSeoTwitterDescriptionTextNode: InputMaybe<contentfulPageSeoTwitterDescriptionTextNodeSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenContentfulPageSeoDescriptionTextNode: InputMaybe<contentfulPageSeoDescriptionTextNodeSortInput>;
  readonly childrenContentfulPageSeoOpenGraphDescriptionTextNode: InputMaybe<contentfulPageSeoOpenGraphDescriptionTextNodeSortInput>;
  readonly childrenContentfulPageSeoTwitterDescriptionTextNode: InputMaybe<contentfulPageSeoTwitterDescriptionTextNodeSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly seoDescription: InputMaybe<contentfulPageSeoDescriptionTextNodeSortInput>;
  readonly seoMetaRobotsNofollow: InputMaybe<SortOrderEnum>;
  readonly seoMetaRobotsNoindex: InputMaybe<SortOrderEnum>;
  readonly seoOpenGraphDescription: InputMaybe<contentfulPageSeoOpenGraphDescriptionTextNodeSortInput>;
  readonly seoOpenGraphTitle: InputMaybe<SortOrderEnum>;
  readonly seoTitle: InputMaybe<SortOrderEnum>;
  readonly seoTwitterDescription: InputMaybe<contentfulPageSeoTwitterDescriptionTextNodeSortInput>;
  readonly seoTwitterTitle: InputMaybe<SortOrderEnum>;
  readonly site_settings: InputMaybe<ContentfulSiteSettingsSortInput>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly spaceId: InputMaybe<SortOrderEnum>;
  readonly sys: InputMaybe<ContentfulPageSysSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type ContentfulPageSys = {
  readonly contentType: Maybe<ContentfulPageSysContentType>;
  readonly revision: Maybe<Scalars['Int']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulPageSysContentType = {
  readonly sys: Maybe<ContentfulPageSysContentTypeSys>;
};

type ContentfulPageSysContentTypeFieldSelector = {
  readonly sys: InputMaybe<ContentfulPageSysContentTypeSysFieldSelector>;
};

type ContentfulPageSysContentTypeFilterInput = {
  readonly sys: InputMaybe<ContentfulPageSysContentTypeSysFilterInput>;
};

type ContentfulPageSysContentTypeSortInput = {
  readonly sys: InputMaybe<ContentfulPageSysContentTypeSysSortInput>;
};

type ContentfulPageSysContentTypeSys = {
  readonly id: Maybe<Scalars['String']>;
  readonly linkType: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulPageSysContentTypeSysFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly linkType: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulPageSysContentTypeSysFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly linkType: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulPageSysContentTypeSysSortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly linkType: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulPageSysFieldSelector = {
  readonly contentType: InputMaybe<ContentfulPageSysContentTypeFieldSelector>;
  readonly revision: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulPageSysFilterInput = {
  readonly contentType: InputMaybe<ContentfulPageSysContentTypeFilterInput>;
  readonly revision: InputMaybe<IntQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulPageSysSortInput = {
  readonly contentType: InputMaybe<ContentfulPageSysContentTypeSortInput>;
  readonly revision: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulPost = ContentfulEntry & ContentfulReference & Node & {
  readonly body: Maybe<ContentfulPostBody>;
  /** Returns the first child node of type contentfulPostSeoDescriptionTextNode or null if there are no children of given type on this node */
  readonly childContentfulPostSeoDescriptionTextNode: Maybe<contentfulPostSeoDescriptionTextNode>;
  /** Returns the first child node of type contentfulPostSeoOpenGraphDescriptionTextNode or null if there are no children of given type on this node */
  readonly childContentfulPostSeoOpenGraphDescriptionTextNode: Maybe<contentfulPostSeoOpenGraphDescriptionTextNode>;
  /** Returns the first child node of type contentfulPostSeoTwitterDescriptionTextNode or null if there are no children of given type on this node */
  readonly childContentfulPostSeoTwitterDescriptionTextNode: Maybe<contentfulPostSeoTwitterDescriptionTextNode>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type contentfulPostSeoDescriptionTextNode */
  readonly childrenContentfulPostSeoDescriptionTextNode: Maybe<ReadonlyArray<Maybe<contentfulPostSeoDescriptionTextNode>>>;
  /** Returns all children nodes filtered by type contentfulPostSeoOpenGraphDescriptionTextNode */
  readonly childrenContentfulPostSeoOpenGraphDescriptionTextNode: Maybe<ReadonlyArray<Maybe<contentfulPostSeoOpenGraphDescriptionTextNode>>>;
  /** Returns all children nodes filtered by type contentfulPostSeoTwitterDescriptionTextNode */
  readonly childrenContentfulPostSeoTwitterDescriptionTextNode: Maybe<ReadonlyArray<Maybe<contentfulPostSeoTwitterDescriptionTextNode>>>;
  readonly contentful_id: Scalars['String'];
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly featuredImage: Maybe<ContentfulAsset>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly node_locale: Scalars['String'];
  readonly page: Maybe<ReadonlyArray<Maybe<ContentfulPage>>>;
  readonly parent: Maybe<Node>;
  readonly publishDate: Maybe<Scalars['Date']>;
  readonly seoDescription: Maybe<contentfulPostSeoDescriptionTextNode>;
  readonly seoKeywords: Maybe<Scalars['String']>;
  readonly seoMetaRobotsNofollow: Maybe<Scalars['Boolean']>;
  readonly seoMetaRobotsNoindex: Maybe<Scalars['Boolean']>;
  readonly seoOpenGraphDescription: Maybe<contentfulPostSeoOpenGraphDescriptionTextNode>;
  readonly seoOpenGraphImage: Maybe<ContentfulAsset>;
  readonly seoOpenGraphTitle: Maybe<Scalars['String']>;
  readonly seoTitle: Maybe<Scalars['String']>;
  readonly seoTwitterDescription: Maybe<contentfulPostSeoTwitterDescriptionTextNode>;
  readonly seoTwitterImage: Maybe<ContentfulAsset>;
  readonly seoTwitterTitle: Maybe<Scalars['String']>;
  readonly slug: Maybe<Scalars['String']>;
  readonly spaceId: Maybe<Scalars['String']>;
  readonly sys: Maybe<ContentfulPostSys>;
  readonly title: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type ContentfulPost_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type ContentfulPost_publishDateArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type ContentfulPost_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type ContentfulPostBody = {
  readonly raw: Maybe<Scalars['String']>;
};

type ContentfulPostBodyFieldSelector = {
  readonly raw: InputMaybe<FieldSelectorEnum>;
};

type ContentfulPostBodyFilterInput = {
  readonly raw: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulPostBodySortInput = {
  readonly raw: InputMaybe<SortOrderEnum>;
};

type ContentfulPostConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulPostEdge>;
  readonly group: ReadonlyArray<ContentfulPostGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulPost>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulPostConnection_distinctArgs = {
  field: ContentfulPostFieldSelector;
};


type ContentfulPostConnection_groupArgs = {
  field: ContentfulPostFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulPostConnection_maxArgs = {
  field: ContentfulPostFieldSelector;
};


type ContentfulPostConnection_minArgs = {
  field: ContentfulPostFieldSelector;
};


type ContentfulPostConnection_sumArgs = {
  field: ContentfulPostFieldSelector;
};

type ContentfulPostEdge = {
  readonly next: Maybe<ContentfulPost>;
  readonly node: ContentfulPost;
  readonly previous: Maybe<ContentfulPost>;
};

type ContentfulPostFieldSelector = {
  readonly body: InputMaybe<ContentfulPostBodyFieldSelector>;
  readonly childContentfulPostSeoDescriptionTextNode: InputMaybe<contentfulPostSeoDescriptionTextNodeFieldSelector>;
  readonly childContentfulPostSeoOpenGraphDescriptionTextNode: InputMaybe<contentfulPostSeoOpenGraphDescriptionTextNodeFieldSelector>;
  readonly childContentfulPostSeoTwitterDescriptionTextNode: InputMaybe<contentfulPostSeoTwitterDescriptionTextNodeFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenContentfulPostSeoDescriptionTextNode: InputMaybe<contentfulPostSeoDescriptionTextNodeFieldSelector>;
  readonly childrenContentfulPostSeoOpenGraphDescriptionTextNode: InputMaybe<contentfulPostSeoOpenGraphDescriptionTextNodeFieldSelector>;
  readonly childrenContentfulPostSeoTwitterDescriptionTextNode: InputMaybe<contentfulPostSeoTwitterDescriptionTextNodeFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly featuredImage: InputMaybe<ContentfulAssetFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly page: InputMaybe<ContentfulPageFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly publishDate: InputMaybe<FieldSelectorEnum>;
  readonly seoDescription: InputMaybe<contentfulPostSeoDescriptionTextNodeFieldSelector>;
  readonly seoKeywords: InputMaybe<FieldSelectorEnum>;
  readonly seoMetaRobotsNofollow: InputMaybe<FieldSelectorEnum>;
  readonly seoMetaRobotsNoindex: InputMaybe<FieldSelectorEnum>;
  readonly seoOpenGraphDescription: InputMaybe<contentfulPostSeoOpenGraphDescriptionTextNodeFieldSelector>;
  readonly seoOpenGraphImage: InputMaybe<ContentfulAssetFieldSelector>;
  readonly seoOpenGraphTitle: InputMaybe<FieldSelectorEnum>;
  readonly seoTitle: InputMaybe<FieldSelectorEnum>;
  readonly seoTwitterDescription: InputMaybe<contentfulPostSeoTwitterDescriptionTextNodeFieldSelector>;
  readonly seoTwitterImage: InputMaybe<ContentfulAssetFieldSelector>;
  readonly seoTwitterTitle: InputMaybe<FieldSelectorEnum>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly spaceId: InputMaybe<FieldSelectorEnum>;
  readonly sys: InputMaybe<ContentfulPostSysFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type ContentfulPostFilterInput = {
  readonly body: InputMaybe<ContentfulPostBodyFilterInput>;
  readonly childContentfulPostSeoDescriptionTextNode: InputMaybe<contentfulPostSeoDescriptionTextNodeFilterInput>;
  readonly childContentfulPostSeoOpenGraphDescriptionTextNode: InputMaybe<contentfulPostSeoOpenGraphDescriptionTextNodeFilterInput>;
  readonly childContentfulPostSeoTwitterDescriptionTextNode: InputMaybe<contentfulPostSeoTwitterDescriptionTextNodeFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenContentfulPostSeoDescriptionTextNode: InputMaybe<contentfulPostSeoDescriptionTextNodeFilterListInput>;
  readonly childrenContentfulPostSeoOpenGraphDescriptionTextNode: InputMaybe<contentfulPostSeoOpenGraphDescriptionTextNodeFilterListInput>;
  readonly childrenContentfulPostSeoTwitterDescriptionTextNode: InputMaybe<contentfulPostSeoTwitterDescriptionTextNodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly featuredImage: InputMaybe<ContentfulAssetFilterInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly page: InputMaybe<ContentfulPageFilterListInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly publishDate: InputMaybe<DateQueryOperatorInput>;
  readonly seoDescription: InputMaybe<contentfulPostSeoDescriptionTextNodeFilterInput>;
  readonly seoKeywords: InputMaybe<StringQueryOperatorInput>;
  readonly seoMetaRobotsNofollow: InputMaybe<BooleanQueryOperatorInput>;
  readonly seoMetaRobotsNoindex: InputMaybe<BooleanQueryOperatorInput>;
  readonly seoOpenGraphDescription: InputMaybe<contentfulPostSeoOpenGraphDescriptionTextNodeFilterInput>;
  readonly seoOpenGraphImage: InputMaybe<ContentfulAssetFilterInput>;
  readonly seoOpenGraphTitle: InputMaybe<StringQueryOperatorInput>;
  readonly seoTitle: InputMaybe<StringQueryOperatorInput>;
  readonly seoTwitterDescription: InputMaybe<contentfulPostSeoTwitterDescriptionTextNodeFilterInput>;
  readonly seoTwitterImage: InputMaybe<ContentfulAssetFilterInput>;
  readonly seoTwitterTitle: InputMaybe<StringQueryOperatorInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly spaceId: InputMaybe<StringQueryOperatorInput>;
  readonly sys: InputMaybe<ContentfulPostSysFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type ContentfulPostGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulPostEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulPostGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulPost>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulPostGroupConnection_distinctArgs = {
  field: ContentfulPostFieldSelector;
};


type ContentfulPostGroupConnection_groupArgs = {
  field: ContentfulPostFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulPostGroupConnection_maxArgs = {
  field: ContentfulPostFieldSelector;
};


type ContentfulPostGroupConnection_minArgs = {
  field: ContentfulPostFieldSelector;
};


type ContentfulPostGroupConnection_sumArgs = {
  field: ContentfulPostFieldSelector;
};

type ContentfulPostSortInput = {
  readonly body: InputMaybe<ContentfulPostBodySortInput>;
  readonly childContentfulPostSeoDescriptionTextNode: InputMaybe<contentfulPostSeoDescriptionTextNodeSortInput>;
  readonly childContentfulPostSeoOpenGraphDescriptionTextNode: InputMaybe<contentfulPostSeoOpenGraphDescriptionTextNodeSortInput>;
  readonly childContentfulPostSeoTwitterDescriptionTextNode: InputMaybe<contentfulPostSeoTwitterDescriptionTextNodeSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenContentfulPostSeoDescriptionTextNode: InputMaybe<contentfulPostSeoDescriptionTextNodeSortInput>;
  readonly childrenContentfulPostSeoOpenGraphDescriptionTextNode: InputMaybe<contentfulPostSeoOpenGraphDescriptionTextNodeSortInput>;
  readonly childrenContentfulPostSeoTwitterDescriptionTextNode: InputMaybe<contentfulPostSeoTwitterDescriptionTextNodeSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly featuredImage: InputMaybe<ContentfulAssetSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly page: InputMaybe<ContentfulPageSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly publishDate: InputMaybe<SortOrderEnum>;
  readonly seoDescription: InputMaybe<contentfulPostSeoDescriptionTextNodeSortInput>;
  readonly seoKeywords: InputMaybe<SortOrderEnum>;
  readonly seoMetaRobotsNofollow: InputMaybe<SortOrderEnum>;
  readonly seoMetaRobotsNoindex: InputMaybe<SortOrderEnum>;
  readonly seoOpenGraphDescription: InputMaybe<contentfulPostSeoOpenGraphDescriptionTextNodeSortInput>;
  readonly seoOpenGraphImage: InputMaybe<ContentfulAssetSortInput>;
  readonly seoOpenGraphTitle: InputMaybe<SortOrderEnum>;
  readonly seoTitle: InputMaybe<SortOrderEnum>;
  readonly seoTwitterDescription: InputMaybe<contentfulPostSeoTwitterDescriptionTextNodeSortInput>;
  readonly seoTwitterImage: InputMaybe<ContentfulAssetSortInput>;
  readonly seoTwitterTitle: InputMaybe<SortOrderEnum>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly spaceId: InputMaybe<SortOrderEnum>;
  readonly sys: InputMaybe<ContentfulPostSysSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type ContentfulPostSys = {
  readonly contentType: Maybe<ContentfulPostSysContentType>;
  readonly revision: Maybe<Scalars['Int']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulPostSysContentType = {
  readonly sys: Maybe<ContentfulPostSysContentTypeSys>;
};

type ContentfulPostSysContentTypeFieldSelector = {
  readonly sys: InputMaybe<ContentfulPostSysContentTypeSysFieldSelector>;
};

type ContentfulPostSysContentTypeFilterInput = {
  readonly sys: InputMaybe<ContentfulPostSysContentTypeSysFilterInput>;
};

type ContentfulPostSysContentTypeSortInput = {
  readonly sys: InputMaybe<ContentfulPostSysContentTypeSysSortInput>;
};

type ContentfulPostSysContentTypeSys = {
  readonly id: Maybe<Scalars['String']>;
  readonly linkType: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulPostSysContentTypeSysFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly linkType: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulPostSysContentTypeSysFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly linkType: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulPostSysContentTypeSysSortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly linkType: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulPostSysFieldSelector = {
  readonly contentType: InputMaybe<ContentfulPostSysContentTypeFieldSelector>;
  readonly revision: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulPostSysFilterInput = {
  readonly contentType: InputMaybe<ContentfulPostSysContentTypeFilterInput>;
  readonly revision: InputMaybe<IntQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulPostSysSortInput = {
  readonly contentType: InputMaybe<ContentfulPostSysContentTypeSortInput>;
  readonly revision: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulReference = {
  readonly contentful_id: Scalars['String'];
  readonly id: Scalars['ID'];
};

type ContentfulSiteSettings = ContentfulEntry & ContentfulReference & Node & {
  readonly children: ReadonlyArray<Node>;
  readonly contentful_id: Scalars['String'];
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly googleAnalyticsId: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly navigation: Maybe<ReadonlyArray<Maybe<ContentfulPage>>>;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly siteFooterContent: Maybe<ContentfulSiteSettingsSiteFooterContent>;
  readonly siteHeaderCta: Maybe<ContentfulPage>;
  readonly siteLogo: Maybe<ContentfulAsset>;
  readonly siteSocialAccounts: Maybe<ReadonlyArray<Maybe<ContentfulLink>>>;
  readonly siteTitle: Maybe<Scalars['String']>;
  readonly spaceId: Maybe<Scalars['String']>;
  readonly subMenu: Maybe<ReadonlyArray<Maybe<ContentfulLink>>>;
  readonly sys: Maybe<ContentfulSiteSettingsSys>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type ContentfulSiteSettings_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type ContentfulSiteSettings_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type ContentfulSiteSettingsConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulSiteSettingsEdge>;
  readonly group: ReadonlyArray<ContentfulSiteSettingsGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulSiteSettings>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulSiteSettingsConnection_distinctArgs = {
  field: ContentfulSiteSettingsFieldSelector;
};


type ContentfulSiteSettingsConnection_groupArgs = {
  field: ContentfulSiteSettingsFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulSiteSettingsConnection_maxArgs = {
  field: ContentfulSiteSettingsFieldSelector;
};


type ContentfulSiteSettingsConnection_minArgs = {
  field: ContentfulSiteSettingsFieldSelector;
};


type ContentfulSiteSettingsConnection_sumArgs = {
  field: ContentfulSiteSettingsFieldSelector;
};

type ContentfulSiteSettingsEdge = {
  readonly next: Maybe<ContentfulSiteSettings>;
  readonly node: ContentfulSiteSettings;
  readonly previous: Maybe<ContentfulSiteSettings>;
};

type ContentfulSiteSettingsFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly googleAnalyticsId: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly navigation: InputMaybe<ContentfulPageFieldSelector>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly siteFooterContent: InputMaybe<ContentfulSiteSettingsSiteFooterContentFieldSelector>;
  readonly siteHeaderCta: InputMaybe<ContentfulPageFieldSelector>;
  readonly siteLogo: InputMaybe<ContentfulAssetFieldSelector>;
  readonly siteSocialAccounts: InputMaybe<ContentfulLinkFieldSelector>;
  readonly siteTitle: InputMaybe<FieldSelectorEnum>;
  readonly spaceId: InputMaybe<FieldSelectorEnum>;
  readonly subMenu: InputMaybe<ContentfulLinkFieldSelector>;
  readonly sys: InputMaybe<ContentfulSiteSettingsSysFieldSelector>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type ContentfulSiteSettingsFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly googleAnalyticsId: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly navigation: InputMaybe<ContentfulPageFilterListInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly siteFooterContent: InputMaybe<ContentfulSiteSettingsSiteFooterContentFilterInput>;
  readonly siteHeaderCta: InputMaybe<ContentfulPageFilterInput>;
  readonly siteLogo: InputMaybe<ContentfulAssetFilterInput>;
  readonly siteSocialAccounts: InputMaybe<ContentfulLinkFilterListInput>;
  readonly siteTitle: InputMaybe<StringQueryOperatorInput>;
  readonly spaceId: InputMaybe<StringQueryOperatorInput>;
  readonly subMenu: InputMaybe<ContentfulLinkFilterListInput>;
  readonly sys: InputMaybe<ContentfulSiteSettingsSysFilterInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type ContentfulSiteSettingsFilterListInput = {
  readonly elemMatch: InputMaybe<ContentfulSiteSettingsFilterInput>;
};

type ContentfulSiteSettingsGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulSiteSettingsEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulSiteSettingsGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulSiteSettings>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulSiteSettingsGroupConnection_distinctArgs = {
  field: ContentfulSiteSettingsFieldSelector;
};


type ContentfulSiteSettingsGroupConnection_groupArgs = {
  field: ContentfulSiteSettingsFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulSiteSettingsGroupConnection_maxArgs = {
  field: ContentfulSiteSettingsFieldSelector;
};


type ContentfulSiteSettingsGroupConnection_minArgs = {
  field: ContentfulSiteSettingsFieldSelector;
};


type ContentfulSiteSettingsGroupConnection_sumArgs = {
  field: ContentfulSiteSettingsFieldSelector;
};

type ContentfulSiteSettingsSiteFooterContent = {
  readonly raw: Maybe<Scalars['String']>;
};

type ContentfulSiteSettingsSiteFooterContentFieldSelector = {
  readonly raw: InputMaybe<FieldSelectorEnum>;
};

type ContentfulSiteSettingsSiteFooterContentFilterInput = {
  readonly raw: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulSiteSettingsSiteFooterContentSortInput = {
  readonly raw: InputMaybe<SortOrderEnum>;
};

type ContentfulSiteSettingsSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly googleAnalyticsId: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly navigation: InputMaybe<ContentfulPageSortInput>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly siteFooterContent: InputMaybe<ContentfulSiteSettingsSiteFooterContentSortInput>;
  readonly siteHeaderCta: InputMaybe<ContentfulPageSortInput>;
  readonly siteLogo: InputMaybe<ContentfulAssetSortInput>;
  readonly siteSocialAccounts: InputMaybe<ContentfulLinkSortInput>;
  readonly siteTitle: InputMaybe<SortOrderEnum>;
  readonly spaceId: InputMaybe<SortOrderEnum>;
  readonly subMenu: InputMaybe<ContentfulLinkSortInput>;
  readonly sys: InputMaybe<ContentfulSiteSettingsSysSortInput>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type ContentfulSiteSettingsSys = {
  readonly contentType: Maybe<ContentfulSiteSettingsSysContentType>;
  readonly revision: Maybe<Scalars['Int']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulSiteSettingsSysContentType = {
  readonly sys: Maybe<ContentfulSiteSettingsSysContentTypeSys>;
};

type ContentfulSiteSettingsSysContentTypeFieldSelector = {
  readonly sys: InputMaybe<ContentfulSiteSettingsSysContentTypeSysFieldSelector>;
};

type ContentfulSiteSettingsSysContentTypeFilterInput = {
  readonly sys: InputMaybe<ContentfulSiteSettingsSysContentTypeSysFilterInput>;
};

type ContentfulSiteSettingsSysContentTypeSortInput = {
  readonly sys: InputMaybe<ContentfulSiteSettingsSysContentTypeSysSortInput>;
};

type ContentfulSiteSettingsSysContentTypeSys = {
  readonly id: Maybe<Scalars['String']>;
  readonly linkType: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulSiteSettingsSysContentTypeSysFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly linkType: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulSiteSettingsSysContentTypeSysFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly linkType: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulSiteSettingsSysContentTypeSysSortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly linkType: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulSiteSettingsSysFieldSelector = {
  readonly contentType: InputMaybe<ContentfulSiteSettingsSysContentTypeFieldSelector>;
  readonly revision: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulSiteSettingsSysFilterInput = {
  readonly contentType: InputMaybe<ContentfulSiteSettingsSysContentTypeFilterInput>;
  readonly revision: InputMaybe<IntQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulSiteSettingsSysSortInput = {
  readonly contentType: InputMaybe<ContentfulSiteSettingsSysContentTypeSortInput>;
  readonly revision: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulTestimonial = ContentfulEntry & ContentfulReference & Node & {
  readonly block__featured_testimonials: Maybe<ReadonlyArray<Maybe<ContentfulBlockFeaturedTestimonials>>>;
  readonly category: Maybe<Scalars['String']>;
  /** Returns the first child node of type contentfulTestimonialQuoteTextNode or null if there are no children of given type on this node */
  readonly childContentfulTestimonialQuoteTextNode: Maybe<contentfulTestimonialQuoteTextNode>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type contentfulTestimonialQuoteTextNode */
  readonly childrenContentfulTestimonialQuoteTextNode: Maybe<ReadonlyArray<Maybe<contentfulTestimonialQuoteTextNode>>>;
  readonly contentful_id: Scalars['String'];
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly date: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly image: Maybe<ContentfulAsset>;
  readonly internal: Internal;
  readonly name: Maybe<Scalars['String']>;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly quote: Maybe<contentfulTestimonialQuoteTextNode>;
  readonly spaceId: Maybe<Scalars['String']>;
  readonly sys: Maybe<ContentfulTestimonialSys>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type ContentfulTestimonial_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type ContentfulTestimonial_dateArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type ContentfulTestimonial_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type ContentfulTestimonialConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulTestimonialEdge>;
  readonly group: ReadonlyArray<ContentfulTestimonialGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulTestimonial>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulTestimonialConnection_distinctArgs = {
  field: ContentfulTestimonialFieldSelector;
};


type ContentfulTestimonialConnection_groupArgs = {
  field: ContentfulTestimonialFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulTestimonialConnection_maxArgs = {
  field: ContentfulTestimonialFieldSelector;
};


type ContentfulTestimonialConnection_minArgs = {
  field: ContentfulTestimonialFieldSelector;
};


type ContentfulTestimonialConnection_sumArgs = {
  field: ContentfulTestimonialFieldSelector;
};

type ContentfulTestimonialEdge = {
  readonly next: Maybe<ContentfulTestimonial>;
  readonly node: ContentfulTestimonial;
  readonly previous: Maybe<ContentfulTestimonial>;
};

type ContentfulTestimonialFieldSelector = {
  readonly block__featured_testimonials: InputMaybe<ContentfulBlockFeaturedTestimonialsFieldSelector>;
  readonly category: InputMaybe<FieldSelectorEnum>;
  readonly childContentfulTestimonialQuoteTextNode: InputMaybe<contentfulTestimonialQuoteTextNodeFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenContentfulTestimonialQuoteTextNode: InputMaybe<contentfulTestimonialQuoteTextNodeFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly date: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<ContentfulAssetFieldSelector>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly quote: InputMaybe<contentfulTestimonialQuoteTextNodeFieldSelector>;
  readonly spaceId: InputMaybe<FieldSelectorEnum>;
  readonly sys: InputMaybe<ContentfulTestimonialSysFieldSelector>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type ContentfulTestimonialFilterInput = {
  readonly block__featured_testimonials: InputMaybe<ContentfulBlockFeaturedTestimonialsFilterListInput>;
  readonly category: InputMaybe<StringQueryOperatorInput>;
  readonly childContentfulTestimonialQuoteTextNode: InputMaybe<contentfulTestimonialQuoteTextNodeFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenContentfulTestimonialQuoteTextNode: InputMaybe<contentfulTestimonialQuoteTextNodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly date: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<ContentfulAssetFilterInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly quote: InputMaybe<contentfulTestimonialQuoteTextNodeFilterInput>;
  readonly spaceId: InputMaybe<StringQueryOperatorInput>;
  readonly sys: InputMaybe<ContentfulTestimonialSysFilterInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type ContentfulTestimonialFilterListInput = {
  readonly elemMatch: InputMaybe<ContentfulTestimonialFilterInput>;
};

type ContentfulTestimonialGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulTestimonialEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulTestimonialGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulTestimonial>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulTestimonialGroupConnection_distinctArgs = {
  field: ContentfulTestimonialFieldSelector;
};


type ContentfulTestimonialGroupConnection_groupArgs = {
  field: ContentfulTestimonialFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulTestimonialGroupConnection_maxArgs = {
  field: ContentfulTestimonialFieldSelector;
};


type ContentfulTestimonialGroupConnection_minArgs = {
  field: ContentfulTestimonialFieldSelector;
};


type ContentfulTestimonialGroupConnection_sumArgs = {
  field: ContentfulTestimonialFieldSelector;
};

type ContentfulTestimonialSortInput = {
  readonly block__featured_testimonials: InputMaybe<ContentfulBlockFeaturedTestimonialsSortInput>;
  readonly category: InputMaybe<SortOrderEnum>;
  readonly childContentfulTestimonialQuoteTextNode: InputMaybe<contentfulTestimonialQuoteTextNodeSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenContentfulTestimonialQuoteTextNode: InputMaybe<contentfulTestimonialQuoteTextNodeSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly date: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<ContentfulAssetSortInput>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly quote: InputMaybe<contentfulTestimonialQuoteTextNodeSortInput>;
  readonly spaceId: InputMaybe<SortOrderEnum>;
  readonly sys: InputMaybe<ContentfulTestimonialSysSortInput>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type ContentfulTestimonialSys = {
  readonly contentType: Maybe<ContentfulTestimonialSysContentType>;
  readonly revision: Maybe<Scalars['Int']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulTestimonialSysContentType = {
  readonly sys: Maybe<ContentfulTestimonialSysContentTypeSys>;
};

type ContentfulTestimonialSysContentTypeFieldSelector = {
  readonly sys: InputMaybe<ContentfulTestimonialSysContentTypeSysFieldSelector>;
};

type ContentfulTestimonialSysContentTypeFilterInput = {
  readonly sys: InputMaybe<ContentfulTestimonialSysContentTypeSysFilterInput>;
};

type ContentfulTestimonialSysContentTypeSortInput = {
  readonly sys: InputMaybe<ContentfulTestimonialSysContentTypeSysSortInput>;
};

type ContentfulTestimonialSysContentTypeSys = {
  readonly id: Maybe<Scalars['String']>;
  readonly linkType: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulTestimonialSysContentTypeSysFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly linkType: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulTestimonialSysContentTypeSysFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly linkType: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulTestimonialSysContentTypeSysSortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly linkType: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulTestimonialSysFieldSelector = {
  readonly contentType: InputMaybe<ContentfulTestimonialSysContentTypeFieldSelector>;
  readonly revision: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulTestimonialSysFilterInput = {
  readonly contentType: InputMaybe<ContentfulTestimonialSysContentTypeFilterInput>;
  readonly revision: InputMaybe<IntQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulTestimonialSysSortInput = {
  readonly contentType: InputMaybe<ContentfulTestimonialSysContentTypeSortInput>;
  readonly revision: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type DateQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Date']>;
  readonly gt: InputMaybe<Scalars['Date']>;
  readonly gte: InputMaybe<Scalars['Date']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
  readonly lt: InputMaybe<Scalars['Date']>;
  readonly lte: InputMaybe<Scalars['Date']>;
  readonly ne: InputMaybe<Scalars['Date']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
};

type Directory = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly changeTime: Scalars['Date'];
  readonly children: ReadonlyArray<Node>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
};


type Directory_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type DirectoryConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryConnection_distinctArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_groupArgs = {
  field: DirectoryFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryConnection_maxArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_minArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_sumArgs = {
  field: DirectoryFieldSelector;
};

type DirectoryEdge = {
  readonly next: Maybe<Directory>;
  readonly node: Directory;
  readonly previous: Maybe<Directory>;
};

type DirectoryFieldSelector = {
  readonly absolutePath: InputMaybe<FieldSelectorEnum>;
  readonly accessTime: InputMaybe<FieldSelectorEnum>;
  readonly atime: InputMaybe<FieldSelectorEnum>;
  readonly atimeMs: InputMaybe<FieldSelectorEnum>;
  readonly base: InputMaybe<FieldSelectorEnum>;
  readonly birthTime: InputMaybe<FieldSelectorEnum>;
  readonly birthtime: InputMaybe<FieldSelectorEnum>;
  readonly birthtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly changeTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly ctime: InputMaybe<FieldSelectorEnum>;
  readonly ctimeMs: InputMaybe<FieldSelectorEnum>;
  readonly dev: InputMaybe<FieldSelectorEnum>;
  readonly dir: InputMaybe<FieldSelectorEnum>;
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly extension: InputMaybe<FieldSelectorEnum>;
  readonly gid: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly ino: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mode: InputMaybe<FieldSelectorEnum>;
  readonly modifiedTime: InputMaybe<FieldSelectorEnum>;
  readonly mtime: InputMaybe<FieldSelectorEnum>;
  readonly mtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nlink: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly prettySize: InputMaybe<FieldSelectorEnum>;
  readonly rdev: InputMaybe<FieldSelectorEnum>;
  readonly relativeDirectory: InputMaybe<FieldSelectorEnum>;
  readonly relativePath: InputMaybe<FieldSelectorEnum>;
  readonly root: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly sourceInstanceName: InputMaybe<FieldSelectorEnum>;
  readonly uid: InputMaybe<FieldSelectorEnum>;
};

type DirectoryFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type DirectoryGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryGroupConnection_distinctArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_groupArgs = {
  field: DirectoryFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryGroupConnection_maxArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_minArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_sumArgs = {
  field: DirectoryFieldSelector;
};

type DirectorySortInput = {
  readonly absolutePath: InputMaybe<SortOrderEnum>;
  readonly accessTime: InputMaybe<SortOrderEnum>;
  readonly atime: InputMaybe<SortOrderEnum>;
  readonly atimeMs: InputMaybe<SortOrderEnum>;
  readonly base: InputMaybe<SortOrderEnum>;
  readonly birthTime: InputMaybe<SortOrderEnum>;
  readonly birthtime: InputMaybe<SortOrderEnum>;
  readonly birthtimeMs: InputMaybe<SortOrderEnum>;
  readonly changeTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly ctime: InputMaybe<SortOrderEnum>;
  readonly ctimeMs: InputMaybe<SortOrderEnum>;
  readonly dev: InputMaybe<SortOrderEnum>;
  readonly dir: InputMaybe<SortOrderEnum>;
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly extension: InputMaybe<SortOrderEnum>;
  readonly gid: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly ino: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mode: InputMaybe<SortOrderEnum>;
  readonly modifiedTime: InputMaybe<SortOrderEnum>;
  readonly mtime: InputMaybe<SortOrderEnum>;
  readonly mtimeMs: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nlink: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly prettySize: InputMaybe<SortOrderEnum>;
  readonly rdev: InputMaybe<SortOrderEnum>;
  readonly relativeDirectory: InputMaybe<SortOrderEnum>;
  readonly relativePath: InputMaybe<SortOrderEnum>;
  readonly root: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly sourceInstanceName: InputMaybe<SortOrderEnum>;
  readonly uid: InputMaybe<SortOrderEnum>;
};

type DuotoneGradient = {
  readonly highlight: Scalars['String'];
  readonly opacity: InputMaybe<Scalars['Int']>;
  readonly shadow: Scalars['String'];
};

type FieldSelectorEnum =
  | 'SELECT';

type File = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly blksize: Maybe<Scalars['Int']>;
  readonly blocks: Maybe<Scalars['Int']>;
  readonly changeTime: Scalars['Date'];
  /** Returns the first child node of type ImageSharp or null if there are no children of given type on this node */
  readonly childImageSharp: Maybe<ImageSharp>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type ImageSharp */
  readonly childrenImageSharp: Maybe<ReadonlyArray<Maybe<ImageSharp>>>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  /** Copy file to static directory and return public url to it */
  readonly publicURL: Maybe<Scalars['String']>;
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
};


type File_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type FileConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileConnection_distinctArgs = {
  field: FileFieldSelector;
};


type FileConnection_groupArgs = {
  field: FileFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileConnection_maxArgs = {
  field: FileFieldSelector;
};


type FileConnection_minArgs = {
  field: FileFieldSelector;
};


type FileConnection_sumArgs = {
  field: FileFieldSelector;
};

type FileEdge = {
  readonly next: Maybe<File>;
  readonly node: File;
  readonly previous: Maybe<File>;
};

type FileFieldSelector = {
  readonly absolutePath: InputMaybe<FieldSelectorEnum>;
  readonly accessTime: InputMaybe<FieldSelectorEnum>;
  readonly atime: InputMaybe<FieldSelectorEnum>;
  readonly atimeMs: InputMaybe<FieldSelectorEnum>;
  readonly base: InputMaybe<FieldSelectorEnum>;
  readonly birthTime: InputMaybe<FieldSelectorEnum>;
  readonly birthtime: InputMaybe<FieldSelectorEnum>;
  readonly birthtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly blksize: InputMaybe<FieldSelectorEnum>;
  readonly blocks: InputMaybe<FieldSelectorEnum>;
  readonly changeTime: InputMaybe<FieldSelectorEnum>;
  readonly childImageSharp: InputMaybe<ImageSharpFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenImageSharp: InputMaybe<ImageSharpFieldSelector>;
  readonly ctime: InputMaybe<FieldSelectorEnum>;
  readonly ctimeMs: InputMaybe<FieldSelectorEnum>;
  readonly dev: InputMaybe<FieldSelectorEnum>;
  readonly dir: InputMaybe<FieldSelectorEnum>;
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly extension: InputMaybe<FieldSelectorEnum>;
  readonly gid: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly ino: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mode: InputMaybe<FieldSelectorEnum>;
  readonly modifiedTime: InputMaybe<FieldSelectorEnum>;
  readonly mtime: InputMaybe<FieldSelectorEnum>;
  readonly mtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nlink: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly prettySize: InputMaybe<FieldSelectorEnum>;
  readonly publicURL: InputMaybe<FieldSelectorEnum>;
  readonly rdev: InputMaybe<FieldSelectorEnum>;
  readonly relativeDirectory: InputMaybe<FieldSelectorEnum>;
  readonly relativePath: InputMaybe<FieldSelectorEnum>;
  readonly root: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly sourceInstanceName: InputMaybe<FieldSelectorEnum>;
  readonly uid: InputMaybe<FieldSelectorEnum>;
};

type FileFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly blksize: InputMaybe<IntQueryOperatorInput>;
  readonly blocks: InputMaybe<IntQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly childImageSharp: InputMaybe<ImageSharpFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenImageSharp: InputMaybe<ImageSharpFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly publicURL: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type FileGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileGroupConnection_distinctArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_groupArgs = {
  field: FileFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileGroupConnection_maxArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_minArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_sumArgs = {
  field: FileFieldSelector;
};

type FileSortInput = {
  readonly absolutePath: InputMaybe<SortOrderEnum>;
  readonly accessTime: InputMaybe<SortOrderEnum>;
  readonly atime: InputMaybe<SortOrderEnum>;
  readonly atimeMs: InputMaybe<SortOrderEnum>;
  readonly base: InputMaybe<SortOrderEnum>;
  readonly birthTime: InputMaybe<SortOrderEnum>;
  readonly birthtime: InputMaybe<SortOrderEnum>;
  readonly birthtimeMs: InputMaybe<SortOrderEnum>;
  readonly blksize: InputMaybe<SortOrderEnum>;
  readonly blocks: InputMaybe<SortOrderEnum>;
  readonly changeTime: InputMaybe<SortOrderEnum>;
  readonly childImageSharp: InputMaybe<ImageSharpSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenImageSharp: InputMaybe<ImageSharpSortInput>;
  readonly ctime: InputMaybe<SortOrderEnum>;
  readonly ctimeMs: InputMaybe<SortOrderEnum>;
  readonly dev: InputMaybe<SortOrderEnum>;
  readonly dir: InputMaybe<SortOrderEnum>;
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly extension: InputMaybe<SortOrderEnum>;
  readonly gid: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly ino: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mode: InputMaybe<SortOrderEnum>;
  readonly modifiedTime: InputMaybe<SortOrderEnum>;
  readonly mtime: InputMaybe<SortOrderEnum>;
  readonly mtimeMs: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nlink: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly prettySize: InputMaybe<SortOrderEnum>;
  readonly publicURL: InputMaybe<SortOrderEnum>;
  readonly rdev: InputMaybe<SortOrderEnum>;
  readonly relativeDirectory: InputMaybe<SortOrderEnum>;
  readonly relativePath: InputMaybe<SortOrderEnum>;
  readonly root: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly sourceInstanceName: InputMaybe<SortOrderEnum>;
  readonly uid: InputMaybe<SortOrderEnum>;
};

type FloatQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Float']>;
  readonly gt: InputMaybe<Scalars['Float']>;
  readonly gte: InputMaybe<Scalars['Float']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  readonly lt: InputMaybe<Scalars['Float']>;
  readonly lte: InputMaybe<Scalars['Float']>;
  readonly ne: InputMaybe<Scalars['Float']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
};

type GatsbyImageDataQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['GatsbyImageData']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>>;
  readonly ne: InputMaybe<Scalars['GatsbyImageData']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>>;
};

type GatsbyImageFormat =
  | 'auto'
  | 'avif'
  | 'jpg'
  | ''
  | 'png'
  | 'webp';

type GatsbyImageLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type GatsbyImagePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type ImageCropFocus =
  | 17
  | 0
  | 2
  | 16
  | 1
  | 5
  | 8
  | 3
  | 6
  | 7
  | 4;

type ImageFit =
  | 'contain'
  | 'cover'
  | 'fill'
  | 'inside'
  | 'outside';

type ImageFormat =
  | ''
  | 'avif'
  | 'jpg'
  | ''
  | 'png'
  | 'webp';

type ImageLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type ImagePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type ImageResizingBehavior =
  /** Crop a part of the original image to match the specified size. */
  | 'crop'
  /** Crop the image to the specified dimensions, if the original image is smaller than these dimensions, then the image will be upscaled. */
  | 'fill'
  | ''
  /** Same as the default resizing, but adds padding so that the generated image has the specified dimensions. */
  | 'pad'
  /** Scale the image regardless of the original aspect ratio. */
  | 'scale'
  /** When used in association with the f parameter below, creates a thumbnail from the image based on a focus area. */
  | 'thumb';

type ImageSharp = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly fixed: Maybe<ImageSharpFixed>;
  readonly fluid: Maybe<ImageSharpFluid>;
  readonly gatsbyImageData: Scalars['GatsbyImageData'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly original: Maybe<ImageSharpOriginal>;
  readonly parent: Maybe<Node>;
  readonly resize: Maybe<ImageSharpResize>;
};


type ImageSharp_fixedArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64Width: InputMaybe<Scalars['Int']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  height: InputMaybe<Scalars['Int']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  toFormat?: InputMaybe<ImageFormat>;
  toFormatBase64?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};


type ImageSharp_fluidArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64Width: InputMaybe<Scalars['Int']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  maxHeight: InputMaybe<Scalars['Int']>;
  maxWidth: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  sizes?: InputMaybe<Scalars['String']>;
  srcSetBreakpoints?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  toFormat?: InputMaybe<ImageFormat>;
  toFormatBase64?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
};


type ImageSharp_gatsbyImageDataArgs = {
  aspectRatio: InputMaybe<Scalars['Float']>;
  avifOptions: InputMaybe<AVIFOptions>;
  backgroundColor: InputMaybe<Scalars['String']>;
  blurredOptions: InputMaybe<BlurredOptions>;
  breakpoints: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  formats: InputMaybe<ReadonlyArray<InputMaybe<ImageFormat>>>;
  height: InputMaybe<Scalars['Int']>;
  jpgOptions: InputMaybe<JPGOptions>;
  layout?: InputMaybe<ImageLayout>;
  outputPixelDensities: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  placeholder: InputMaybe<ImagePlaceholder>;
  pngOptions: InputMaybe<PNGOptions>;
  quality: InputMaybe<Scalars['Int']>;
  sizes: InputMaybe<Scalars['String']>;
  tracedSVGOptions: InputMaybe<Potrace>;
  transformOptions: InputMaybe<TransformOptions>;
  webpOptions: InputMaybe<WebPOptions>;
  width: InputMaybe<Scalars['Int']>;
};


type ImageSharp_resizeArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64?: InputMaybe<Scalars['Boolean']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  height: InputMaybe<Scalars['Int']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  pngCompressionLevel?: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  toFormat?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};

type ImageSharpConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ImageSharpEdge>;
  readonly group: ReadonlyArray<ImageSharpGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ImageSharp>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ImageSharpConnection_distinctArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpConnection_groupArgs = {
  field: ImageSharpFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ImageSharpConnection_maxArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpConnection_minArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpConnection_sumArgs = {
  field: ImageSharpFieldSelector;
};

type ImageSharpEdge = {
  readonly next: Maybe<ImageSharp>;
  readonly node: ImageSharp;
  readonly previous: Maybe<ImageSharp>;
};

type ImageSharpFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly fixed: InputMaybe<ImageSharpFixedFieldSelector>;
  readonly fluid: InputMaybe<ImageSharpFluidFieldSelector>;
  readonly gatsbyImageData: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly original: InputMaybe<ImageSharpOriginalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly resize: InputMaybe<ImageSharpResizeFieldSelector>;
};

type ImageSharpFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly fixed: InputMaybe<ImageSharpFixedFilterInput>;
  readonly fluid: InputMaybe<ImageSharpFluidFilterInput>;
  readonly gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly original: InputMaybe<ImageSharpOriginalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly resize: InputMaybe<ImageSharpResizeFilterInput>;
};

type ImageSharpFilterListInput = {
  readonly elemMatch: InputMaybe<ImageSharpFilterInput>;
};

type ImageSharpFixed = {
  readonly aspectRatio: Maybe<Scalars['Float']>;
  readonly base64: Maybe<Scalars['String']>;
  readonly height: Scalars['Float'];
  readonly originalName: Maybe<Scalars['String']>;
  readonly src: Scalars['String'];
  readonly srcSet: Scalars['String'];
  readonly srcSetWebp: Maybe<Scalars['String']>;
  readonly srcWebp: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
  readonly width: Scalars['Float'];
};

type ImageSharpFixedFieldSelector = {
  readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
  readonly base64: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly originalName: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly srcSet: InputMaybe<FieldSelectorEnum>;
  readonly srcSetWebp: InputMaybe<FieldSelectorEnum>;
  readonly srcWebp: InputMaybe<FieldSelectorEnum>;
  readonly tracedSVG: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpFixedFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly base64: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<FloatQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly srcSet: InputMaybe<StringQueryOperatorInput>;
  readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>;
  readonly srcWebp: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<FloatQueryOperatorInput>;
};

type ImageSharpFixedSortInput = {
  readonly aspectRatio: InputMaybe<SortOrderEnum>;
  readonly base64: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly originalName: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly srcSet: InputMaybe<SortOrderEnum>;
  readonly srcSetWebp: InputMaybe<SortOrderEnum>;
  readonly srcWebp: InputMaybe<SortOrderEnum>;
  readonly tracedSVG: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ImageSharpFluid = {
  readonly aspectRatio: Scalars['Float'];
  readonly base64: Maybe<Scalars['String']>;
  readonly originalImg: Maybe<Scalars['String']>;
  readonly originalName: Maybe<Scalars['String']>;
  readonly presentationHeight: Scalars['Int'];
  readonly presentationWidth: Scalars['Int'];
  readonly sizes: Scalars['String'];
  readonly src: Scalars['String'];
  readonly srcSet: Scalars['String'];
  readonly srcSetWebp: Maybe<Scalars['String']>;
  readonly srcWebp: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
};

type ImageSharpFluidFieldSelector = {
  readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
  readonly base64: InputMaybe<FieldSelectorEnum>;
  readonly originalImg: InputMaybe<FieldSelectorEnum>;
  readonly originalName: InputMaybe<FieldSelectorEnum>;
  readonly presentationHeight: InputMaybe<FieldSelectorEnum>;
  readonly presentationWidth: InputMaybe<FieldSelectorEnum>;
  readonly sizes: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly srcSet: InputMaybe<FieldSelectorEnum>;
  readonly srcSetWebp: InputMaybe<FieldSelectorEnum>;
  readonly srcWebp: InputMaybe<FieldSelectorEnum>;
  readonly tracedSVG: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpFluidFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly base64: InputMaybe<StringQueryOperatorInput>;
  readonly originalImg: InputMaybe<StringQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly presentationHeight: InputMaybe<IntQueryOperatorInput>;
  readonly presentationWidth: InputMaybe<IntQueryOperatorInput>;
  readonly sizes: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly srcSet: InputMaybe<StringQueryOperatorInput>;
  readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>;
  readonly srcWebp: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
};

type ImageSharpFluidSortInput = {
  readonly aspectRatio: InputMaybe<SortOrderEnum>;
  readonly base64: InputMaybe<SortOrderEnum>;
  readonly originalImg: InputMaybe<SortOrderEnum>;
  readonly originalName: InputMaybe<SortOrderEnum>;
  readonly presentationHeight: InputMaybe<SortOrderEnum>;
  readonly presentationWidth: InputMaybe<SortOrderEnum>;
  readonly sizes: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly srcSet: InputMaybe<SortOrderEnum>;
  readonly srcSetWebp: InputMaybe<SortOrderEnum>;
  readonly srcWebp: InputMaybe<SortOrderEnum>;
  readonly tracedSVG: InputMaybe<SortOrderEnum>;
};

type ImageSharpGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ImageSharpEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ImageSharpGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ImageSharp>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ImageSharpGroupConnection_distinctArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpGroupConnection_groupArgs = {
  field: ImageSharpFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ImageSharpGroupConnection_maxArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpGroupConnection_minArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpGroupConnection_sumArgs = {
  field: ImageSharpFieldSelector;
};

type ImageSharpOriginal = {
  readonly height: Maybe<Scalars['Float']>;
  readonly src: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Float']>;
};

type ImageSharpOriginalFieldSelector = {
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpOriginalFilterInput = {
  readonly height: InputMaybe<FloatQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<FloatQueryOperatorInput>;
};

type ImageSharpOriginalSortInput = {
  readonly height: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ImageSharpResize = {
  readonly aspectRatio: Maybe<Scalars['Float']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly originalName: Maybe<Scalars['String']>;
  readonly src: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type ImageSharpResizeFieldSelector = {
  readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly originalName: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly tracedSVG: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpResizeFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type ImageSharpResizeSortInput = {
  readonly aspectRatio: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly originalName: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly tracedSVG: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ImageSharpSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly fixed: InputMaybe<ImageSharpFixedSortInput>;
  readonly fluid: InputMaybe<ImageSharpFluidSortInput>;
  readonly gatsbyImageData: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly original: InputMaybe<ImageSharpOriginalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly resize: InputMaybe<ImageSharpResizeSortInput>;
};

type IntQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Int']>;
  readonly gt: InputMaybe<Scalars['Int']>;
  readonly gte: InputMaybe<Scalars['Int']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  readonly lt: InputMaybe<Scalars['Int']>;
  readonly lte: InputMaybe<Scalars['Int']>;
  readonly ne: InputMaybe<Scalars['Int']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
};

type Internal = {
  readonly content: Maybe<Scalars['String']>;
  readonly contentDigest: Scalars['String'];
  readonly contentFilePath: Maybe<Scalars['String']>;
  readonly description: Maybe<Scalars['String']>;
  readonly fieldOwners: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly ignoreType: Maybe<Scalars['Boolean']>;
  readonly mediaType: Maybe<Scalars['String']>;
  readonly owner: Scalars['String'];
  readonly type: Scalars['String'];
};

type InternalFieldSelector = {
  readonly content: InputMaybe<FieldSelectorEnum>;
  readonly contentDigest: InputMaybe<FieldSelectorEnum>;
  readonly contentFilePath: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly fieldOwners: InputMaybe<FieldSelectorEnum>;
  readonly ignoreType: InputMaybe<FieldSelectorEnum>;
  readonly mediaType: InputMaybe<FieldSelectorEnum>;
  readonly owner: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type InternalFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly contentDigest: InputMaybe<StringQueryOperatorInput>;
  readonly contentFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly fieldOwners: InputMaybe<StringQueryOperatorInput>;
  readonly ignoreType: InputMaybe<BooleanQueryOperatorInput>;
  readonly mediaType: InputMaybe<StringQueryOperatorInput>;
  readonly owner: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type InternalSortInput = {
  readonly content: InputMaybe<SortOrderEnum>;
  readonly contentDigest: InputMaybe<SortOrderEnum>;
  readonly contentFilePath: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly fieldOwners: InputMaybe<SortOrderEnum>;
  readonly ignoreType: InputMaybe<SortOrderEnum>;
  readonly mediaType: InputMaybe<SortOrderEnum>;
  readonly owner: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type JPGOptions = {
  readonly progressive: InputMaybe<Scalars['Boolean']>;
  readonly quality: InputMaybe<Scalars['Int']>;
};

type JSONQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['JSON']>;
  readonly glob: InputMaybe<Scalars['JSON']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly ne: InputMaybe<Scalars['JSON']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly regex: InputMaybe<Scalars['JSON']>;
};

type MarkdownExcerptFormats =
  | 'HTML'
  | 'MARKDOWN'
  | 'PLAIN';

type MarkdownHeading = {
  readonly depth: Maybe<Scalars['Int']>;
  readonly id: Maybe<Scalars['String']>;
  readonly value: Maybe<Scalars['String']>;
};

type MarkdownHeadingFieldSelector = {
  readonly depth: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly value: InputMaybe<FieldSelectorEnum>;
};

type MarkdownHeadingFilterInput = {
  readonly depth: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly value: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownHeadingFilterListInput = {
  readonly elemMatch: InputMaybe<MarkdownHeadingFilterInput>;
};

type MarkdownHeadingLevels =
  | 'h1'
  | 'h2'
  | 'h3'
  | 'h4'
  | 'h5'
  | 'h6';

type MarkdownHeadingSortInput = {
  readonly depth: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly value: InputMaybe<SortOrderEnum>;
};

type MarkdownRemark = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly excerpt: Maybe<Scalars['String']>;
  readonly excerptAst: Maybe<Scalars['JSON']>;
  readonly frontmatter: Maybe<MarkdownRemarkFrontmatter>;
  readonly headings: Maybe<ReadonlyArray<Maybe<MarkdownHeading>>>;
  readonly html: Maybe<Scalars['String']>;
  readonly htmlAst: Maybe<Scalars['JSON']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly rawMarkdownBody: Maybe<Scalars['String']>;
  readonly tableOfContents: Maybe<Scalars['String']>;
  readonly timeToRead: Maybe<Scalars['Int']>;
  readonly wordCount: Maybe<MarkdownWordCount>;
};


type MarkdownRemark_excerptArgs = {
  format?: InputMaybe<MarkdownExcerptFormats>;
  pruneLength?: InputMaybe<Scalars['Int']>;
  truncate?: InputMaybe<Scalars['Boolean']>;
};


type MarkdownRemark_excerptAstArgs = {
  pruneLength?: InputMaybe<Scalars['Int']>;
  truncate?: InputMaybe<Scalars['Boolean']>;
};


type MarkdownRemark_headingsArgs = {
  depth: InputMaybe<MarkdownHeadingLevels>;
};


type MarkdownRemark_tableOfContentsArgs = {
  absolute?: InputMaybe<Scalars['Boolean']>;
  heading: InputMaybe<Scalars['String']>;
  maxDepth: InputMaybe<Scalars['Int']>;
  pathToSlugField?: InputMaybe<Scalars['String']>;
};

type MarkdownRemarkConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<MarkdownRemarkEdge>;
  readonly group: ReadonlyArray<MarkdownRemarkGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<MarkdownRemark>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type MarkdownRemarkConnection_distinctArgs = {
  field: MarkdownRemarkFieldSelector;
};


type MarkdownRemarkConnection_groupArgs = {
  field: MarkdownRemarkFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type MarkdownRemarkConnection_maxArgs = {
  field: MarkdownRemarkFieldSelector;
};


type MarkdownRemarkConnection_minArgs = {
  field: MarkdownRemarkFieldSelector;
};


type MarkdownRemarkConnection_sumArgs = {
  field: MarkdownRemarkFieldSelector;
};

type MarkdownRemarkEdge = {
  readonly next: Maybe<MarkdownRemark>;
  readonly node: MarkdownRemark;
  readonly previous: Maybe<MarkdownRemark>;
};

type MarkdownRemarkFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly excerpt: InputMaybe<FieldSelectorEnum>;
  readonly excerptAst: InputMaybe<FieldSelectorEnum>;
  readonly frontmatter: InputMaybe<MarkdownRemarkFrontmatterFieldSelector>;
  readonly headings: InputMaybe<MarkdownHeadingFieldSelector>;
  readonly html: InputMaybe<FieldSelectorEnum>;
  readonly htmlAst: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly rawMarkdownBody: InputMaybe<FieldSelectorEnum>;
  readonly tableOfContents: InputMaybe<FieldSelectorEnum>;
  readonly timeToRead: InputMaybe<FieldSelectorEnum>;
  readonly wordCount: InputMaybe<MarkdownWordCountFieldSelector>;
};

type MarkdownRemarkFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly excerpt: InputMaybe<StringQueryOperatorInput>;
  readonly excerptAst: InputMaybe<JSONQueryOperatorInput>;
  readonly frontmatter: InputMaybe<MarkdownRemarkFrontmatterFilterInput>;
  readonly headings: InputMaybe<MarkdownHeadingFilterListInput>;
  readonly html: InputMaybe<StringQueryOperatorInput>;
  readonly htmlAst: InputMaybe<JSONQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly rawMarkdownBody: InputMaybe<StringQueryOperatorInput>;
  readonly tableOfContents: InputMaybe<StringQueryOperatorInput>;
  readonly timeToRead: InputMaybe<IntQueryOperatorInput>;
  readonly wordCount: InputMaybe<MarkdownWordCountFilterInput>;
};

type MarkdownRemarkFilterListInput = {
  readonly elemMatch: InputMaybe<MarkdownRemarkFilterInput>;
};

type MarkdownRemarkFrontmatter = {
  readonly title: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterFieldSelector = {
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterFilterInput = {
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterSortInput = {
  readonly title: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<MarkdownRemarkEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<MarkdownRemarkGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<MarkdownRemark>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type MarkdownRemarkGroupConnection_distinctArgs = {
  field: MarkdownRemarkFieldSelector;
};


type MarkdownRemarkGroupConnection_groupArgs = {
  field: MarkdownRemarkFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type MarkdownRemarkGroupConnection_maxArgs = {
  field: MarkdownRemarkFieldSelector;
};


type MarkdownRemarkGroupConnection_minArgs = {
  field: MarkdownRemarkFieldSelector;
};


type MarkdownRemarkGroupConnection_sumArgs = {
  field: MarkdownRemarkFieldSelector;
};

type MarkdownRemarkSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly excerpt: InputMaybe<SortOrderEnum>;
  readonly excerptAst: InputMaybe<SortOrderEnum>;
  readonly frontmatter: InputMaybe<MarkdownRemarkFrontmatterSortInput>;
  readonly headings: InputMaybe<MarkdownHeadingSortInput>;
  readonly html: InputMaybe<SortOrderEnum>;
  readonly htmlAst: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly rawMarkdownBody: InputMaybe<SortOrderEnum>;
  readonly tableOfContents: InputMaybe<SortOrderEnum>;
  readonly timeToRead: InputMaybe<SortOrderEnum>;
  readonly wordCount: InputMaybe<MarkdownWordCountSortInput>;
};

type MarkdownWordCount = {
  readonly paragraphs: Maybe<Scalars['Int']>;
  readonly sentences: Maybe<Scalars['Int']>;
  readonly words: Maybe<Scalars['Int']>;
};

type MarkdownWordCountFieldSelector = {
  readonly paragraphs: InputMaybe<FieldSelectorEnum>;
  readonly sentences: InputMaybe<FieldSelectorEnum>;
  readonly words: InputMaybe<FieldSelectorEnum>;
};

type MarkdownWordCountFilterInput = {
  readonly paragraphs: InputMaybe<IntQueryOperatorInput>;
  readonly sentences: InputMaybe<IntQueryOperatorInput>;
  readonly words: InputMaybe<IntQueryOperatorInput>;
};

type MarkdownWordCountSortInput = {
  readonly paragraphs: InputMaybe<SortOrderEnum>;
  readonly sentences: InputMaybe<SortOrderEnum>;
  readonly words: InputMaybe<SortOrderEnum>;
};

type Mdx = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly excerpt: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly tableOfContents: Maybe<Scalars['JSON']>;
};


type Mdx_excerptArgs = {
  pruneLength?: InputMaybe<Scalars['Int']>;
};


type Mdx_tableOfContentsArgs = {
  maxDepth: InputMaybe<Scalars['Int']>;
};

type MdxConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<MdxEdge>;
  readonly group: ReadonlyArray<MdxGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Mdx>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type MdxConnection_distinctArgs = {
  field: MdxFieldSelector;
};


type MdxConnection_groupArgs = {
  field: MdxFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type MdxConnection_maxArgs = {
  field: MdxFieldSelector;
};


type MdxConnection_minArgs = {
  field: MdxFieldSelector;
};


type MdxConnection_sumArgs = {
  field: MdxFieldSelector;
};

type MdxEdge = {
  readonly next: Maybe<Mdx>;
  readonly node: Mdx;
  readonly previous: Maybe<Mdx>;
};

type MdxFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly excerpt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly tableOfContents: InputMaybe<FieldSelectorEnum>;
};

type MdxFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly excerpt: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly tableOfContents: InputMaybe<JSONQueryOperatorInput>;
};

type MdxGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<MdxEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<MdxGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Mdx>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type MdxGroupConnection_distinctArgs = {
  field: MdxFieldSelector;
};


type MdxGroupConnection_groupArgs = {
  field: MdxFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type MdxGroupConnection_maxArgs = {
  field: MdxFieldSelector;
};


type MdxGroupConnection_minArgs = {
  field: MdxFieldSelector;
};


type MdxGroupConnection_sumArgs = {
  field: MdxFieldSelector;
};

type MdxSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly excerpt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly tableOfContents: InputMaybe<SortOrderEnum>;
};

/** Node Interface */
type Node = {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type NodeFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type NodeFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type NodeFilterListInput = {
  readonly elemMatch: InputMaybe<NodeFilterInput>;
};

type NodeSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type PNGOptions = {
  readonly compressionSpeed: InputMaybe<Scalars['Int']>;
  readonly quality: InputMaybe<Scalars['Int']>;
};

type PageInfo = {
  readonly currentPage: Scalars['Int'];
  readonly hasNextPage: Scalars['Boolean'];
  readonly hasPreviousPage: Scalars['Boolean'];
  readonly itemCount: Scalars['Int'];
  readonly pageCount: Scalars['Int'];
  readonly perPage: Maybe<Scalars['Int']>;
  readonly totalCount: Scalars['Int'];
};

type Potrace = {
  readonly alphaMax: InputMaybe<Scalars['Float']>;
  readonly background: InputMaybe<Scalars['String']>;
  readonly blackOnWhite: InputMaybe<Scalars['Boolean']>;
  readonly color: InputMaybe<Scalars['String']>;
  readonly optCurve: InputMaybe<Scalars['Boolean']>;
  readonly optTolerance: InputMaybe<Scalars['Float']>;
  readonly threshold: InputMaybe<Scalars['Int']>;
  readonly turdSize: InputMaybe<Scalars['Float']>;
  readonly turnPolicy: InputMaybe<PotraceTurnPolicy>;
};

type PotraceTurnPolicy =
  | 'black'
  | 'left'
  | 'majority'
  | 'minority'
  | 'right'
  | 'white';

type Query = {
  readonly allContentfulAsset: ContentfulAssetConnection;
  readonly allContentfulBlockBanner: ContentfulBlockBannerConnection;
  readonly allContentfulBlockFaq: ContentfulBlockFaqConnection;
  readonly allContentfulBlockFaqQuestion: ContentfulBlockFaqQuestionConnection;
  readonly allContentfulBlockFeaturedBenefits: ContentfulBlockFeaturedBenefitsConnection;
  readonly allContentfulBlockFeaturedServices: ContentfulBlockFeaturedServicesConnection;
  readonly allContentfulBlockFeaturedServicesHome: ContentfulBlockFeaturedServicesHomeConnection;
  readonly allContentfulBlockFeaturedTestimonials: ContentfulBlockFeaturedTestimonialsConnection;
  readonly allContentfulBlockForm: ContentfulBlockFormConnection;
  readonly allContentfulBlockFormDescriptionTextNode: contentfulBlockFormDescriptionTextNodeConnection;
  readonly allContentfulBlockMediaText: ContentfulBlockMediaTextConnection;
  readonly allContentfulBlockMissionStatement: ContentfulBlockMissionStatementConnection;
  readonly allContentfulBlockMissionStatementMissionDescriptionTextNode: contentfulBlockMissionStatementMissionDescriptionTextNodeConnection;
  readonly allContentfulBlockMissionStatementVisionDescriptionTextNode: contentfulBlockMissionStatementVisionDescriptionTextNodeConnection;
  readonly allContentfulBlockNewHero: ContentfulBlockNewHeroConnection;
  readonly allContentfulBlockNewHeroButtonJsonNode: contentfulBlockNewHeroButtonJsonNodeConnection;
  readonly allContentfulBlockNewHeroWinsJsonNode: contentfulBlockNewHeroWinsJsonNodeConnection;
  readonly allContentfulBlockPageHeader: ContentfulBlockPageHeaderConnection;
  readonly allContentfulBlockText: ContentfulBlockTextConnection;
  readonly allContentfulBlockVisualList: ContentfulBlockVisualListConnection;
  readonly allContentfulCard: ContentfulCardConnection;
  readonly allContentfulContentType: ContentfulContentTypeConnection;
  readonly allContentfulEntry: ContentfulEntryConnection;
  readonly allContentfulHeaderV2: ContentfulHeaderV2Connection;
  readonly allContentfulHeaderV2HeroV2TextTextNode: contentfulHeaderV2HeroV2TextTextNodeConnection;
  readonly allContentfulLink: ContentfulLinkConnection;
  readonly allContentfulPage: ContentfulPageConnection;
  readonly allContentfulPageSeoDescriptionTextNode: contentfulPageSeoDescriptionTextNodeConnection;
  readonly allContentfulPageSeoOpenGraphDescriptionTextNode: contentfulPageSeoOpenGraphDescriptionTextNodeConnection;
  readonly allContentfulPageSeoTwitterDescriptionTextNode: contentfulPageSeoTwitterDescriptionTextNodeConnection;
  readonly allContentfulPost: ContentfulPostConnection;
  readonly allContentfulPostSeoDescriptionTextNode: contentfulPostSeoDescriptionTextNodeConnection;
  readonly allContentfulPostSeoOpenGraphDescriptionTextNode: contentfulPostSeoOpenGraphDescriptionTextNodeConnection;
  readonly allContentfulPostSeoTwitterDescriptionTextNode: contentfulPostSeoTwitterDescriptionTextNodeConnection;
  readonly allContentfulSiteSettings: ContentfulSiteSettingsConnection;
  readonly allContentfulTestimonial: ContentfulTestimonialConnection;
  readonly allContentfulTestimonialQuoteTextNode: contentfulTestimonialQuoteTextNodeConnection;
  readonly allDirectory: DirectoryConnection;
  readonly allFile: FileConnection;
  readonly allImageSharp: ImageSharpConnection;
  readonly allMarkdownRemark: MarkdownRemarkConnection;
  readonly allMdx: MdxConnection;
  readonly allSite: SiteConnection;
  readonly allSiteBuildMetadata: SiteBuildMetadataConnection;
  readonly allSiteFunction: SiteFunctionConnection;
  readonly allSitePage: SitePageConnection;
  readonly allSitePlugin: SitePluginConnection;
  readonly contentfulAsset: Maybe<ContentfulAsset>;
  readonly contentfulBlockBanner: Maybe<ContentfulBlockBanner>;
  readonly contentfulBlockFaq: Maybe<ContentfulBlockFaq>;
  readonly contentfulBlockFaqQuestion: Maybe<ContentfulBlockFaqQuestion>;
  readonly contentfulBlockFeaturedBenefits: Maybe<ContentfulBlockFeaturedBenefits>;
  readonly contentfulBlockFeaturedServices: Maybe<ContentfulBlockFeaturedServices>;
  readonly contentfulBlockFeaturedServicesHome: Maybe<ContentfulBlockFeaturedServicesHome>;
  readonly contentfulBlockFeaturedTestimonials: Maybe<ContentfulBlockFeaturedTestimonials>;
  readonly contentfulBlockForm: Maybe<ContentfulBlockForm>;
  readonly contentfulBlockFormDescriptionTextNode: Maybe<contentfulBlockFormDescriptionTextNode>;
  readonly contentfulBlockMediaText: Maybe<ContentfulBlockMediaText>;
  readonly contentfulBlockMissionStatement: Maybe<ContentfulBlockMissionStatement>;
  readonly contentfulBlockMissionStatementMissionDescriptionTextNode: Maybe<contentfulBlockMissionStatementMissionDescriptionTextNode>;
  readonly contentfulBlockMissionStatementVisionDescriptionTextNode: Maybe<contentfulBlockMissionStatementVisionDescriptionTextNode>;
  readonly contentfulBlockNewHero: Maybe<ContentfulBlockNewHero>;
  readonly contentfulBlockNewHeroButtonJsonNode: Maybe<contentfulBlockNewHeroButtonJsonNode>;
  readonly contentfulBlockNewHeroWinsJsonNode: Maybe<contentfulBlockNewHeroWinsJsonNode>;
  readonly contentfulBlockPageHeader: Maybe<ContentfulBlockPageHeader>;
  readonly contentfulBlockText: Maybe<ContentfulBlockText>;
  readonly contentfulBlockVisualList: Maybe<ContentfulBlockVisualList>;
  readonly contentfulCard: Maybe<ContentfulCard>;
  readonly contentfulContentType: Maybe<ContentfulContentType>;
  readonly contentfulEntry: Maybe<ContentfulEntry>;
  readonly contentfulHeaderV2: Maybe<ContentfulHeaderV2>;
  readonly contentfulHeaderV2HeroV2TextTextNode: Maybe<contentfulHeaderV2HeroV2TextTextNode>;
  readonly contentfulLink: Maybe<ContentfulLink>;
  readonly contentfulPage: Maybe<ContentfulPage>;
  readonly contentfulPageSeoDescriptionTextNode: Maybe<contentfulPageSeoDescriptionTextNode>;
  readonly contentfulPageSeoOpenGraphDescriptionTextNode: Maybe<contentfulPageSeoOpenGraphDescriptionTextNode>;
  readonly contentfulPageSeoTwitterDescriptionTextNode: Maybe<contentfulPageSeoTwitterDescriptionTextNode>;
  readonly contentfulPost: Maybe<ContentfulPost>;
  readonly contentfulPostSeoDescriptionTextNode: Maybe<contentfulPostSeoDescriptionTextNode>;
  readonly contentfulPostSeoOpenGraphDescriptionTextNode: Maybe<contentfulPostSeoOpenGraphDescriptionTextNode>;
  readonly contentfulPostSeoTwitterDescriptionTextNode: Maybe<contentfulPostSeoTwitterDescriptionTextNode>;
  readonly contentfulSiteSettings: Maybe<ContentfulSiteSettings>;
  readonly contentfulTestimonial: Maybe<ContentfulTestimonial>;
  readonly contentfulTestimonialQuoteTextNode: Maybe<contentfulTestimonialQuoteTextNode>;
  readonly directory: Maybe<Directory>;
  readonly file: Maybe<File>;
  readonly imageSharp: Maybe<ImageSharp>;
  readonly markdownRemark: Maybe<MarkdownRemark>;
  readonly mdx: Maybe<Mdx>;
  readonly site: Maybe<Site>;
  readonly siteBuildMetadata: Maybe<SiteBuildMetadata>;
  readonly siteFunction: Maybe<SiteFunction>;
  readonly sitePage: Maybe<SitePage>;
  readonly sitePlugin: Maybe<SitePlugin>;
};


type Query_allContentfulAssetArgs = {
  filter: InputMaybe<ContentfulAssetFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulAssetSortInput>>>;
};


type Query_allContentfulBlockBannerArgs = {
  filter: InputMaybe<ContentfulBlockBannerFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulBlockBannerSortInput>>>;
};


type Query_allContentfulBlockFaqArgs = {
  filter: InputMaybe<ContentfulBlockFaqFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulBlockFaqSortInput>>>;
};


type Query_allContentfulBlockFaqQuestionArgs = {
  filter: InputMaybe<ContentfulBlockFaqQuestionFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulBlockFaqQuestionSortInput>>>;
};


type Query_allContentfulBlockFeaturedBenefitsArgs = {
  filter: InputMaybe<ContentfulBlockFeaturedBenefitsFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulBlockFeaturedBenefitsSortInput>>>;
};


type Query_allContentfulBlockFeaturedServicesArgs = {
  filter: InputMaybe<ContentfulBlockFeaturedServicesFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulBlockFeaturedServicesSortInput>>>;
};


type Query_allContentfulBlockFeaturedServicesHomeArgs = {
  filter: InputMaybe<ContentfulBlockFeaturedServicesHomeFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulBlockFeaturedServicesHomeSortInput>>>;
};


type Query_allContentfulBlockFeaturedTestimonialsArgs = {
  filter: InputMaybe<ContentfulBlockFeaturedTestimonialsFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulBlockFeaturedTestimonialsSortInput>>>;
};


type Query_allContentfulBlockFormArgs = {
  filter: InputMaybe<ContentfulBlockFormFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulBlockFormSortInput>>>;
};


type Query_allContentfulBlockFormDescriptionTextNodeArgs = {
  filter: InputMaybe<contentfulBlockFormDescriptionTextNodeFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<contentfulBlockFormDescriptionTextNodeSortInput>>>;
};


type Query_allContentfulBlockMediaTextArgs = {
  filter: InputMaybe<ContentfulBlockMediaTextFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulBlockMediaTextSortInput>>>;
};


type Query_allContentfulBlockMissionStatementArgs = {
  filter: InputMaybe<ContentfulBlockMissionStatementFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulBlockMissionStatementSortInput>>>;
};


type Query_allContentfulBlockMissionStatementMissionDescriptionTextNodeArgs = {
  filter: InputMaybe<contentfulBlockMissionStatementMissionDescriptionTextNodeFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<contentfulBlockMissionStatementMissionDescriptionTextNodeSortInput>>>;
};


type Query_allContentfulBlockMissionStatementVisionDescriptionTextNodeArgs = {
  filter: InputMaybe<contentfulBlockMissionStatementVisionDescriptionTextNodeFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<contentfulBlockMissionStatementVisionDescriptionTextNodeSortInput>>>;
};


type Query_allContentfulBlockNewHeroArgs = {
  filter: InputMaybe<ContentfulBlockNewHeroFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulBlockNewHeroSortInput>>>;
};


type Query_allContentfulBlockNewHeroButtonJsonNodeArgs = {
  filter: InputMaybe<contentfulBlockNewHeroButtonJsonNodeFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<contentfulBlockNewHeroButtonJsonNodeSortInput>>>;
};


type Query_allContentfulBlockNewHeroWinsJsonNodeArgs = {
  filter: InputMaybe<contentfulBlockNewHeroWinsJsonNodeFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<contentfulBlockNewHeroWinsJsonNodeSortInput>>>;
};


type Query_allContentfulBlockPageHeaderArgs = {
  filter: InputMaybe<ContentfulBlockPageHeaderFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulBlockPageHeaderSortInput>>>;
};


type Query_allContentfulBlockTextArgs = {
  filter: InputMaybe<ContentfulBlockTextFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulBlockTextSortInput>>>;
};


type Query_allContentfulBlockVisualListArgs = {
  filter: InputMaybe<ContentfulBlockVisualListFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulBlockVisualListSortInput>>>;
};


type Query_allContentfulCardArgs = {
  filter: InputMaybe<ContentfulCardFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulCardSortInput>>>;
};


type Query_allContentfulContentTypeArgs = {
  filter: InputMaybe<ContentfulContentTypeFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulContentTypeSortInput>>>;
};


type Query_allContentfulEntryArgs = {
  filter: InputMaybe<ContentfulEntryFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulEntrySortInput>>>;
};


type Query_allContentfulHeaderV2Args = {
  filter: InputMaybe<ContentfulHeaderV2FilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulHeaderV2SortInput>>>;
};


type Query_allContentfulHeaderV2HeroV2TextTextNodeArgs = {
  filter: InputMaybe<contentfulHeaderV2HeroV2TextTextNodeFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<contentfulHeaderV2HeroV2TextTextNodeSortInput>>>;
};


type Query_allContentfulLinkArgs = {
  filter: InputMaybe<ContentfulLinkFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulLinkSortInput>>>;
};


type Query_allContentfulPageArgs = {
  filter: InputMaybe<ContentfulPageFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulPageSortInput>>>;
};


type Query_allContentfulPageSeoDescriptionTextNodeArgs = {
  filter: InputMaybe<contentfulPageSeoDescriptionTextNodeFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<contentfulPageSeoDescriptionTextNodeSortInput>>>;
};


type Query_allContentfulPageSeoOpenGraphDescriptionTextNodeArgs = {
  filter: InputMaybe<contentfulPageSeoOpenGraphDescriptionTextNodeFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<contentfulPageSeoOpenGraphDescriptionTextNodeSortInput>>>;
};


type Query_allContentfulPageSeoTwitterDescriptionTextNodeArgs = {
  filter: InputMaybe<contentfulPageSeoTwitterDescriptionTextNodeFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<contentfulPageSeoTwitterDescriptionTextNodeSortInput>>>;
};


type Query_allContentfulPostArgs = {
  filter: InputMaybe<ContentfulPostFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulPostSortInput>>>;
};


type Query_allContentfulPostSeoDescriptionTextNodeArgs = {
  filter: InputMaybe<contentfulPostSeoDescriptionTextNodeFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<contentfulPostSeoDescriptionTextNodeSortInput>>>;
};


type Query_allContentfulPostSeoOpenGraphDescriptionTextNodeArgs = {
  filter: InputMaybe<contentfulPostSeoOpenGraphDescriptionTextNodeFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<contentfulPostSeoOpenGraphDescriptionTextNodeSortInput>>>;
};


type Query_allContentfulPostSeoTwitterDescriptionTextNodeArgs = {
  filter: InputMaybe<contentfulPostSeoTwitterDescriptionTextNodeFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<contentfulPostSeoTwitterDescriptionTextNodeSortInput>>>;
};


type Query_allContentfulSiteSettingsArgs = {
  filter: InputMaybe<ContentfulSiteSettingsFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulSiteSettingsSortInput>>>;
};


type Query_allContentfulTestimonialArgs = {
  filter: InputMaybe<ContentfulTestimonialFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulTestimonialSortInput>>>;
};


type Query_allContentfulTestimonialQuoteTextNodeArgs = {
  filter: InputMaybe<contentfulTestimonialQuoteTextNodeFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<contentfulTestimonialQuoteTextNodeSortInput>>>;
};


type Query_allDirectoryArgs = {
  filter: InputMaybe<DirectoryFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<DirectorySortInput>>>;
};


type Query_allFileArgs = {
  filter: InputMaybe<FileFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<FileSortInput>>>;
};


type Query_allImageSharpArgs = {
  filter: InputMaybe<ImageSharpFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ImageSharpSortInput>>>;
};


type Query_allMarkdownRemarkArgs = {
  filter: InputMaybe<MarkdownRemarkFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<MarkdownRemarkSortInput>>>;
};


type Query_allMdxArgs = {
  filter: InputMaybe<MdxFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<MdxSortInput>>>;
};


type Query_allSiteArgs = {
  filter: InputMaybe<SiteFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteSortInput>>>;
};


type Query_allSiteBuildMetadataArgs = {
  filter: InputMaybe<SiteBuildMetadataFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteBuildMetadataSortInput>>>;
};


type Query_allSiteFunctionArgs = {
  filter: InputMaybe<SiteFunctionFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteFunctionSortInput>>>;
};


type Query_allSitePageArgs = {
  filter: InputMaybe<SitePageFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SitePageSortInput>>>;
};


type Query_allSitePluginArgs = {
  filter: InputMaybe<SitePluginFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SitePluginSortInput>>>;
};


type Query_contentfulAssetArgs = {
  children: InputMaybe<NodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  file: InputMaybe<ContentfulAssetFileFilterInput>;
  filename: InputMaybe<StringQueryOperatorInput>;
  filesize: InputMaybe<IntQueryOperatorInput>;
  gatsbyImage: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  height: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mimeType: InputMaybe<StringQueryOperatorInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  placeholderUrl: InputMaybe<StringQueryOperatorInput>;
  publicUrl: InputMaybe<StringQueryOperatorInput>;
  resize: InputMaybe<RemoteFileResizeFilterInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  spaceId: InputMaybe<StringQueryOperatorInput>;
  sys: InputMaybe<ContentfulAssetSysFilterInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
  url: InputMaybe<StringQueryOperatorInput>;
  width: InputMaybe<IntQueryOperatorInput>;
};


type Query_contentfulBlockBannerArgs = {
  children: InputMaybe<NodeFilterListInput>;
  contentString: InputMaybe<StringQueryOperatorInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  ctaButton: InputMaybe<ContentfulPageFilterInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  page: InputMaybe<ContentfulPageFilterListInput>;
  parent: InputMaybe<NodeFilterInput>;
  settingVariant: InputMaybe<StringQueryOperatorInput>;
  spaceId: InputMaybe<StringQueryOperatorInput>;
  sys: InputMaybe<ContentfulBlockBannerSysFilterInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_contentfulBlockFaqArgs = {
  children: InputMaybe<NodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  page: InputMaybe<ContentfulPageFilterListInput>;
  parent: InputMaybe<NodeFilterInput>;
  photo: InputMaybe<ContentfulAssetFilterInput>;
  questions: InputMaybe<ContentfulBlockFaqQuestionFilterListInput>;
  settingVariant: InputMaybe<StringQueryOperatorInput>;
  spaceId: InputMaybe<StringQueryOperatorInput>;
  sys: InputMaybe<ContentfulBlockFaqSysFilterInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_contentfulBlockFaqQuestionArgs = {
  answer: InputMaybe<ContentfulBlockFaqQuestionAnswerFilterInput>;
  block__faq: InputMaybe<ContentfulBlockFaqFilterListInput>;
  children: InputMaybe<NodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  question: InputMaybe<StringQueryOperatorInput>;
  spaceId: InputMaybe<StringQueryOperatorInput>;
  sys: InputMaybe<ContentfulBlockFaqQuestionSysFilterInput>;
  type: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_contentfulBlockFeaturedBenefitsArgs = {
  benefits: InputMaybe<ContentfulCardFilterListInput>;
  children: InputMaybe<NodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  page: InputMaybe<ContentfulPageFilterListInput>;
  parent: InputMaybe<NodeFilterInput>;
  spaceId: InputMaybe<StringQueryOperatorInput>;
  sys: InputMaybe<ContentfulBlockFeaturedBenefitsSysFilterInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_contentfulBlockFeaturedServicesArgs = {
  children: InputMaybe<NodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  page: InputMaybe<ContentfulPageFilterListInput>;
  parent: InputMaybe<NodeFilterInput>;
  services: InputMaybe<ContentfulCardFilterListInput>;
  spaceId: InputMaybe<StringQueryOperatorInput>;
  sys: InputMaybe<ContentfulBlockFeaturedServicesSysFilterInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_contentfulBlockFeaturedServicesHomeArgs = {
  children: InputMaybe<NodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  page: InputMaybe<ContentfulPageFilterListInput>;
  parent: InputMaybe<NodeFilterInput>;
  services: InputMaybe<ContentfulCardFilterListInput>;
  spaceId: InputMaybe<StringQueryOperatorInput>;
  subtitle: InputMaybe<StringQueryOperatorInput>;
  sys: InputMaybe<ContentfulBlockFeaturedServicesHomeSysFilterInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_contentfulBlockFeaturedTestimonialsArgs = {
  children: InputMaybe<NodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  page: InputMaybe<ContentfulPageFilterListInput>;
  parent: InputMaybe<NodeFilterInput>;
  spaceId: InputMaybe<StringQueryOperatorInput>;
  sys: InputMaybe<ContentfulBlockFeaturedTestimonialsSysFilterInput>;
  testimonials: InputMaybe<ContentfulTestimonialFilterListInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_contentfulBlockFormArgs = {
  childContentfulBlockFormDescriptionTextNode: InputMaybe<contentfulBlockFormDescriptionTextNodeFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenContentfulBlockFormDescriptionTextNode: InputMaybe<contentfulBlockFormDescriptionTextNodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  description: InputMaybe<contentfulBlockFormDescriptionTextNodeFilterInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  spaceId: InputMaybe<StringQueryOperatorInput>;
  sys: InputMaybe<ContentfulBlockFormSysFilterInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_contentfulBlockFormDescriptionTextNodeArgs = {
  childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  sys: InputMaybe<contentfulBlockFormDescriptionTextNodeSysFilterInput>;
};


type Query_contentfulBlockMediaTextArgs = {
  children: InputMaybe<NodeFilterListInput>;
  content: InputMaybe<ContentfulBlockMediaTextContentFilterInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  imageSubCaption: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  page: InputMaybe<ContentfulPageFilterListInput>;
  parent: InputMaybe<NodeFilterInput>;
  photo: InputMaybe<ContentfulAssetFilterInput>;
  settingVariant: InputMaybe<StringQueryOperatorInput>;
  spaceId: InputMaybe<StringQueryOperatorInput>;
  sys: InputMaybe<ContentfulBlockMediaTextSysFilterInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_contentfulBlockMissionStatementArgs = {
  childContentfulBlockMissionStatementMissionDescriptionTextNode: InputMaybe<contentfulBlockMissionStatementMissionDescriptionTextNodeFilterInput>;
  childContentfulBlockMissionStatementVisionDescriptionTextNode: InputMaybe<contentfulBlockMissionStatementVisionDescriptionTextNodeFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenContentfulBlockMissionStatementMissionDescriptionTextNode: InputMaybe<contentfulBlockMissionStatementMissionDescriptionTextNodeFilterListInput>;
  childrenContentfulBlockMissionStatementVisionDescriptionTextNode: InputMaybe<contentfulBlockMissionStatementVisionDescriptionTextNodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  missionDescription: InputMaybe<contentfulBlockMissionStatementMissionDescriptionTextNodeFilterInput>;
  missionTitle: InputMaybe<StringQueryOperatorInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  page: InputMaybe<ContentfulPageFilterListInput>;
  parent: InputMaybe<NodeFilterInput>;
  spaceId: InputMaybe<StringQueryOperatorInput>;
  sys: InputMaybe<ContentfulBlockMissionStatementSysFilterInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
  visionDescription: InputMaybe<contentfulBlockMissionStatementVisionDescriptionTextNodeFilterInput>;
  visionTitle: InputMaybe<StringQueryOperatorInput>;
};


type Query_contentfulBlockMissionStatementMissionDescriptionTextNodeArgs = {
  childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  missionDescription: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  sys: InputMaybe<contentfulBlockMissionStatementMissionDescriptionTextNodeSysFilterInput>;
};


type Query_contentfulBlockMissionStatementVisionDescriptionTextNodeArgs = {
  childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  sys: InputMaybe<contentfulBlockMissionStatementVisionDescriptionTextNodeSysFilterInput>;
  visionDescription: InputMaybe<StringQueryOperatorInput>;
};


type Query_contentfulBlockNewHeroArgs = {
  bodyText: InputMaybe<ContentfulBlockNewHeroBodyTextFilterInput>;
  bottomTitle: InputMaybe<StringQueryOperatorInput>;
  button: InputMaybe<contentfulBlockNewHeroButtonJsonNodeFilterInput>;
  childContentfulBlockNewHeroButtonJsonNode: InputMaybe<contentfulBlockNewHeroButtonJsonNodeFilterInput>;
  childContentfulBlockNewHeroWinsJsonNode: InputMaybe<contentfulBlockNewHeroWinsJsonNodeFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenContentfulBlockNewHeroButtonJsonNode: InputMaybe<contentfulBlockNewHeroButtonJsonNodeFilterListInput>;
  childrenContentfulBlockNewHeroWinsJsonNode: InputMaybe<contentfulBlockNewHeroWinsJsonNodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mediaItems: InputMaybe<ContentfulAssetFilterListInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  page: InputMaybe<ContentfulPageFilterListInput>;
  parent: InputMaybe<NodeFilterInput>;
  spaceId: InputMaybe<StringQueryOperatorInput>;
  sys: InputMaybe<ContentfulBlockNewHeroSysFilterInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
  wins: InputMaybe<contentfulBlockNewHeroWinsJsonNodeFilterInput>;
};


type Query_contentfulBlockNewHeroButtonJsonNodeArgs = {
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  label: InputMaybe<StringQueryOperatorInput>;
  link: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  sys: InputMaybe<contentfulBlockNewHeroButtonJsonNodeSysFilterInput>;
  variant: InputMaybe<StringQueryOperatorInput>;
};


type Query_contentfulBlockNewHeroWinsJsonNodeArgs = {
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  items: InputMaybe<contentfulBlockNewHeroWinsJsonNodeItemsFilterListInput>;
  parent: InputMaybe<NodeFilterInput>;
  sys: InputMaybe<contentfulBlockNewHeroWinsJsonNodeSysFilterInput>;
};


type Query_contentfulBlockPageHeaderArgs = {
  children: InputMaybe<NodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  image: InputMaybe<ContentfulAssetFilterInput>;
  internal: InputMaybe<InternalFilterInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  page: InputMaybe<ContentfulPageFilterListInput>;
  parent: InputMaybe<NodeFilterInput>;
  settingVariant: InputMaybe<StringQueryOperatorInput>;
  spaceId: InputMaybe<StringQueryOperatorInput>;
  sys: InputMaybe<ContentfulBlockPageHeaderSysFilterInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_contentfulBlockTextArgs = {
  children: InputMaybe<NodeFilterListInput>;
  content: InputMaybe<ContentfulBlockTextContentFilterInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  page: InputMaybe<ContentfulPageFilterListInput>;
  parent: InputMaybe<NodeFilterInput>;
  settingVariant: InputMaybe<StringQueryOperatorInput>;
  spaceId: InputMaybe<StringQueryOperatorInput>;
  sys: InputMaybe<ContentfulBlockTextSysFilterInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_contentfulBlockVisualListArgs = {
  children: InputMaybe<NodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  items: InputMaybe<ContentfulCardFilterListInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  page: InputMaybe<ContentfulPageFilterListInput>;
  parent: InputMaybe<NodeFilterInput>;
  settingVariant: InputMaybe<StringQueryOperatorInput>;
  spaceId: InputMaybe<StringQueryOperatorInput>;
  sys: InputMaybe<ContentfulBlockVisualListSysFilterInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_contentfulCardArgs = {
  block__featured_benefits: InputMaybe<ContentfulBlockFeaturedBenefitsFilterListInput>;
  block__featured_services: InputMaybe<ContentfulBlockFeaturedServicesFilterListInput>;
  block__featured_services__home_: InputMaybe<ContentfulBlockFeaturedServicesHomeFilterListInput>;
  block__visual_list: InputMaybe<ContentfulBlockVisualListFilterListInput>;
  children: InputMaybe<NodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  description: InputMaybe<ContentfulCardDescriptionFilterInput>;
  icon: InputMaybe<ContentfulAssetFilterInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  image: InputMaybe<ContentfulAssetFilterInput>;
  internal: InputMaybe<InternalFilterInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  page: InputMaybe<ContentfulPageFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  spaceId: InputMaybe<StringQueryOperatorInput>;
  subtitle: InputMaybe<StringQueryOperatorInput>;
  sys: InputMaybe<ContentfulCardSysFilterInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_contentfulContentTypeArgs = {
  children: InputMaybe<NodeFilterListInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  displayField: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  sys: InputMaybe<ContentfulContentTypeSysFilterInput>;
};


type Query_contentfulEntryArgs = {
  children: InputMaybe<NodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_contentfulHeaderV2Args = {
  childContentfulHeaderV2HeroV2TextTextNode: InputMaybe<contentfulHeaderV2HeroV2TextTextNodeFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenContentfulHeaderV2HeroV2TextTextNode: InputMaybe<contentfulHeaderV2HeroV2TextTextNodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  heroV2text: InputMaybe<contentfulHeaderV2HeroV2TextTextNodeFilterInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  spaceId: InputMaybe<StringQueryOperatorInput>;
  sys: InputMaybe<ContentfulHeaderV2SysFilterInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_contentfulHeaderV2HeroV2TextTextNodeArgs = {
  childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  heroV2text: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  sys: InputMaybe<contentfulHeaderV2HeroV2TextTextNodeSysFilterInput>;
};


type Query_contentfulLinkArgs = {
  children: InputMaybe<NodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  site_settings: InputMaybe<ContentfulSiteSettingsFilterListInput>;
  spaceId: InputMaybe<StringQueryOperatorInput>;
  sys: InputMaybe<ContentfulLinkSysFilterInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
  url: InputMaybe<StringQueryOperatorInput>;
};


type Query_contentfulPageArgs = {
  block__banner: InputMaybe<ContentfulBlockBannerFilterListInput>;
  body: InputMaybe<ContentfulPageBodyFilterInput>;
  card: InputMaybe<ContentfulCardFilterListInput>;
  childContentfulPageSeoDescriptionTextNode: InputMaybe<contentfulPageSeoDescriptionTextNodeFilterInput>;
  childContentfulPageSeoOpenGraphDescriptionTextNode: InputMaybe<contentfulPageSeoOpenGraphDescriptionTextNodeFilterInput>;
  childContentfulPageSeoTwitterDescriptionTextNode: InputMaybe<contentfulPageSeoTwitterDescriptionTextNodeFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenContentfulPageSeoDescriptionTextNode: InputMaybe<contentfulPageSeoDescriptionTextNodeFilterListInput>;
  childrenContentfulPageSeoOpenGraphDescriptionTextNode: InputMaybe<contentfulPageSeoOpenGraphDescriptionTextNodeFilterListInput>;
  childrenContentfulPageSeoTwitterDescriptionTextNode: InputMaybe<contentfulPageSeoTwitterDescriptionTextNodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  seoDescription: InputMaybe<contentfulPageSeoDescriptionTextNodeFilterInput>;
  seoMetaRobotsNofollow: InputMaybe<BooleanQueryOperatorInput>;
  seoMetaRobotsNoindex: InputMaybe<BooleanQueryOperatorInput>;
  seoOpenGraphDescription: InputMaybe<contentfulPageSeoOpenGraphDescriptionTextNodeFilterInput>;
  seoOpenGraphTitle: InputMaybe<StringQueryOperatorInput>;
  seoTitle: InputMaybe<StringQueryOperatorInput>;
  seoTwitterDescription: InputMaybe<contentfulPageSeoTwitterDescriptionTextNodeFilterInput>;
  seoTwitterTitle: InputMaybe<StringQueryOperatorInput>;
  site_settings: InputMaybe<ContentfulSiteSettingsFilterListInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  spaceId: InputMaybe<StringQueryOperatorInput>;
  sys: InputMaybe<ContentfulPageSysFilterInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_contentfulPageSeoDescriptionTextNodeArgs = {
  childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  seoDescription: InputMaybe<StringQueryOperatorInput>;
  sys: InputMaybe<contentfulPageSeoDescriptionTextNodeSysFilterInput>;
};


type Query_contentfulPageSeoOpenGraphDescriptionTextNodeArgs = {
  childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  seoOpenGraphDescription: InputMaybe<StringQueryOperatorInput>;
  sys: InputMaybe<contentfulPageSeoOpenGraphDescriptionTextNodeSysFilterInput>;
};


type Query_contentfulPageSeoTwitterDescriptionTextNodeArgs = {
  childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  seoTwitterDescription: InputMaybe<StringQueryOperatorInput>;
  sys: InputMaybe<contentfulPageSeoTwitterDescriptionTextNodeSysFilterInput>;
};


type Query_contentfulPostArgs = {
  body: InputMaybe<ContentfulPostBodyFilterInput>;
  childContentfulPostSeoDescriptionTextNode: InputMaybe<contentfulPostSeoDescriptionTextNodeFilterInput>;
  childContentfulPostSeoOpenGraphDescriptionTextNode: InputMaybe<contentfulPostSeoOpenGraphDescriptionTextNodeFilterInput>;
  childContentfulPostSeoTwitterDescriptionTextNode: InputMaybe<contentfulPostSeoTwitterDescriptionTextNodeFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenContentfulPostSeoDescriptionTextNode: InputMaybe<contentfulPostSeoDescriptionTextNodeFilterListInput>;
  childrenContentfulPostSeoOpenGraphDescriptionTextNode: InputMaybe<contentfulPostSeoOpenGraphDescriptionTextNodeFilterListInput>;
  childrenContentfulPostSeoTwitterDescriptionTextNode: InputMaybe<contentfulPostSeoTwitterDescriptionTextNodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  featuredImage: InputMaybe<ContentfulAssetFilterInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  page: InputMaybe<ContentfulPageFilterListInput>;
  parent: InputMaybe<NodeFilterInput>;
  publishDate: InputMaybe<DateQueryOperatorInput>;
  seoDescription: InputMaybe<contentfulPostSeoDescriptionTextNodeFilterInput>;
  seoKeywords: InputMaybe<StringQueryOperatorInput>;
  seoMetaRobotsNofollow: InputMaybe<BooleanQueryOperatorInput>;
  seoMetaRobotsNoindex: InputMaybe<BooleanQueryOperatorInput>;
  seoOpenGraphDescription: InputMaybe<contentfulPostSeoOpenGraphDescriptionTextNodeFilterInput>;
  seoOpenGraphImage: InputMaybe<ContentfulAssetFilterInput>;
  seoOpenGraphTitle: InputMaybe<StringQueryOperatorInput>;
  seoTitle: InputMaybe<StringQueryOperatorInput>;
  seoTwitterDescription: InputMaybe<contentfulPostSeoTwitterDescriptionTextNodeFilterInput>;
  seoTwitterImage: InputMaybe<ContentfulAssetFilterInput>;
  seoTwitterTitle: InputMaybe<StringQueryOperatorInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  spaceId: InputMaybe<StringQueryOperatorInput>;
  sys: InputMaybe<ContentfulPostSysFilterInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_contentfulPostSeoDescriptionTextNodeArgs = {
  childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  seoDescription: InputMaybe<StringQueryOperatorInput>;
  sys: InputMaybe<contentfulPostSeoDescriptionTextNodeSysFilterInput>;
};


type Query_contentfulPostSeoOpenGraphDescriptionTextNodeArgs = {
  childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  seoOpenGraphDescription: InputMaybe<StringQueryOperatorInput>;
  sys: InputMaybe<contentfulPostSeoOpenGraphDescriptionTextNodeSysFilterInput>;
};


type Query_contentfulPostSeoTwitterDescriptionTextNodeArgs = {
  childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  seoTwitterDescription: InputMaybe<StringQueryOperatorInput>;
  sys: InputMaybe<contentfulPostSeoTwitterDescriptionTextNodeSysFilterInput>;
};


type Query_contentfulSiteSettingsArgs = {
  children: InputMaybe<NodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  googleAnalyticsId: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  navigation: InputMaybe<ContentfulPageFilterListInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  siteFooterContent: InputMaybe<ContentfulSiteSettingsSiteFooterContentFilterInput>;
  siteHeaderCta: InputMaybe<ContentfulPageFilterInput>;
  siteLogo: InputMaybe<ContentfulAssetFilterInput>;
  siteSocialAccounts: InputMaybe<ContentfulLinkFilterListInput>;
  siteTitle: InputMaybe<StringQueryOperatorInput>;
  spaceId: InputMaybe<StringQueryOperatorInput>;
  subMenu: InputMaybe<ContentfulLinkFilterListInput>;
  sys: InputMaybe<ContentfulSiteSettingsSysFilterInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_contentfulTestimonialArgs = {
  block__featured_testimonials: InputMaybe<ContentfulBlockFeaturedTestimonialsFilterListInput>;
  category: InputMaybe<StringQueryOperatorInput>;
  childContentfulTestimonialQuoteTextNode: InputMaybe<contentfulTestimonialQuoteTextNodeFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenContentfulTestimonialQuoteTextNode: InputMaybe<contentfulTestimonialQuoteTextNodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  date: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  image: InputMaybe<ContentfulAssetFilterInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  quote: InputMaybe<contentfulTestimonialQuoteTextNodeFilterInput>;
  spaceId: InputMaybe<StringQueryOperatorInput>;
  sys: InputMaybe<ContentfulTestimonialSysFilterInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_contentfulTestimonialQuoteTextNodeArgs = {
  childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  quote: InputMaybe<StringQueryOperatorInput>;
  sys: InputMaybe<contentfulTestimonialQuoteTextNodeSysFilterInput>;
};


type Query_directoryArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_fileArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  blksize: InputMaybe<IntQueryOperatorInput>;
  blocks: InputMaybe<IntQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  childImageSharp: InputMaybe<ImageSharpFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenImageSharp: InputMaybe<ImageSharpFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  publicURL: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_imageSharpArgs = {
  children: InputMaybe<NodeFilterListInput>;
  fixed: InputMaybe<ImageSharpFixedFilterInput>;
  fluid: InputMaybe<ImageSharpFluidFilterInput>;
  gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  original: InputMaybe<ImageSharpOriginalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  resize: InputMaybe<ImageSharpResizeFilterInput>;
};


type Query_markdownRemarkArgs = {
  children: InputMaybe<NodeFilterListInput>;
  excerpt: InputMaybe<StringQueryOperatorInput>;
  excerptAst: InputMaybe<JSONQueryOperatorInput>;
  frontmatter: InputMaybe<MarkdownRemarkFrontmatterFilterInput>;
  headings: InputMaybe<MarkdownHeadingFilterListInput>;
  html: InputMaybe<StringQueryOperatorInput>;
  htmlAst: InputMaybe<JSONQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  rawMarkdownBody: InputMaybe<StringQueryOperatorInput>;
  tableOfContents: InputMaybe<StringQueryOperatorInput>;
  timeToRead: InputMaybe<IntQueryOperatorInput>;
  wordCount: InputMaybe<MarkdownWordCountFilterInput>;
};


type Query_mdxArgs = {
  children: InputMaybe<NodeFilterListInput>;
  excerpt: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  tableOfContents: InputMaybe<JSONQueryOperatorInput>;
};


type Query_siteArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  flags: InputMaybe<SiteFlagsFilterInput>;
  graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
  host: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  jsxRuntime: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pathPrefix: InputMaybe<StringQueryOperatorInput>;
  polyfill: InputMaybe<BooleanQueryOperatorInput>;
  port: InputMaybe<IntQueryOperatorInput>;
  siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
  trailingSlash: InputMaybe<StringQueryOperatorInput>;
};


type Query_siteBuildMetadataArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_siteFunctionArgs = {
  absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  functionRoute: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginName: InputMaybe<StringQueryOperatorInput>;
  relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};


type Query_sitePageArgs = {
  children: InputMaybe<NodeFilterListInput>;
  component: InputMaybe<StringQueryOperatorInput>;
  componentChunkName: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  internalComponentName: InputMaybe<StringQueryOperatorInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  pageContext: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  path: InputMaybe<StringQueryOperatorInput>;
  pluginCreator: InputMaybe<SitePluginFilterInput>;
};


type Query_sitePluginArgs = {
  browserAPIs: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  packageJson: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  resolve: InputMaybe<StringQueryOperatorInput>;
  ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  version: InputMaybe<StringQueryOperatorInput>;
};

/** Remote Interface */
type RemoteFile = {
  readonly filename: Scalars['String'];
  readonly filesize: Maybe<Scalars['Int']>;
  /** Data used in the <GatsbyImage /> component. See https://gatsby.dev/img for more info. */
  readonly gatsbyImage: Maybe<Scalars['GatsbyImageData']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly id: Scalars['ID'];
  readonly mimeType: Scalars['String'];
  readonly publicUrl: Scalars['String'];
  readonly resize: Maybe<RemoteFileResize>;
  readonly width: Maybe<Scalars['Int']>;
};


/** Remote Interface */
type RemoteFile_gatsbyImageArgs = {
  aspectRatio: InputMaybe<Scalars['Float']>;
  backgroundColor: InputMaybe<Scalars['String']>;
  breakpoints?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  cropFocus: InputMaybe<ReadonlyArray<InputMaybe<RemoteFileCropFocus>>>;
  fit?: InputMaybe<RemoteFileFit>;
  formats?: InputMaybe<ReadonlyArray<RemoteFileFormat>>;
  height: InputMaybe<Scalars['Int']>;
  layout?: InputMaybe<RemoteFileLayout>;
  outputPixelDensities?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  placeholder?: InputMaybe<RemoteFilePlaceholder>;
  quality?: InputMaybe<Scalars['Int']>;
  sizes: InputMaybe<Scalars['String']>;
  width: InputMaybe<Scalars['Int']>;
};


/** Remote Interface */
type RemoteFile_resizeArgs = {
  aspectRatio: InputMaybe<Scalars['Float']>;
  cropFocus: InputMaybe<ReadonlyArray<InputMaybe<RemoteFileCropFocus>>>;
  fit?: InputMaybe<RemoteFileFit>;
  format?: InputMaybe<RemoteFileFormat>;
  height: InputMaybe<Scalars['Int']>;
  quality?: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};

type RemoteFileCropFocus =
  | 'bottom'
  | 'center'
  | 'edges'
  | 'entropy'
  | 'faces'
  | 'left'
  | 'right'
  | 'top';

type RemoteFileFit =
  | 'contain'
  | 'cover'
  | 'fill'
  | 'outside';

type RemoteFileFormat =
  | 'auto'
  | 'avif'
  | 'jpg'
  | 'png'
  | 'webp';

type RemoteFileLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type RemoteFilePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type RemoteFileResize = {
  readonly height: Maybe<Scalars['Int']>;
  readonly src: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type RemoteFileResizeFieldSelector = {
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type RemoteFileResizeFilterInput = {
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type RemoteFileResizeSortInput = {
  readonly height: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type Site = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly flags: Maybe<SiteFlags>;
  readonly graphqlTypegen: Maybe<SiteGraphqlTypegen>;
  readonly host: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly jsxRuntime: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly pathPrefix: Maybe<Scalars['String']>;
  readonly polyfill: Maybe<Scalars['Boolean']>;
  readonly port: Maybe<Scalars['Int']>;
  readonly siteMetadata: Maybe<SiteSiteMetadata>;
  readonly trailingSlash: Maybe<Scalars['String']>;
};


type Site_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadata = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};


type SiteBuildMetadata_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadataConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataConnection_distinctArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_groupArgs = {
  field: SiteBuildMetadataFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataConnection_maxArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_minArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_sumArgs = {
  field: SiteBuildMetadataFieldSelector;
};

type SiteBuildMetadataEdge = {
  readonly next: Maybe<SiteBuildMetadata>;
  readonly node: SiteBuildMetadata;
  readonly previous: Maybe<SiteBuildMetadata>;
};

type SiteBuildMetadataFieldSelector = {
  readonly buildTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type SiteBuildMetadataFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type SiteBuildMetadataGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataGroupConnection_distinctArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_groupArgs = {
  field: SiteBuildMetadataFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataGroupConnection_maxArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_minArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_sumArgs = {
  field: SiteBuildMetadataFieldSelector;
};

type SiteBuildMetadataSortInput = {
  readonly buildTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type SiteConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteConnection_distinctArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_groupArgs = {
  field: SiteFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteConnection_maxArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_minArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_sumArgs = {
  field: SiteFieldSelector;
};

type SiteEdge = {
  readonly next: Maybe<Site>;
  readonly node: Site;
  readonly previous: Maybe<Site>;
};

type SiteFieldSelector = {
  readonly buildTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly flags: InputMaybe<SiteFlagsFieldSelector>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenFieldSelector>;
  readonly host: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly jsxRuntime: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pathPrefix: InputMaybe<FieldSelectorEnum>;
  readonly polyfill: InputMaybe<FieldSelectorEnum>;
  readonly port: InputMaybe<FieldSelectorEnum>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataFieldSelector>;
  readonly trailingSlash: InputMaybe<FieldSelectorEnum>;
};

type SiteFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly flags: InputMaybe<SiteFlagsFilterInput>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
  readonly host: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly jsxRuntime: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pathPrefix: InputMaybe<StringQueryOperatorInput>;
  readonly polyfill: InputMaybe<BooleanQueryOperatorInput>;
  readonly port: InputMaybe<IntQueryOperatorInput>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
  readonly trailingSlash: InputMaybe<StringQueryOperatorInput>;
};

type SiteFlags = {
  readonly FAST_DEV: Maybe<Scalars['Boolean']>;
};

type SiteFlagsFieldSelector = {
  readonly FAST_DEV: InputMaybe<FieldSelectorEnum>;
};

type SiteFlagsFilterInput = {
  readonly FAST_DEV: InputMaybe<BooleanQueryOperatorInput>;
};

type SiteFlagsSortInput = {
  readonly FAST_DEV: InputMaybe<SortOrderEnum>;
};

type SiteFunction = Node & {
  readonly absoluteCompiledFilePath: Scalars['String'];
  readonly children: ReadonlyArray<Node>;
  readonly functionRoute: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly matchPath: Maybe<Scalars['String']>;
  readonly originalAbsoluteFilePath: Scalars['String'];
  readonly originalRelativeFilePath: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly pluginName: Scalars['String'];
  readonly relativeCompiledFilePath: Scalars['String'];
};

type SiteFunctionConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionConnection_distinctArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_groupArgs = {
  field: SiteFunctionFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionConnection_maxArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_minArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_sumArgs = {
  field: SiteFunctionFieldSelector;
};

type SiteFunctionEdge = {
  readonly next: Maybe<SiteFunction>;
  readonly node: SiteFunction;
  readonly previous: Maybe<SiteFunction>;
};

type SiteFunctionFieldSelector = {
  readonly absoluteCompiledFilePath: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly functionRoute: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly matchPath: InputMaybe<FieldSelectorEnum>;
  readonly originalAbsoluteFilePath: InputMaybe<FieldSelectorEnum>;
  readonly originalRelativeFilePath: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pluginName: InputMaybe<FieldSelectorEnum>;
  readonly relativeCompiledFilePath: InputMaybe<FieldSelectorEnum>;
};

type SiteFunctionFilterInput = {
  readonly absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly functionRoute: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginName: InputMaybe<StringQueryOperatorInput>;
  readonly relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};

type SiteFunctionGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionGroupConnection_distinctArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_groupArgs = {
  field: SiteFunctionFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionGroupConnection_maxArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_minArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_sumArgs = {
  field: SiteFunctionFieldSelector;
};

type SiteFunctionSortInput = {
  readonly absoluteCompiledFilePath: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly functionRoute: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly matchPath: InputMaybe<SortOrderEnum>;
  readonly originalAbsoluteFilePath: InputMaybe<SortOrderEnum>;
  readonly originalRelativeFilePath: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pluginName: InputMaybe<SortOrderEnum>;
  readonly relativeCompiledFilePath: InputMaybe<SortOrderEnum>;
};

type SiteGraphqlTypegen = {
  readonly documentSearchPaths: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly generateOnBuild: Maybe<Scalars['Boolean']>;
  readonly typesOutputPath: Maybe<Scalars['String']>;
};

type SiteGraphqlTypegenFieldSelector = {
  readonly documentSearchPaths: InputMaybe<FieldSelectorEnum>;
  readonly generateOnBuild: InputMaybe<FieldSelectorEnum>;
  readonly typesOutputPath: InputMaybe<FieldSelectorEnum>;
};

type SiteGraphqlTypegenFilterInput = {
  readonly documentSearchPaths: InputMaybe<StringQueryOperatorInput>;
  readonly generateOnBuild: InputMaybe<BooleanQueryOperatorInput>;
  readonly typesOutputPath: InputMaybe<StringQueryOperatorInput>;
};

type SiteGraphqlTypegenSortInput = {
  readonly documentSearchPaths: InputMaybe<SortOrderEnum>;
  readonly generateOnBuild: InputMaybe<SortOrderEnum>;
  readonly typesOutputPath: InputMaybe<SortOrderEnum>;
};

type SiteGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteGroupConnection_distinctArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_groupArgs = {
  field: SiteFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteGroupConnection_maxArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_minArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_sumArgs = {
  field: SiteFieldSelector;
};

type SitePage = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly component: Scalars['String'];
  readonly componentChunkName: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly internalComponentName: Scalars['String'];
  readonly matchPath: Maybe<Scalars['String']>;
  readonly pageContext: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly path: Scalars['String'];
  readonly pluginCreator: Maybe<SitePlugin>;
};

type SitePageConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageConnection_distinctArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_groupArgs = {
  field: SitePageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageConnection_maxArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_minArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_sumArgs = {
  field: SitePageFieldSelector;
};

type SitePageEdge = {
  readonly next: Maybe<SitePage>;
  readonly node: SitePage;
  readonly previous: Maybe<SitePage>;
};

type SitePageFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly component: InputMaybe<FieldSelectorEnum>;
  readonly componentChunkName: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly internalComponentName: InputMaybe<FieldSelectorEnum>;
  readonly matchPath: InputMaybe<FieldSelectorEnum>;
  readonly pageContext: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly path: InputMaybe<FieldSelectorEnum>;
  readonly pluginCreator: InputMaybe<SitePluginFieldSelector>;
};

type SitePageFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly component: InputMaybe<StringQueryOperatorInput>;
  readonly componentChunkName: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly internalComponentName: InputMaybe<StringQueryOperatorInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly pageContext: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly path: InputMaybe<StringQueryOperatorInput>;
  readonly pluginCreator: InputMaybe<SitePluginFilterInput>;
};

type SitePageGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageGroupConnection_distinctArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_groupArgs = {
  field: SitePageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageGroupConnection_maxArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_minArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_sumArgs = {
  field: SitePageFieldSelector;
};

type SitePageSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly component: InputMaybe<SortOrderEnum>;
  readonly componentChunkName: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly internalComponentName: InputMaybe<SortOrderEnum>;
  readonly matchPath: InputMaybe<SortOrderEnum>;
  readonly pageContext: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly path: InputMaybe<SortOrderEnum>;
  readonly pluginCreator: InputMaybe<SitePluginSortInput>;
};

type SitePlugin = Node & {
  readonly browserAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly name: Maybe<Scalars['String']>;
  readonly nodeAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly packageJson: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly pluginFilepath: Maybe<Scalars['String']>;
  readonly pluginOptions: Maybe<Scalars['JSON']>;
  readonly resolve: Maybe<Scalars['String']>;
  readonly ssrAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly version: Maybe<Scalars['String']>;
};

type SitePluginConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginConnection_distinctArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_groupArgs = {
  field: SitePluginFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginConnection_maxArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_minArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_sumArgs = {
  field: SitePluginFieldSelector;
};

type SitePluginEdge = {
  readonly next: Maybe<SitePlugin>;
  readonly node: SitePlugin;
  readonly previous: Maybe<SitePlugin>;
};

type SitePluginFieldSelector = {
  readonly browserAPIs: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nodeAPIs: InputMaybe<FieldSelectorEnum>;
  readonly packageJson: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pluginFilepath: InputMaybe<FieldSelectorEnum>;
  readonly pluginOptions: InputMaybe<FieldSelectorEnum>;
  readonly resolve: InputMaybe<FieldSelectorEnum>;
  readonly ssrAPIs: InputMaybe<FieldSelectorEnum>;
  readonly version: InputMaybe<FieldSelectorEnum>;
};

type SitePluginFilterInput = {
  readonly browserAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly packageJson: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  readonly pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  readonly resolve: InputMaybe<StringQueryOperatorInput>;
  readonly ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly version: InputMaybe<StringQueryOperatorInput>;
};

type SitePluginGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginGroupConnection_distinctArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_groupArgs = {
  field: SitePluginFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginGroupConnection_maxArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_minArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_sumArgs = {
  field: SitePluginFieldSelector;
};

type SitePluginSortInput = {
  readonly browserAPIs: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nodeAPIs: InputMaybe<SortOrderEnum>;
  readonly packageJson: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pluginFilepath: InputMaybe<SortOrderEnum>;
  readonly pluginOptions: InputMaybe<SortOrderEnum>;
  readonly resolve: InputMaybe<SortOrderEnum>;
  readonly ssrAPIs: InputMaybe<SortOrderEnum>;
  readonly version: InputMaybe<SortOrderEnum>;
};

type SiteSiteMetadata = {
  readonly description: Maybe<Scalars['String']>;
  readonly image: Maybe<Scalars['String']>;
  readonly siteUrl: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
  readonly titleTemplate: Maybe<Scalars['String']>;
  readonly twitterUsername: Maybe<Scalars['String']>;
  readonly url: Maybe<Scalars['String']>;
};

type SiteSiteMetadataFieldSelector = {
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<FieldSelectorEnum>;
  readonly siteUrl: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly titleTemplate: InputMaybe<FieldSelectorEnum>;
  readonly twitterUsername: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type SiteSiteMetadataFilterInput = {
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<StringQueryOperatorInput>;
  readonly siteUrl: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly titleTemplate: InputMaybe<StringQueryOperatorInput>;
  readonly twitterUsername: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type SiteSiteMetadataSortInput = {
  readonly description: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<SortOrderEnum>;
  readonly siteUrl: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly titleTemplate: InputMaybe<SortOrderEnum>;
  readonly twitterUsername: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
};

type SiteSortInput = {
  readonly buildTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly flags: InputMaybe<SiteFlagsSortInput>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenSortInput>;
  readonly host: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly jsxRuntime: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pathPrefix: InputMaybe<SortOrderEnum>;
  readonly polyfill: InputMaybe<SortOrderEnum>;
  readonly port: InputMaybe<SortOrderEnum>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataSortInput>;
  readonly trailingSlash: InputMaybe<SortOrderEnum>;
};

type SortOrderEnum =
  | 'ASC'
  | 'DESC';

type StringQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['String']>;
  readonly glob: InputMaybe<Scalars['String']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly ne: InputMaybe<Scalars['String']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly regex: InputMaybe<Scalars['String']>;
};

type TransformOptions = {
  readonly cropFocus: InputMaybe<ImageCropFocus>;
  readonly duotone: InputMaybe<DuotoneGradient>;
  readonly fit: InputMaybe<ImageFit>;
  readonly grayscale: InputMaybe<Scalars['Boolean']>;
  readonly rotate: InputMaybe<Scalars['Int']>;
  readonly trim: InputMaybe<Scalars['Float']>;
};

type WebPOptions = {
  readonly quality: InputMaybe<Scalars['Int']>;
};

type contentfulBlockFormDescriptionTextNode = Node & {
  /** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
  readonly childMarkdownRemark: Maybe<MarkdownRemark>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type MarkdownRemark */
  readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
  readonly description: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly sys: Maybe<contentfulBlockFormDescriptionTextNodeSys>;
};

type contentfulBlockFormDescriptionTextNodeConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<contentfulBlockFormDescriptionTextNodeEdge>;
  readonly group: ReadonlyArray<contentfulBlockFormDescriptionTextNodeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<contentfulBlockFormDescriptionTextNode>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type contentfulBlockFormDescriptionTextNodeConnection_distinctArgs = {
  field: contentfulBlockFormDescriptionTextNodeFieldSelector;
};


type contentfulBlockFormDescriptionTextNodeConnection_groupArgs = {
  field: contentfulBlockFormDescriptionTextNodeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type contentfulBlockFormDescriptionTextNodeConnection_maxArgs = {
  field: contentfulBlockFormDescriptionTextNodeFieldSelector;
};


type contentfulBlockFormDescriptionTextNodeConnection_minArgs = {
  field: contentfulBlockFormDescriptionTextNodeFieldSelector;
};


type contentfulBlockFormDescriptionTextNodeConnection_sumArgs = {
  field: contentfulBlockFormDescriptionTextNodeFieldSelector;
};

type contentfulBlockFormDescriptionTextNodeEdge = {
  readonly next: Maybe<contentfulBlockFormDescriptionTextNode>;
  readonly node: contentfulBlockFormDescriptionTextNode;
  readonly previous: Maybe<contentfulBlockFormDescriptionTextNode>;
};

type contentfulBlockFormDescriptionTextNodeFieldSelector = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly sys: InputMaybe<contentfulBlockFormDescriptionTextNodeSysFieldSelector>;
};

type contentfulBlockFormDescriptionTextNodeFilterInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly sys: InputMaybe<contentfulBlockFormDescriptionTextNodeSysFilterInput>;
};

type contentfulBlockFormDescriptionTextNodeFilterListInput = {
  readonly elemMatch: InputMaybe<contentfulBlockFormDescriptionTextNodeFilterInput>;
};

type contentfulBlockFormDescriptionTextNodeGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<contentfulBlockFormDescriptionTextNodeEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<contentfulBlockFormDescriptionTextNodeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<contentfulBlockFormDescriptionTextNode>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type contentfulBlockFormDescriptionTextNodeGroupConnection_distinctArgs = {
  field: contentfulBlockFormDescriptionTextNodeFieldSelector;
};


type contentfulBlockFormDescriptionTextNodeGroupConnection_groupArgs = {
  field: contentfulBlockFormDescriptionTextNodeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type contentfulBlockFormDescriptionTextNodeGroupConnection_maxArgs = {
  field: contentfulBlockFormDescriptionTextNodeFieldSelector;
};


type contentfulBlockFormDescriptionTextNodeGroupConnection_minArgs = {
  field: contentfulBlockFormDescriptionTextNodeFieldSelector;
};


type contentfulBlockFormDescriptionTextNodeGroupConnection_sumArgs = {
  field: contentfulBlockFormDescriptionTextNodeFieldSelector;
};

type contentfulBlockFormDescriptionTextNodeSortInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly sys: InputMaybe<contentfulBlockFormDescriptionTextNodeSysSortInput>;
};

type contentfulBlockFormDescriptionTextNodeSys = {
  readonly type: Maybe<Scalars['String']>;
};

type contentfulBlockFormDescriptionTextNodeSysFieldSelector = {
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type contentfulBlockFormDescriptionTextNodeSysFilterInput = {
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type contentfulBlockFormDescriptionTextNodeSysSortInput = {
  readonly type: InputMaybe<SortOrderEnum>;
};

type contentfulBlockMissionStatementMissionDescriptionTextNode = Node & {
  /** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
  readonly childMarkdownRemark: Maybe<MarkdownRemark>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type MarkdownRemark */
  readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly missionDescription: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly sys: Maybe<contentfulBlockMissionStatementMissionDescriptionTextNodeSys>;
};

type contentfulBlockMissionStatementMissionDescriptionTextNodeConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<contentfulBlockMissionStatementMissionDescriptionTextNodeEdge>;
  readonly group: ReadonlyArray<contentfulBlockMissionStatementMissionDescriptionTextNodeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<contentfulBlockMissionStatementMissionDescriptionTextNode>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type contentfulBlockMissionStatementMissionDescriptionTextNodeConnection_distinctArgs = {
  field: contentfulBlockMissionStatementMissionDescriptionTextNodeFieldSelector;
};


type contentfulBlockMissionStatementMissionDescriptionTextNodeConnection_groupArgs = {
  field: contentfulBlockMissionStatementMissionDescriptionTextNodeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type contentfulBlockMissionStatementMissionDescriptionTextNodeConnection_maxArgs = {
  field: contentfulBlockMissionStatementMissionDescriptionTextNodeFieldSelector;
};


type contentfulBlockMissionStatementMissionDescriptionTextNodeConnection_minArgs = {
  field: contentfulBlockMissionStatementMissionDescriptionTextNodeFieldSelector;
};


type contentfulBlockMissionStatementMissionDescriptionTextNodeConnection_sumArgs = {
  field: contentfulBlockMissionStatementMissionDescriptionTextNodeFieldSelector;
};

type contentfulBlockMissionStatementMissionDescriptionTextNodeEdge = {
  readonly next: Maybe<contentfulBlockMissionStatementMissionDescriptionTextNode>;
  readonly node: contentfulBlockMissionStatementMissionDescriptionTextNode;
  readonly previous: Maybe<contentfulBlockMissionStatementMissionDescriptionTextNode>;
};

type contentfulBlockMissionStatementMissionDescriptionTextNodeFieldSelector = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly missionDescription: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly sys: InputMaybe<contentfulBlockMissionStatementMissionDescriptionTextNodeSysFieldSelector>;
};

type contentfulBlockMissionStatementMissionDescriptionTextNodeFilterInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly missionDescription: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly sys: InputMaybe<contentfulBlockMissionStatementMissionDescriptionTextNodeSysFilterInput>;
};

type contentfulBlockMissionStatementMissionDescriptionTextNodeFilterListInput = {
  readonly elemMatch: InputMaybe<contentfulBlockMissionStatementMissionDescriptionTextNodeFilterInput>;
};

type contentfulBlockMissionStatementMissionDescriptionTextNodeGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<contentfulBlockMissionStatementMissionDescriptionTextNodeEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<contentfulBlockMissionStatementMissionDescriptionTextNodeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<contentfulBlockMissionStatementMissionDescriptionTextNode>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type contentfulBlockMissionStatementMissionDescriptionTextNodeGroupConnection_distinctArgs = {
  field: contentfulBlockMissionStatementMissionDescriptionTextNodeFieldSelector;
};


type contentfulBlockMissionStatementMissionDescriptionTextNodeGroupConnection_groupArgs = {
  field: contentfulBlockMissionStatementMissionDescriptionTextNodeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type contentfulBlockMissionStatementMissionDescriptionTextNodeGroupConnection_maxArgs = {
  field: contentfulBlockMissionStatementMissionDescriptionTextNodeFieldSelector;
};


type contentfulBlockMissionStatementMissionDescriptionTextNodeGroupConnection_minArgs = {
  field: contentfulBlockMissionStatementMissionDescriptionTextNodeFieldSelector;
};


type contentfulBlockMissionStatementMissionDescriptionTextNodeGroupConnection_sumArgs = {
  field: contentfulBlockMissionStatementMissionDescriptionTextNodeFieldSelector;
};

type contentfulBlockMissionStatementMissionDescriptionTextNodeSortInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly missionDescription: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly sys: InputMaybe<contentfulBlockMissionStatementMissionDescriptionTextNodeSysSortInput>;
};

type contentfulBlockMissionStatementMissionDescriptionTextNodeSys = {
  readonly type: Maybe<Scalars['String']>;
};

type contentfulBlockMissionStatementMissionDescriptionTextNodeSysFieldSelector = {
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type contentfulBlockMissionStatementMissionDescriptionTextNodeSysFilterInput = {
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type contentfulBlockMissionStatementMissionDescriptionTextNodeSysSortInput = {
  readonly type: InputMaybe<SortOrderEnum>;
};

type contentfulBlockMissionStatementVisionDescriptionTextNode = Node & {
  /** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
  readonly childMarkdownRemark: Maybe<MarkdownRemark>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type MarkdownRemark */
  readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly sys: Maybe<contentfulBlockMissionStatementVisionDescriptionTextNodeSys>;
  readonly visionDescription: Maybe<Scalars['String']>;
};

type contentfulBlockMissionStatementVisionDescriptionTextNodeConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<contentfulBlockMissionStatementVisionDescriptionTextNodeEdge>;
  readonly group: ReadonlyArray<contentfulBlockMissionStatementVisionDescriptionTextNodeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<contentfulBlockMissionStatementVisionDescriptionTextNode>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type contentfulBlockMissionStatementVisionDescriptionTextNodeConnection_distinctArgs = {
  field: contentfulBlockMissionStatementVisionDescriptionTextNodeFieldSelector;
};


type contentfulBlockMissionStatementVisionDescriptionTextNodeConnection_groupArgs = {
  field: contentfulBlockMissionStatementVisionDescriptionTextNodeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type contentfulBlockMissionStatementVisionDescriptionTextNodeConnection_maxArgs = {
  field: contentfulBlockMissionStatementVisionDescriptionTextNodeFieldSelector;
};


type contentfulBlockMissionStatementVisionDescriptionTextNodeConnection_minArgs = {
  field: contentfulBlockMissionStatementVisionDescriptionTextNodeFieldSelector;
};


type contentfulBlockMissionStatementVisionDescriptionTextNodeConnection_sumArgs = {
  field: contentfulBlockMissionStatementVisionDescriptionTextNodeFieldSelector;
};

type contentfulBlockMissionStatementVisionDescriptionTextNodeEdge = {
  readonly next: Maybe<contentfulBlockMissionStatementVisionDescriptionTextNode>;
  readonly node: contentfulBlockMissionStatementVisionDescriptionTextNode;
  readonly previous: Maybe<contentfulBlockMissionStatementVisionDescriptionTextNode>;
};

type contentfulBlockMissionStatementVisionDescriptionTextNodeFieldSelector = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly sys: InputMaybe<contentfulBlockMissionStatementVisionDescriptionTextNodeSysFieldSelector>;
  readonly visionDescription: InputMaybe<FieldSelectorEnum>;
};

type contentfulBlockMissionStatementVisionDescriptionTextNodeFilterInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly sys: InputMaybe<contentfulBlockMissionStatementVisionDescriptionTextNodeSysFilterInput>;
  readonly visionDescription: InputMaybe<StringQueryOperatorInput>;
};

type contentfulBlockMissionStatementVisionDescriptionTextNodeFilterListInput = {
  readonly elemMatch: InputMaybe<contentfulBlockMissionStatementVisionDescriptionTextNodeFilterInput>;
};

type contentfulBlockMissionStatementVisionDescriptionTextNodeGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<contentfulBlockMissionStatementVisionDescriptionTextNodeEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<contentfulBlockMissionStatementVisionDescriptionTextNodeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<contentfulBlockMissionStatementVisionDescriptionTextNode>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type contentfulBlockMissionStatementVisionDescriptionTextNodeGroupConnection_distinctArgs = {
  field: contentfulBlockMissionStatementVisionDescriptionTextNodeFieldSelector;
};


type contentfulBlockMissionStatementVisionDescriptionTextNodeGroupConnection_groupArgs = {
  field: contentfulBlockMissionStatementVisionDescriptionTextNodeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type contentfulBlockMissionStatementVisionDescriptionTextNodeGroupConnection_maxArgs = {
  field: contentfulBlockMissionStatementVisionDescriptionTextNodeFieldSelector;
};


type contentfulBlockMissionStatementVisionDescriptionTextNodeGroupConnection_minArgs = {
  field: contentfulBlockMissionStatementVisionDescriptionTextNodeFieldSelector;
};


type contentfulBlockMissionStatementVisionDescriptionTextNodeGroupConnection_sumArgs = {
  field: contentfulBlockMissionStatementVisionDescriptionTextNodeFieldSelector;
};

type contentfulBlockMissionStatementVisionDescriptionTextNodeSortInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly sys: InputMaybe<contentfulBlockMissionStatementVisionDescriptionTextNodeSysSortInput>;
  readonly visionDescription: InputMaybe<SortOrderEnum>;
};

type contentfulBlockMissionStatementVisionDescriptionTextNodeSys = {
  readonly type: Maybe<Scalars['String']>;
};

type contentfulBlockMissionStatementVisionDescriptionTextNodeSysFieldSelector = {
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type contentfulBlockMissionStatementVisionDescriptionTextNodeSysFilterInput = {
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type contentfulBlockMissionStatementVisionDescriptionTextNodeSysSortInput = {
  readonly type: InputMaybe<SortOrderEnum>;
};

type contentfulBlockNewHeroButtonJsonNode = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly label: Maybe<Scalars['String']>;
  readonly link: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly sys: Maybe<contentfulBlockNewHeroButtonJsonNodeSys>;
  readonly variant: Maybe<Scalars['String']>;
};

type contentfulBlockNewHeroButtonJsonNodeConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<contentfulBlockNewHeroButtonJsonNodeEdge>;
  readonly group: ReadonlyArray<contentfulBlockNewHeroButtonJsonNodeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<contentfulBlockNewHeroButtonJsonNode>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type contentfulBlockNewHeroButtonJsonNodeConnection_distinctArgs = {
  field: contentfulBlockNewHeroButtonJsonNodeFieldSelector;
};


type contentfulBlockNewHeroButtonJsonNodeConnection_groupArgs = {
  field: contentfulBlockNewHeroButtonJsonNodeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type contentfulBlockNewHeroButtonJsonNodeConnection_maxArgs = {
  field: contentfulBlockNewHeroButtonJsonNodeFieldSelector;
};


type contentfulBlockNewHeroButtonJsonNodeConnection_minArgs = {
  field: contentfulBlockNewHeroButtonJsonNodeFieldSelector;
};


type contentfulBlockNewHeroButtonJsonNodeConnection_sumArgs = {
  field: contentfulBlockNewHeroButtonJsonNodeFieldSelector;
};

type contentfulBlockNewHeroButtonJsonNodeEdge = {
  readonly next: Maybe<contentfulBlockNewHeroButtonJsonNode>;
  readonly node: contentfulBlockNewHeroButtonJsonNode;
  readonly previous: Maybe<contentfulBlockNewHeroButtonJsonNode>;
};

type contentfulBlockNewHeroButtonJsonNodeFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly label: InputMaybe<FieldSelectorEnum>;
  readonly link: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly sys: InputMaybe<contentfulBlockNewHeroButtonJsonNodeSysFieldSelector>;
  readonly variant: InputMaybe<FieldSelectorEnum>;
};

type contentfulBlockNewHeroButtonJsonNodeFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly label: InputMaybe<StringQueryOperatorInput>;
  readonly link: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly sys: InputMaybe<contentfulBlockNewHeroButtonJsonNodeSysFilterInput>;
  readonly variant: InputMaybe<StringQueryOperatorInput>;
};

type contentfulBlockNewHeroButtonJsonNodeFilterListInput = {
  readonly elemMatch: InputMaybe<contentfulBlockNewHeroButtonJsonNodeFilterInput>;
};

type contentfulBlockNewHeroButtonJsonNodeGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<contentfulBlockNewHeroButtonJsonNodeEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<contentfulBlockNewHeroButtonJsonNodeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<contentfulBlockNewHeroButtonJsonNode>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type contentfulBlockNewHeroButtonJsonNodeGroupConnection_distinctArgs = {
  field: contentfulBlockNewHeroButtonJsonNodeFieldSelector;
};


type contentfulBlockNewHeroButtonJsonNodeGroupConnection_groupArgs = {
  field: contentfulBlockNewHeroButtonJsonNodeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type contentfulBlockNewHeroButtonJsonNodeGroupConnection_maxArgs = {
  field: contentfulBlockNewHeroButtonJsonNodeFieldSelector;
};


type contentfulBlockNewHeroButtonJsonNodeGroupConnection_minArgs = {
  field: contentfulBlockNewHeroButtonJsonNodeFieldSelector;
};


type contentfulBlockNewHeroButtonJsonNodeGroupConnection_sumArgs = {
  field: contentfulBlockNewHeroButtonJsonNodeFieldSelector;
};

type contentfulBlockNewHeroButtonJsonNodeSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly label: InputMaybe<SortOrderEnum>;
  readonly link: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly sys: InputMaybe<contentfulBlockNewHeroButtonJsonNodeSysSortInput>;
  readonly variant: InputMaybe<SortOrderEnum>;
};

type contentfulBlockNewHeroButtonJsonNodeSys = {
  readonly type: Maybe<Scalars['String']>;
};

type contentfulBlockNewHeroButtonJsonNodeSysFieldSelector = {
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type contentfulBlockNewHeroButtonJsonNodeSysFilterInput = {
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type contentfulBlockNewHeroButtonJsonNodeSysSortInput = {
  readonly type: InputMaybe<SortOrderEnum>;
};

type contentfulBlockNewHeroWinsJsonNode = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly items: Maybe<ReadonlyArray<Maybe<contentfulBlockNewHeroWinsJsonNodeItems>>>;
  readonly parent: Maybe<Node>;
  readonly sys: Maybe<contentfulBlockNewHeroWinsJsonNodeSys>;
};

type contentfulBlockNewHeroWinsJsonNodeConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<contentfulBlockNewHeroWinsJsonNodeEdge>;
  readonly group: ReadonlyArray<contentfulBlockNewHeroWinsJsonNodeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<contentfulBlockNewHeroWinsJsonNode>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type contentfulBlockNewHeroWinsJsonNodeConnection_distinctArgs = {
  field: contentfulBlockNewHeroWinsJsonNodeFieldSelector;
};


type contentfulBlockNewHeroWinsJsonNodeConnection_groupArgs = {
  field: contentfulBlockNewHeroWinsJsonNodeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type contentfulBlockNewHeroWinsJsonNodeConnection_maxArgs = {
  field: contentfulBlockNewHeroWinsJsonNodeFieldSelector;
};


type contentfulBlockNewHeroWinsJsonNodeConnection_minArgs = {
  field: contentfulBlockNewHeroWinsJsonNodeFieldSelector;
};


type contentfulBlockNewHeroWinsJsonNodeConnection_sumArgs = {
  field: contentfulBlockNewHeroWinsJsonNodeFieldSelector;
};

type contentfulBlockNewHeroWinsJsonNodeEdge = {
  readonly next: Maybe<contentfulBlockNewHeroWinsJsonNode>;
  readonly node: contentfulBlockNewHeroWinsJsonNode;
  readonly previous: Maybe<contentfulBlockNewHeroWinsJsonNode>;
};

type contentfulBlockNewHeroWinsJsonNodeFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly items: InputMaybe<contentfulBlockNewHeroWinsJsonNodeItemsFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly sys: InputMaybe<contentfulBlockNewHeroWinsJsonNodeSysFieldSelector>;
};

type contentfulBlockNewHeroWinsJsonNodeFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly items: InputMaybe<contentfulBlockNewHeroWinsJsonNodeItemsFilterListInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly sys: InputMaybe<contentfulBlockNewHeroWinsJsonNodeSysFilterInput>;
};

type contentfulBlockNewHeroWinsJsonNodeFilterListInput = {
  readonly elemMatch: InputMaybe<contentfulBlockNewHeroWinsJsonNodeFilterInput>;
};

type contentfulBlockNewHeroWinsJsonNodeGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<contentfulBlockNewHeroWinsJsonNodeEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<contentfulBlockNewHeroWinsJsonNodeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<contentfulBlockNewHeroWinsJsonNode>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type contentfulBlockNewHeroWinsJsonNodeGroupConnection_distinctArgs = {
  field: contentfulBlockNewHeroWinsJsonNodeFieldSelector;
};


type contentfulBlockNewHeroWinsJsonNodeGroupConnection_groupArgs = {
  field: contentfulBlockNewHeroWinsJsonNodeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type contentfulBlockNewHeroWinsJsonNodeGroupConnection_maxArgs = {
  field: contentfulBlockNewHeroWinsJsonNodeFieldSelector;
};


type contentfulBlockNewHeroWinsJsonNodeGroupConnection_minArgs = {
  field: contentfulBlockNewHeroWinsJsonNodeFieldSelector;
};


type contentfulBlockNewHeroWinsJsonNodeGroupConnection_sumArgs = {
  field: contentfulBlockNewHeroWinsJsonNodeFieldSelector;
};

type contentfulBlockNewHeroWinsJsonNodeItems = {
  readonly icon: Maybe<Scalars['String']>;
  readonly label: Maybe<Scalars['String']>;
};

type contentfulBlockNewHeroWinsJsonNodeItemsFieldSelector = {
  readonly icon: InputMaybe<FieldSelectorEnum>;
  readonly label: InputMaybe<FieldSelectorEnum>;
};

type contentfulBlockNewHeroWinsJsonNodeItemsFilterInput = {
  readonly icon: InputMaybe<StringQueryOperatorInput>;
  readonly label: InputMaybe<StringQueryOperatorInput>;
};

type contentfulBlockNewHeroWinsJsonNodeItemsFilterListInput = {
  readonly elemMatch: InputMaybe<contentfulBlockNewHeroWinsJsonNodeItemsFilterInput>;
};

type contentfulBlockNewHeroWinsJsonNodeItemsSortInput = {
  readonly icon: InputMaybe<SortOrderEnum>;
  readonly label: InputMaybe<SortOrderEnum>;
};

type contentfulBlockNewHeroWinsJsonNodeSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly items: InputMaybe<contentfulBlockNewHeroWinsJsonNodeItemsSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly sys: InputMaybe<contentfulBlockNewHeroWinsJsonNodeSysSortInput>;
};

type contentfulBlockNewHeroWinsJsonNodeSys = {
  readonly type: Maybe<Scalars['String']>;
};

type contentfulBlockNewHeroWinsJsonNodeSysFieldSelector = {
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type contentfulBlockNewHeroWinsJsonNodeSysFilterInput = {
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type contentfulBlockNewHeroWinsJsonNodeSysSortInput = {
  readonly type: InputMaybe<SortOrderEnum>;
};

type contentfulHeaderV2HeroV2TextTextNode = Node & {
  /** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
  readonly childMarkdownRemark: Maybe<MarkdownRemark>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type MarkdownRemark */
  readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
  readonly heroV2text: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly sys: Maybe<contentfulHeaderV2HeroV2TextTextNodeSys>;
};

type contentfulHeaderV2HeroV2TextTextNodeConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<contentfulHeaderV2HeroV2TextTextNodeEdge>;
  readonly group: ReadonlyArray<contentfulHeaderV2HeroV2TextTextNodeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<contentfulHeaderV2HeroV2TextTextNode>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type contentfulHeaderV2HeroV2TextTextNodeConnection_distinctArgs = {
  field: contentfulHeaderV2HeroV2TextTextNodeFieldSelector;
};


type contentfulHeaderV2HeroV2TextTextNodeConnection_groupArgs = {
  field: contentfulHeaderV2HeroV2TextTextNodeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type contentfulHeaderV2HeroV2TextTextNodeConnection_maxArgs = {
  field: contentfulHeaderV2HeroV2TextTextNodeFieldSelector;
};


type contentfulHeaderV2HeroV2TextTextNodeConnection_minArgs = {
  field: contentfulHeaderV2HeroV2TextTextNodeFieldSelector;
};


type contentfulHeaderV2HeroV2TextTextNodeConnection_sumArgs = {
  field: contentfulHeaderV2HeroV2TextTextNodeFieldSelector;
};

type contentfulHeaderV2HeroV2TextTextNodeEdge = {
  readonly next: Maybe<contentfulHeaderV2HeroV2TextTextNode>;
  readonly node: contentfulHeaderV2HeroV2TextTextNode;
  readonly previous: Maybe<contentfulHeaderV2HeroV2TextTextNode>;
};

type contentfulHeaderV2HeroV2TextTextNodeFieldSelector = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly heroV2text: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly sys: InputMaybe<contentfulHeaderV2HeroV2TextTextNodeSysFieldSelector>;
};

type contentfulHeaderV2HeroV2TextTextNodeFilterInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  readonly heroV2text: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly sys: InputMaybe<contentfulHeaderV2HeroV2TextTextNodeSysFilterInput>;
};

type contentfulHeaderV2HeroV2TextTextNodeFilterListInput = {
  readonly elemMatch: InputMaybe<contentfulHeaderV2HeroV2TextTextNodeFilterInput>;
};

type contentfulHeaderV2HeroV2TextTextNodeGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<contentfulHeaderV2HeroV2TextTextNodeEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<contentfulHeaderV2HeroV2TextTextNodeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<contentfulHeaderV2HeroV2TextTextNode>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type contentfulHeaderV2HeroV2TextTextNodeGroupConnection_distinctArgs = {
  field: contentfulHeaderV2HeroV2TextTextNodeFieldSelector;
};


type contentfulHeaderV2HeroV2TextTextNodeGroupConnection_groupArgs = {
  field: contentfulHeaderV2HeroV2TextTextNodeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type contentfulHeaderV2HeroV2TextTextNodeGroupConnection_maxArgs = {
  field: contentfulHeaderV2HeroV2TextTextNodeFieldSelector;
};


type contentfulHeaderV2HeroV2TextTextNodeGroupConnection_minArgs = {
  field: contentfulHeaderV2HeroV2TextTextNodeFieldSelector;
};


type contentfulHeaderV2HeroV2TextTextNodeGroupConnection_sumArgs = {
  field: contentfulHeaderV2HeroV2TextTextNodeFieldSelector;
};

type contentfulHeaderV2HeroV2TextTextNodeSortInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly heroV2text: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly sys: InputMaybe<contentfulHeaderV2HeroV2TextTextNodeSysSortInput>;
};

type contentfulHeaderV2HeroV2TextTextNodeSys = {
  readonly type: Maybe<Scalars['String']>;
};

type contentfulHeaderV2HeroV2TextTextNodeSysFieldSelector = {
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type contentfulHeaderV2HeroV2TextTextNodeSysFilterInput = {
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type contentfulHeaderV2HeroV2TextTextNodeSysSortInput = {
  readonly type: InputMaybe<SortOrderEnum>;
};

type contentfulPageSeoDescriptionTextNode = Node & {
  /** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
  readonly childMarkdownRemark: Maybe<MarkdownRemark>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type MarkdownRemark */
  readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly seoDescription: Maybe<Scalars['String']>;
  readonly sys: Maybe<contentfulPageSeoDescriptionTextNodeSys>;
};

type contentfulPageSeoDescriptionTextNodeConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<contentfulPageSeoDescriptionTextNodeEdge>;
  readonly group: ReadonlyArray<contentfulPageSeoDescriptionTextNodeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<contentfulPageSeoDescriptionTextNode>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type contentfulPageSeoDescriptionTextNodeConnection_distinctArgs = {
  field: contentfulPageSeoDescriptionTextNodeFieldSelector;
};


type contentfulPageSeoDescriptionTextNodeConnection_groupArgs = {
  field: contentfulPageSeoDescriptionTextNodeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type contentfulPageSeoDescriptionTextNodeConnection_maxArgs = {
  field: contentfulPageSeoDescriptionTextNodeFieldSelector;
};


type contentfulPageSeoDescriptionTextNodeConnection_minArgs = {
  field: contentfulPageSeoDescriptionTextNodeFieldSelector;
};


type contentfulPageSeoDescriptionTextNodeConnection_sumArgs = {
  field: contentfulPageSeoDescriptionTextNodeFieldSelector;
};

type contentfulPageSeoDescriptionTextNodeEdge = {
  readonly next: Maybe<contentfulPageSeoDescriptionTextNode>;
  readonly node: contentfulPageSeoDescriptionTextNode;
  readonly previous: Maybe<contentfulPageSeoDescriptionTextNode>;
};

type contentfulPageSeoDescriptionTextNodeFieldSelector = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly seoDescription: InputMaybe<FieldSelectorEnum>;
  readonly sys: InputMaybe<contentfulPageSeoDescriptionTextNodeSysFieldSelector>;
};

type contentfulPageSeoDescriptionTextNodeFilterInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly seoDescription: InputMaybe<StringQueryOperatorInput>;
  readonly sys: InputMaybe<contentfulPageSeoDescriptionTextNodeSysFilterInput>;
};

type contentfulPageSeoDescriptionTextNodeFilterListInput = {
  readonly elemMatch: InputMaybe<contentfulPageSeoDescriptionTextNodeFilterInput>;
};

type contentfulPageSeoDescriptionTextNodeGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<contentfulPageSeoDescriptionTextNodeEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<contentfulPageSeoDescriptionTextNodeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<contentfulPageSeoDescriptionTextNode>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type contentfulPageSeoDescriptionTextNodeGroupConnection_distinctArgs = {
  field: contentfulPageSeoDescriptionTextNodeFieldSelector;
};


type contentfulPageSeoDescriptionTextNodeGroupConnection_groupArgs = {
  field: contentfulPageSeoDescriptionTextNodeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type contentfulPageSeoDescriptionTextNodeGroupConnection_maxArgs = {
  field: contentfulPageSeoDescriptionTextNodeFieldSelector;
};


type contentfulPageSeoDescriptionTextNodeGroupConnection_minArgs = {
  field: contentfulPageSeoDescriptionTextNodeFieldSelector;
};


type contentfulPageSeoDescriptionTextNodeGroupConnection_sumArgs = {
  field: contentfulPageSeoDescriptionTextNodeFieldSelector;
};

type contentfulPageSeoDescriptionTextNodeSortInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly seoDescription: InputMaybe<SortOrderEnum>;
  readonly sys: InputMaybe<contentfulPageSeoDescriptionTextNodeSysSortInput>;
};

type contentfulPageSeoDescriptionTextNodeSys = {
  readonly type: Maybe<Scalars['String']>;
};

type contentfulPageSeoDescriptionTextNodeSysFieldSelector = {
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type contentfulPageSeoDescriptionTextNodeSysFilterInput = {
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type contentfulPageSeoDescriptionTextNodeSysSortInput = {
  readonly type: InputMaybe<SortOrderEnum>;
};

type contentfulPageSeoOpenGraphDescriptionTextNode = Node & {
  /** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
  readonly childMarkdownRemark: Maybe<MarkdownRemark>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type MarkdownRemark */
  readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly seoOpenGraphDescription: Maybe<Scalars['String']>;
  readonly sys: Maybe<contentfulPageSeoOpenGraphDescriptionTextNodeSys>;
};

type contentfulPageSeoOpenGraphDescriptionTextNodeConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<contentfulPageSeoOpenGraphDescriptionTextNodeEdge>;
  readonly group: ReadonlyArray<contentfulPageSeoOpenGraphDescriptionTextNodeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<contentfulPageSeoOpenGraphDescriptionTextNode>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type contentfulPageSeoOpenGraphDescriptionTextNodeConnection_distinctArgs = {
  field: contentfulPageSeoOpenGraphDescriptionTextNodeFieldSelector;
};


type contentfulPageSeoOpenGraphDescriptionTextNodeConnection_groupArgs = {
  field: contentfulPageSeoOpenGraphDescriptionTextNodeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type contentfulPageSeoOpenGraphDescriptionTextNodeConnection_maxArgs = {
  field: contentfulPageSeoOpenGraphDescriptionTextNodeFieldSelector;
};


type contentfulPageSeoOpenGraphDescriptionTextNodeConnection_minArgs = {
  field: contentfulPageSeoOpenGraphDescriptionTextNodeFieldSelector;
};


type contentfulPageSeoOpenGraphDescriptionTextNodeConnection_sumArgs = {
  field: contentfulPageSeoOpenGraphDescriptionTextNodeFieldSelector;
};

type contentfulPageSeoOpenGraphDescriptionTextNodeEdge = {
  readonly next: Maybe<contentfulPageSeoOpenGraphDescriptionTextNode>;
  readonly node: contentfulPageSeoOpenGraphDescriptionTextNode;
  readonly previous: Maybe<contentfulPageSeoOpenGraphDescriptionTextNode>;
};

type contentfulPageSeoOpenGraphDescriptionTextNodeFieldSelector = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly seoOpenGraphDescription: InputMaybe<FieldSelectorEnum>;
  readonly sys: InputMaybe<contentfulPageSeoOpenGraphDescriptionTextNodeSysFieldSelector>;
};

type contentfulPageSeoOpenGraphDescriptionTextNodeFilterInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly seoOpenGraphDescription: InputMaybe<StringQueryOperatorInput>;
  readonly sys: InputMaybe<contentfulPageSeoOpenGraphDescriptionTextNodeSysFilterInput>;
};

type contentfulPageSeoOpenGraphDescriptionTextNodeFilterListInput = {
  readonly elemMatch: InputMaybe<contentfulPageSeoOpenGraphDescriptionTextNodeFilterInput>;
};

type contentfulPageSeoOpenGraphDescriptionTextNodeGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<contentfulPageSeoOpenGraphDescriptionTextNodeEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<contentfulPageSeoOpenGraphDescriptionTextNodeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<contentfulPageSeoOpenGraphDescriptionTextNode>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type contentfulPageSeoOpenGraphDescriptionTextNodeGroupConnection_distinctArgs = {
  field: contentfulPageSeoOpenGraphDescriptionTextNodeFieldSelector;
};


type contentfulPageSeoOpenGraphDescriptionTextNodeGroupConnection_groupArgs = {
  field: contentfulPageSeoOpenGraphDescriptionTextNodeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type contentfulPageSeoOpenGraphDescriptionTextNodeGroupConnection_maxArgs = {
  field: contentfulPageSeoOpenGraphDescriptionTextNodeFieldSelector;
};


type contentfulPageSeoOpenGraphDescriptionTextNodeGroupConnection_minArgs = {
  field: contentfulPageSeoOpenGraphDescriptionTextNodeFieldSelector;
};


type contentfulPageSeoOpenGraphDescriptionTextNodeGroupConnection_sumArgs = {
  field: contentfulPageSeoOpenGraphDescriptionTextNodeFieldSelector;
};

type contentfulPageSeoOpenGraphDescriptionTextNodeSortInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly seoOpenGraphDescription: InputMaybe<SortOrderEnum>;
  readonly sys: InputMaybe<contentfulPageSeoOpenGraphDescriptionTextNodeSysSortInput>;
};

type contentfulPageSeoOpenGraphDescriptionTextNodeSys = {
  readonly type: Maybe<Scalars['String']>;
};

type contentfulPageSeoOpenGraphDescriptionTextNodeSysFieldSelector = {
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type contentfulPageSeoOpenGraphDescriptionTextNodeSysFilterInput = {
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type contentfulPageSeoOpenGraphDescriptionTextNodeSysSortInput = {
  readonly type: InputMaybe<SortOrderEnum>;
};

type contentfulPageSeoTwitterDescriptionTextNode = Node & {
  /** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
  readonly childMarkdownRemark: Maybe<MarkdownRemark>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type MarkdownRemark */
  readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly seoTwitterDescription: Maybe<Scalars['String']>;
  readonly sys: Maybe<contentfulPageSeoTwitterDescriptionTextNodeSys>;
};

type contentfulPageSeoTwitterDescriptionTextNodeConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<contentfulPageSeoTwitterDescriptionTextNodeEdge>;
  readonly group: ReadonlyArray<contentfulPageSeoTwitterDescriptionTextNodeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<contentfulPageSeoTwitterDescriptionTextNode>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type contentfulPageSeoTwitterDescriptionTextNodeConnection_distinctArgs = {
  field: contentfulPageSeoTwitterDescriptionTextNodeFieldSelector;
};


type contentfulPageSeoTwitterDescriptionTextNodeConnection_groupArgs = {
  field: contentfulPageSeoTwitterDescriptionTextNodeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type contentfulPageSeoTwitterDescriptionTextNodeConnection_maxArgs = {
  field: contentfulPageSeoTwitterDescriptionTextNodeFieldSelector;
};


type contentfulPageSeoTwitterDescriptionTextNodeConnection_minArgs = {
  field: contentfulPageSeoTwitterDescriptionTextNodeFieldSelector;
};


type contentfulPageSeoTwitterDescriptionTextNodeConnection_sumArgs = {
  field: contentfulPageSeoTwitterDescriptionTextNodeFieldSelector;
};

type contentfulPageSeoTwitterDescriptionTextNodeEdge = {
  readonly next: Maybe<contentfulPageSeoTwitterDescriptionTextNode>;
  readonly node: contentfulPageSeoTwitterDescriptionTextNode;
  readonly previous: Maybe<contentfulPageSeoTwitterDescriptionTextNode>;
};

type contentfulPageSeoTwitterDescriptionTextNodeFieldSelector = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly seoTwitterDescription: InputMaybe<FieldSelectorEnum>;
  readonly sys: InputMaybe<contentfulPageSeoTwitterDescriptionTextNodeSysFieldSelector>;
};

type contentfulPageSeoTwitterDescriptionTextNodeFilterInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly seoTwitterDescription: InputMaybe<StringQueryOperatorInput>;
  readonly sys: InputMaybe<contentfulPageSeoTwitterDescriptionTextNodeSysFilterInput>;
};

type contentfulPageSeoTwitterDescriptionTextNodeFilterListInput = {
  readonly elemMatch: InputMaybe<contentfulPageSeoTwitterDescriptionTextNodeFilterInput>;
};

type contentfulPageSeoTwitterDescriptionTextNodeGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<contentfulPageSeoTwitterDescriptionTextNodeEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<contentfulPageSeoTwitterDescriptionTextNodeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<contentfulPageSeoTwitterDescriptionTextNode>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type contentfulPageSeoTwitterDescriptionTextNodeGroupConnection_distinctArgs = {
  field: contentfulPageSeoTwitterDescriptionTextNodeFieldSelector;
};


type contentfulPageSeoTwitterDescriptionTextNodeGroupConnection_groupArgs = {
  field: contentfulPageSeoTwitterDescriptionTextNodeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type contentfulPageSeoTwitterDescriptionTextNodeGroupConnection_maxArgs = {
  field: contentfulPageSeoTwitterDescriptionTextNodeFieldSelector;
};


type contentfulPageSeoTwitterDescriptionTextNodeGroupConnection_minArgs = {
  field: contentfulPageSeoTwitterDescriptionTextNodeFieldSelector;
};


type contentfulPageSeoTwitterDescriptionTextNodeGroupConnection_sumArgs = {
  field: contentfulPageSeoTwitterDescriptionTextNodeFieldSelector;
};

type contentfulPageSeoTwitterDescriptionTextNodeSortInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly seoTwitterDescription: InputMaybe<SortOrderEnum>;
  readonly sys: InputMaybe<contentfulPageSeoTwitterDescriptionTextNodeSysSortInput>;
};

type contentfulPageSeoTwitterDescriptionTextNodeSys = {
  readonly type: Maybe<Scalars['String']>;
};

type contentfulPageSeoTwitterDescriptionTextNodeSysFieldSelector = {
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type contentfulPageSeoTwitterDescriptionTextNodeSysFilterInput = {
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type contentfulPageSeoTwitterDescriptionTextNodeSysSortInput = {
  readonly type: InputMaybe<SortOrderEnum>;
};

type contentfulPostSeoDescriptionTextNode = Node & {
  /** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
  readonly childMarkdownRemark: Maybe<MarkdownRemark>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type MarkdownRemark */
  readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly seoDescription: Maybe<Scalars['String']>;
  readonly sys: Maybe<contentfulPostSeoDescriptionTextNodeSys>;
};

type contentfulPostSeoDescriptionTextNodeConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<contentfulPostSeoDescriptionTextNodeEdge>;
  readonly group: ReadonlyArray<contentfulPostSeoDescriptionTextNodeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<contentfulPostSeoDescriptionTextNode>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type contentfulPostSeoDescriptionTextNodeConnection_distinctArgs = {
  field: contentfulPostSeoDescriptionTextNodeFieldSelector;
};


type contentfulPostSeoDescriptionTextNodeConnection_groupArgs = {
  field: contentfulPostSeoDescriptionTextNodeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type contentfulPostSeoDescriptionTextNodeConnection_maxArgs = {
  field: contentfulPostSeoDescriptionTextNodeFieldSelector;
};


type contentfulPostSeoDescriptionTextNodeConnection_minArgs = {
  field: contentfulPostSeoDescriptionTextNodeFieldSelector;
};


type contentfulPostSeoDescriptionTextNodeConnection_sumArgs = {
  field: contentfulPostSeoDescriptionTextNodeFieldSelector;
};

type contentfulPostSeoDescriptionTextNodeEdge = {
  readonly next: Maybe<contentfulPostSeoDescriptionTextNode>;
  readonly node: contentfulPostSeoDescriptionTextNode;
  readonly previous: Maybe<contentfulPostSeoDescriptionTextNode>;
};

type contentfulPostSeoDescriptionTextNodeFieldSelector = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly seoDescription: InputMaybe<FieldSelectorEnum>;
  readonly sys: InputMaybe<contentfulPostSeoDescriptionTextNodeSysFieldSelector>;
};

type contentfulPostSeoDescriptionTextNodeFilterInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly seoDescription: InputMaybe<StringQueryOperatorInput>;
  readonly sys: InputMaybe<contentfulPostSeoDescriptionTextNodeSysFilterInput>;
};

type contentfulPostSeoDescriptionTextNodeFilterListInput = {
  readonly elemMatch: InputMaybe<contentfulPostSeoDescriptionTextNodeFilterInput>;
};

type contentfulPostSeoDescriptionTextNodeGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<contentfulPostSeoDescriptionTextNodeEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<contentfulPostSeoDescriptionTextNodeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<contentfulPostSeoDescriptionTextNode>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type contentfulPostSeoDescriptionTextNodeGroupConnection_distinctArgs = {
  field: contentfulPostSeoDescriptionTextNodeFieldSelector;
};


type contentfulPostSeoDescriptionTextNodeGroupConnection_groupArgs = {
  field: contentfulPostSeoDescriptionTextNodeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type contentfulPostSeoDescriptionTextNodeGroupConnection_maxArgs = {
  field: contentfulPostSeoDescriptionTextNodeFieldSelector;
};


type contentfulPostSeoDescriptionTextNodeGroupConnection_minArgs = {
  field: contentfulPostSeoDescriptionTextNodeFieldSelector;
};


type contentfulPostSeoDescriptionTextNodeGroupConnection_sumArgs = {
  field: contentfulPostSeoDescriptionTextNodeFieldSelector;
};

type contentfulPostSeoDescriptionTextNodeSortInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly seoDescription: InputMaybe<SortOrderEnum>;
  readonly sys: InputMaybe<contentfulPostSeoDescriptionTextNodeSysSortInput>;
};

type contentfulPostSeoDescriptionTextNodeSys = {
  readonly type: Maybe<Scalars['String']>;
};

type contentfulPostSeoDescriptionTextNodeSysFieldSelector = {
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type contentfulPostSeoDescriptionTextNodeSysFilterInput = {
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type contentfulPostSeoDescriptionTextNodeSysSortInput = {
  readonly type: InputMaybe<SortOrderEnum>;
};

type contentfulPostSeoOpenGraphDescriptionTextNode = Node & {
  /** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
  readonly childMarkdownRemark: Maybe<MarkdownRemark>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type MarkdownRemark */
  readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly seoOpenGraphDescription: Maybe<Scalars['String']>;
  readonly sys: Maybe<contentfulPostSeoOpenGraphDescriptionTextNodeSys>;
};

type contentfulPostSeoOpenGraphDescriptionTextNodeConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<contentfulPostSeoOpenGraphDescriptionTextNodeEdge>;
  readonly group: ReadonlyArray<contentfulPostSeoOpenGraphDescriptionTextNodeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<contentfulPostSeoOpenGraphDescriptionTextNode>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type contentfulPostSeoOpenGraphDescriptionTextNodeConnection_distinctArgs = {
  field: contentfulPostSeoOpenGraphDescriptionTextNodeFieldSelector;
};


type contentfulPostSeoOpenGraphDescriptionTextNodeConnection_groupArgs = {
  field: contentfulPostSeoOpenGraphDescriptionTextNodeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type contentfulPostSeoOpenGraphDescriptionTextNodeConnection_maxArgs = {
  field: contentfulPostSeoOpenGraphDescriptionTextNodeFieldSelector;
};


type contentfulPostSeoOpenGraphDescriptionTextNodeConnection_minArgs = {
  field: contentfulPostSeoOpenGraphDescriptionTextNodeFieldSelector;
};


type contentfulPostSeoOpenGraphDescriptionTextNodeConnection_sumArgs = {
  field: contentfulPostSeoOpenGraphDescriptionTextNodeFieldSelector;
};

type contentfulPostSeoOpenGraphDescriptionTextNodeEdge = {
  readonly next: Maybe<contentfulPostSeoOpenGraphDescriptionTextNode>;
  readonly node: contentfulPostSeoOpenGraphDescriptionTextNode;
  readonly previous: Maybe<contentfulPostSeoOpenGraphDescriptionTextNode>;
};

type contentfulPostSeoOpenGraphDescriptionTextNodeFieldSelector = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly seoOpenGraphDescription: InputMaybe<FieldSelectorEnum>;
  readonly sys: InputMaybe<contentfulPostSeoOpenGraphDescriptionTextNodeSysFieldSelector>;
};

type contentfulPostSeoOpenGraphDescriptionTextNodeFilterInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly seoOpenGraphDescription: InputMaybe<StringQueryOperatorInput>;
  readonly sys: InputMaybe<contentfulPostSeoOpenGraphDescriptionTextNodeSysFilterInput>;
};

type contentfulPostSeoOpenGraphDescriptionTextNodeFilterListInput = {
  readonly elemMatch: InputMaybe<contentfulPostSeoOpenGraphDescriptionTextNodeFilterInput>;
};

type contentfulPostSeoOpenGraphDescriptionTextNodeGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<contentfulPostSeoOpenGraphDescriptionTextNodeEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<contentfulPostSeoOpenGraphDescriptionTextNodeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<contentfulPostSeoOpenGraphDescriptionTextNode>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type contentfulPostSeoOpenGraphDescriptionTextNodeGroupConnection_distinctArgs = {
  field: contentfulPostSeoOpenGraphDescriptionTextNodeFieldSelector;
};


type contentfulPostSeoOpenGraphDescriptionTextNodeGroupConnection_groupArgs = {
  field: contentfulPostSeoOpenGraphDescriptionTextNodeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type contentfulPostSeoOpenGraphDescriptionTextNodeGroupConnection_maxArgs = {
  field: contentfulPostSeoOpenGraphDescriptionTextNodeFieldSelector;
};


type contentfulPostSeoOpenGraphDescriptionTextNodeGroupConnection_minArgs = {
  field: contentfulPostSeoOpenGraphDescriptionTextNodeFieldSelector;
};


type contentfulPostSeoOpenGraphDescriptionTextNodeGroupConnection_sumArgs = {
  field: contentfulPostSeoOpenGraphDescriptionTextNodeFieldSelector;
};

type contentfulPostSeoOpenGraphDescriptionTextNodeSortInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly seoOpenGraphDescription: InputMaybe<SortOrderEnum>;
  readonly sys: InputMaybe<contentfulPostSeoOpenGraphDescriptionTextNodeSysSortInput>;
};

type contentfulPostSeoOpenGraphDescriptionTextNodeSys = {
  readonly type: Maybe<Scalars['String']>;
};

type contentfulPostSeoOpenGraphDescriptionTextNodeSysFieldSelector = {
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type contentfulPostSeoOpenGraphDescriptionTextNodeSysFilterInput = {
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type contentfulPostSeoOpenGraphDescriptionTextNodeSysSortInput = {
  readonly type: InputMaybe<SortOrderEnum>;
};

type contentfulPostSeoTwitterDescriptionTextNode = Node & {
  /** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
  readonly childMarkdownRemark: Maybe<MarkdownRemark>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type MarkdownRemark */
  readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly seoTwitterDescription: Maybe<Scalars['String']>;
  readonly sys: Maybe<contentfulPostSeoTwitterDescriptionTextNodeSys>;
};

type contentfulPostSeoTwitterDescriptionTextNodeConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<contentfulPostSeoTwitterDescriptionTextNodeEdge>;
  readonly group: ReadonlyArray<contentfulPostSeoTwitterDescriptionTextNodeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<contentfulPostSeoTwitterDescriptionTextNode>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type contentfulPostSeoTwitterDescriptionTextNodeConnection_distinctArgs = {
  field: contentfulPostSeoTwitterDescriptionTextNodeFieldSelector;
};


type contentfulPostSeoTwitterDescriptionTextNodeConnection_groupArgs = {
  field: contentfulPostSeoTwitterDescriptionTextNodeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type contentfulPostSeoTwitterDescriptionTextNodeConnection_maxArgs = {
  field: contentfulPostSeoTwitterDescriptionTextNodeFieldSelector;
};


type contentfulPostSeoTwitterDescriptionTextNodeConnection_minArgs = {
  field: contentfulPostSeoTwitterDescriptionTextNodeFieldSelector;
};


type contentfulPostSeoTwitterDescriptionTextNodeConnection_sumArgs = {
  field: contentfulPostSeoTwitterDescriptionTextNodeFieldSelector;
};

type contentfulPostSeoTwitterDescriptionTextNodeEdge = {
  readonly next: Maybe<contentfulPostSeoTwitterDescriptionTextNode>;
  readonly node: contentfulPostSeoTwitterDescriptionTextNode;
  readonly previous: Maybe<contentfulPostSeoTwitterDescriptionTextNode>;
};

type contentfulPostSeoTwitterDescriptionTextNodeFieldSelector = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly seoTwitterDescription: InputMaybe<FieldSelectorEnum>;
  readonly sys: InputMaybe<contentfulPostSeoTwitterDescriptionTextNodeSysFieldSelector>;
};

type contentfulPostSeoTwitterDescriptionTextNodeFilterInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly seoTwitterDescription: InputMaybe<StringQueryOperatorInput>;
  readonly sys: InputMaybe<contentfulPostSeoTwitterDescriptionTextNodeSysFilterInput>;
};

type contentfulPostSeoTwitterDescriptionTextNodeFilterListInput = {
  readonly elemMatch: InputMaybe<contentfulPostSeoTwitterDescriptionTextNodeFilterInput>;
};

type contentfulPostSeoTwitterDescriptionTextNodeGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<contentfulPostSeoTwitterDescriptionTextNodeEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<contentfulPostSeoTwitterDescriptionTextNodeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<contentfulPostSeoTwitterDescriptionTextNode>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type contentfulPostSeoTwitterDescriptionTextNodeGroupConnection_distinctArgs = {
  field: contentfulPostSeoTwitterDescriptionTextNodeFieldSelector;
};


type contentfulPostSeoTwitterDescriptionTextNodeGroupConnection_groupArgs = {
  field: contentfulPostSeoTwitterDescriptionTextNodeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type contentfulPostSeoTwitterDescriptionTextNodeGroupConnection_maxArgs = {
  field: contentfulPostSeoTwitterDescriptionTextNodeFieldSelector;
};


type contentfulPostSeoTwitterDescriptionTextNodeGroupConnection_minArgs = {
  field: contentfulPostSeoTwitterDescriptionTextNodeFieldSelector;
};


type contentfulPostSeoTwitterDescriptionTextNodeGroupConnection_sumArgs = {
  field: contentfulPostSeoTwitterDescriptionTextNodeFieldSelector;
};

type contentfulPostSeoTwitterDescriptionTextNodeSortInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly seoTwitterDescription: InputMaybe<SortOrderEnum>;
  readonly sys: InputMaybe<contentfulPostSeoTwitterDescriptionTextNodeSysSortInput>;
};

type contentfulPostSeoTwitterDescriptionTextNodeSys = {
  readonly type: Maybe<Scalars['String']>;
};

type contentfulPostSeoTwitterDescriptionTextNodeSysFieldSelector = {
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type contentfulPostSeoTwitterDescriptionTextNodeSysFilterInput = {
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type contentfulPostSeoTwitterDescriptionTextNodeSysSortInput = {
  readonly type: InputMaybe<SortOrderEnum>;
};

type contentfulTestimonialQuoteTextNode = Node & {
  /** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
  readonly childMarkdownRemark: Maybe<MarkdownRemark>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type MarkdownRemark */
  readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly quote: Maybe<Scalars['String']>;
  readonly sys: Maybe<contentfulTestimonialQuoteTextNodeSys>;
};

type contentfulTestimonialQuoteTextNodeConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<contentfulTestimonialQuoteTextNodeEdge>;
  readonly group: ReadonlyArray<contentfulTestimonialQuoteTextNodeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<contentfulTestimonialQuoteTextNode>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type contentfulTestimonialQuoteTextNodeConnection_distinctArgs = {
  field: contentfulTestimonialQuoteTextNodeFieldSelector;
};


type contentfulTestimonialQuoteTextNodeConnection_groupArgs = {
  field: contentfulTestimonialQuoteTextNodeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type contentfulTestimonialQuoteTextNodeConnection_maxArgs = {
  field: contentfulTestimonialQuoteTextNodeFieldSelector;
};


type contentfulTestimonialQuoteTextNodeConnection_minArgs = {
  field: contentfulTestimonialQuoteTextNodeFieldSelector;
};


type contentfulTestimonialQuoteTextNodeConnection_sumArgs = {
  field: contentfulTestimonialQuoteTextNodeFieldSelector;
};

type contentfulTestimonialQuoteTextNodeEdge = {
  readonly next: Maybe<contentfulTestimonialQuoteTextNode>;
  readonly node: contentfulTestimonialQuoteTextNode;
  readonly previous: Maybe<contentfulTestimonialQuoteTextNode>;
};

type contentfulTestimonialQuoteTextNodeFieldSelector = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly quote: InputMaybe<FieldSelectorEnum>;
  readonly sys: InputMaybe<contentfulTestimonialQuoteTextNodeSysFieldSelector>;
};

type contentfulTestimonialQuoteTextNodeFilterInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly quote: InputMaybe<StringQueryOperatorInput>;
  readonly sys: InputMaybe<contentfulTestimonialQuoteTextNodeSysFilterInput>;
};

type contentfulTestimonialQuoteTextNodeFilterListInput = {
  readonly elemMatch: InputMaybe<contentfulTestimonialQuoteTextNodeFilterInput>;
};

type contentfulTestimonialQuoteTextNodeGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<contentfulTestimonialQuoteTextNodeEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<contentfulTestimonialQuoteTextNodeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<contentfulTestimonialQuoteTextNode>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type contentfulTestimonialQuoteTextNodeGroupConnection_distinctArgs = {
  field: contentfulTestimonialQuoteTextNodeFieldSelector;
};


type contentfulTestimonialQuoteTextNodeGroupConnection_groupArgs = {
  field: contentfulTestimonialQuoteTextNodeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type contentfulTestimonialQuoteTextNodeGroupConnection_maxArgs = {
  field: contentfulTestimonialQuoteTextNodeFieldSelector;
};


type contentfulTestimonialQuoteTextNodeGroupConnection_minArgs = {
  field: contentfulTestimonialQuoteTextNodeFieldSelector;
};


type contentfulTestimonialQuoteTextNodeGroupConnection_sumArgs = {
  field: contentfulTestimonialQuoteTextNodeFieldSelector;
};

type contentfulTestimonialQuoteTextNodeSortInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly quote: InputMaybe<SortOrderEnum>;
  readonly sys: InputMaybe<contentfulTestimonialQuoteTextNodeSysSortInput>;
};

type contentfulTestimonialQuoteTextNodeSys = {
  readonly type: Maybe<Scalars['String']>;
};

type contentfulTestimonialQuoteTextNodeSysFieldSelector = {
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type contentfulTestimonialQuoteTextNodeSysFilterInput = {
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type contentfulTestimonialQuoteTextNodeSysSortInput = {
  readonly type: InputMaybe<SortOrderEnum>;
};

type GatsbyImageSharpFixedFragment = { readonly base64: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_noBase64Fragment = { readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_tracedSVGFragment = { readonly tracedSVG: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_withWebpFragment = { readonly base64: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFixed_withWebp_noBase64Fragment = { readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFixed_withWebp_tracedSVGFragment = { readonly tracedSVG: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFluidFragment = { readonly base64: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_noBase64Fragment = { readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_tracedSVGFragment = { readonly tracedSVG: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_withWebpFragment = { readonly base64: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluid_withWebp_noBase64Fragment = { readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluid_withWebp_tracedSVGFragment = { readonly tracedSVG: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluidLimitPresentationSizeFragment = { readonly maxHeight: number, readonly maxWidth: number };

type homeQueryQueryVariables = Exact<{ [key: string]: never; }>;


type homeQueryQuery = { readonly contentfulPage: { readonly id: string, readonly seoMetaRobotsNofollow: boolean | null, readonly seoMetaRobotsNoindex: boolean | null, readonly seoTitle: string | null, readonly title: string | null, readonly seoDescription: { readonly seoDescription: string | null } | null, readonly pageBlocks: ReadonlyArray<{ readonly id: string, readonly title: string | null, readonly benefits: ReadonlyArray<{ readonly id: string, readonly title: string | null, readonly subtitle: string | null, readonly icon: { readonly file: { readonly url: string | null } | null } | null, readonly description: { readonly raw: string | null } | null } | null> | null, readonly internal: { readonly type: string } } | { readonly id: string, readonly title: string | null, readonly services: ReadonlyArray<{ readonly id: string, readonly subtitle: string | null, readonly title: string | null, readonly image: { readonly title: string | null, readonly id: string, readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData | null, readonly file: { readonly url: string | null, readonly details: { readonly image: { readonly height: number | null, readonly width: number | null } | null } | null } | null } | null, readonly page: { readonly slug: string | null } | null } | null> | null, readonly internal: { readonly type: string } } | { readonly id: string, readonly title: string | null, readonly subtitle: string | null, readonly internal: { readonly type: string }, readonly services: ReadonlyArray<{ readonly title: string | null, readonly subtitle: string | null, readonly description: { readonly raw: string | null } | null, readonly image: { readonly title: string | null, readonly id: string, readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData | null, readonly file: { readonly url: string | null, readonly details: { readonly image: { readonly height: number | null, readonly width: number | null } | null } | null } | null } | null, readonly page: { readonly slug: string | null } | null } | null> | null } | { readonly id: string, readonly title: string | null, readonly testimonials: ReadonlyArray<{ readonly id: string, readonly name: string | null, readonly image: { readonly file: { readonly url: string | null } | null } | null, readonly quote: { readonly internal: { readonly content: string | null } } | null } | null> | null, readonly internal: { readonly type: string } } | { readonly id: string, readonly settingVariant: string | null, readonly title: string | null, readonly image: { readonly title: string | null, readonly id: string, readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData | null, readonly file: { readonly url: string | null, readonly details: { readonly image: { readonly height: number | null, readonly width: number | null } | null } | null } | null } | null, readonly internal: { readonly type: string } } | { readonly id: string, readonly title: string | null, readonly content: { readonly raw: string | null } | null, readonly internal: { readonly type: string } } | { readonly id: string, readonly title: string | null, readonly settingVariant: string | null, readonly items: ReadonlyArray<{ readonly id: string, readonly subtitle: string | null, readonly title: string | null, readonly description: { readonly raw: string | null } | null, readonly image: { readonly title: string | null, readonly id: string, readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData | null, readonly file: { readonly url: string | null, readonly details: { readonly image: { readonly height: number | null, readonly width: number | null } | null } | null } | null } | null, readonly icon: { readonly title: string | null, readonly id: string, readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData | null, readonly file: { readonly url: string | null, readonly details: { readonly image: { readonly height: number | null, readonly width: number | null } | null } | null } | null } | null, readonly page: { readonly slug: string | null } | null } | null> | null, readonly internal: { readonly type: string } } | {} | null> | null } | null };

type imageQueryFragment = { readonly title: string | null, readonly id: string, readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData | null, readonly file: { readonly url: string | null, readonly details: { readonly image: { readonly height: number | null, readonly width: number | null } | null } | null } | null };

type MenuQueryQueryVariables = Exact<{ [key: string]: never; }>;


type MenuQueryQuery = { readonly contentfulSiteSettings: { readonly siteTitle: string | null, readonly siteLogo: { readonly file: { readonly url: string | null } | null } | null, readonly siteHeaderCta: { readonly title: string | null, readonly seoTitle: string | null, readonly slug: string | null } | null, readonly navigation: ReadonlyArray<{ readonly slug: string | null, readonly title: string | null, readonly seoTitle: string | null } | null> | null, readonly subMenu: ReadonlyArray<{ readonly title: string | null, readonly url: string | null } | null> | null } | null };

type PageTemplateQueryQueryVariables = Exact<{
  slug: Scalars['String'];
}>;


type PageTemplateQueryQuery = { readonly contentfulPage: { readonly title: string | null, readonly seoTitle: string | null, readonly seoDescription: { readonly seoDescription: string | null } | null, readonly body: { readonly raw: string | null } | null, readonly pageBlocks: ReadonlyArray<{ readonly id: string, readonly title: string | null, readonly contentString: string | null, readonly settingVariant: string | null, readonly internal: { readonly type: string }, readonly ctaButton: { readonly slug: string | null, readonly title: string | null, readonly seoTitle: string | null } | null } | { readonly id: string, readonly title: string | null, readonly settingVariant: string | null, readonly photo: { readonly title: string | null, readonly id: string, readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData | null, readonly file: { readonly url: string | null, readonly details: { readonly image: { readonly height: number | null, readonly width: number | null } | null } | null } | null } | null, readonly questions: ReadonlyArray<{ readonly id: string, readonly question: string | null, readonly answer: { readonly raw: string | null } | null } | null> | null, readonly internal: { readonly type: string } } | { readonly id: string, readonly title: string | null, readonly services: ReadonlyArray<{ readonly title: string | null, readonly image: { readonly title: string | null, readonly id: string, readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData | null, readonly file: { readonly url: string | null, readonly details: { readonly image: { readonly height: number | null, readonly width: number | null } | null } | null } | null } | null, readonly page: { readonly slug: string | null } | null } | null> | null, readonly internal: { readonly type: string } } | { readonly id: string, readonly title: string | null, readonly settingVariant: string | null, readonly imageSubCaption: string | null, readonly photo: { readonly title: string | null, readonly id: string, readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData | null, readonly file: { readonly url: string | null, readonly details: { readonly image: { readonly height: number | null, readonly width: number | null } | null } | null } | null } | null, readonly content: { readonly raw: string | null } | null, readonly internal: { readonly type: string } } | { readonly id: string, readonly visionTitle: string | null, readonly title: string | null, readonly missionTitle: string | null, readonly visionDescription: { readonly visionDescription: string | null } | null, readonly missionDescription: { readonly missionDescription: string | null } | null, readonly internal: { readonly type: string } } | { readonly id: string, readonly settingVariant: string | null, readonly title: string | null, readonly image: { readonly title: string | null, readonly id: string, readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData | null, readonly file: { readonly url: string | null, readonly details: { readonly image: { readonly height: number | null, readonly width: number | null } | null } | null } | null } | null, readonly internal: { readonly type: string } } | { readonly id: string, readonly title: string | null, readonly settingVariant: string | null, readonly internal: { readonly type: string }, readonly items: ReadonlyArray<{ readonly title: string | null, readonly subtitle: string | null, readonly id: string, readonly description: { readonly raw: string | null } | null, readonly icon: { readonly file: { readonly url: string | null } | null } | null, readonly image: { readonly file: { readonly url: string | null } | null } | null } | null> | null } | {} | null> | null } | null };

type SEOQueryVariables = Exact<{ [key: string]: never; }>;


type SEOQuery = { readonly site: { readonly siteMetadata: { readonly titleTemplate: string | null, readonly twitterUsername: string | null, readonly defaultTitle: string | null, readonly defaultDescription: string | null, readonly siteUrl: string | null, readonly defaultImage: string | null } | null } | null };


}
